@page "/"
@using SparkleBot.Enums
@using SparkleBot.Interfaces
@using SparkleBot.Models
@inject ISparkleService SparkleService

<PageTitle>Sparkle Chat</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="status-message-container">
                <span class="status-title">Sparkle Ready</span>
                <div class="status-divider"></div>
                <p>@SparkleService.ReadyMessage</p>
            </div>
             
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12 col-md-8 offset-md-2">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <select class="form-select form-select-sm me-2" style="width: 150px;" @bind="@SelectedFirstModel">
                        @foreach (var model in Enum.GetValues(typeof(FriendModel)))
                        {
                            <option value="@model">@model</option>
                        }
                    </select>
                    <button class="btn btn-primary btn-sm" @onclick="StartModelConversation">
                        Start Model Conversation
                    </button>
                </div>
                <div class="d-flex align-items-center">
                    <input type="text" class="form-control form-control-sm me-2" placeholder="Username" @bind="username" style="width: 150px;" />
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="saveInteraction" @bind="saveInteraction">
                        <label class="form-check-label" for="saveInteraction">
                            Save to history
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-8 offset-md-2">
            <div class="card">
                <div class="card-body chat-container" style="height: 500px; overflow-y: auto;">
                    @foreach (var message in chatHistory)
                    {
                        <div class="message @(message.IsUser ? "message-user" : "message-ai")">
                            <strong>@message.Username</strong>
                            <p>@message.Content</p>
                            <small class="text-muted">@message.Timestamp.ToString("HH:mm:ss")</small>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(currentThinking))
                    {
                        <div class="message message-ai">
                            <strong>Sparkle</strong>
                            <p>@currentThinking</p>
                            <small class="text-muted">Thinking...</small>
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <div class="input-group">
                        <textarea class="form-control" rows="2" placeholder="Type your message..." @bind="userPrompt"
                            @onkeyup="HandleKeyUp"></textarea>
                        <button class="btn btn-primary" @onclick="HandleInteract">
                            <i class="oi oi-paper-plane"></i> Send
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
    }

    .message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 8px;
        max-width: 80%;
    }

    .message-user {
        align-self: flex-end;
        background-color: #e6f2ff;
        margin-left: auto;
    }

    .message-ai {
        align-self: flex-start;
        background-color: #f0f0f0;
        margin-right: auto;
    }


.status-message-container {
    background-color: #e9ecef;
    border: 1px solid #ced4da;
    border-radius: 8px;
    padding: 12px 20px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 15px;
    box-shadow: 0 2px 4px rgba(0,0,0,.05);
}

.status-title {
    font-size: 1.2em;
    font-weight: bold;
    color: #495057;
    white-space: nowrap;
}

.status-divider {
    width: 1px;
    height: 24px;
    background-color: #adb5bd;
    flex-shrink: 0;
}

.status-message-container p {
    color: #6c757d;
    margin: 0;
    flex-grow: 1;
    text-align: left;
}

</style>

@code {
    private string userPrompt = "";
    private string username = "user";
    private string currentThinking = "";
    private bool saveInteraction = false;
    private FriendModel SelectedFirstModel { get; set; } = FriendModel.Flicker;

    private List<ModelChatMessage> chatHistory = new List<ModelChatMessage>();
    private Conversation currentConversation = new Conversation();

    private async Task StartModelConversation()
    {
        // Clear previous chat
        chatHistory.Clear();
        currentThinking = "Starting model conversation...";
        StateHasChanged();

        try 
        {
            // Determine who starts first
            bool sparkleFirst = Random.Shared.Next(2) == 0;
            
            await foreach (var conversationPart in SparkleService.ConverseWithModel(SelectedFirstModel, sparkleFirst, saveInteraction))
            {
                // Parse the conversation part
                var isSparkle = (
                        (sparkleFirst && conversationPart.Role == Role.User)
                        ||( !sparkleFirst && conversationPart.Role == Role.Assistant)
                        );
                        
                var parts = conversationPart.Content.Split(" says: ", 2);
                var username = isSparkle ? "Sparkle" : SelectedFirstModel.ToString();
                var content = parts.Length > 1 ? parts[1] : conversationPart.Content;

                // Add message to chat
                var message = new ModelChatMessage 
                { 
                    Username = username, 
                    Content = content, 
                    IsUser = !isSparkle,
                    Timestamp = DateTime.Now
                };
                chatHistory.Add(message);

                // Force UI update
                currentThinking = "";
                StateHasChanged();

                // Optional: Scroll to bottom of chat
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            chatHistory.Add(new ModelChatMessage 
            { 
                Username = "System", 
                Content = $"Error starting conversation: {ex.Message}",
                IsUser = false,
                Timestamp = DateTime.Now
            });
            currentThinking = "";
            StateHasChanged();
        }
    }

    private async Task HandleInteract()
    {
        if (string.IsNullOrWhiteSpace(userPrompt)) return;

        // Add user message to chat history and conversation
        var userMessage = new ModelChatMessage
        {
            Content = userPrompt,
            Username = username,
            IsUser = true,
            Timestamp = DateTime.Now
        };
        chatHistory.Add(userMessage);

        // Prepare conversation with existing context
        currentConversation.Add(new ConversationPart
        {
            Role = Role.User,
            Content = $"{username} says: {userPrompt}"
        });

        // Clear input and show thinking state
        currentThinking = "Thinking...";
        StateHasChanged();

        try
        {
            // Interact using the new conversation-based method
            var response = await SparkleService.Interact(currentConversation, username, saveInteraction);

            // Add AI response to chat history and conversation
            var aiMessage = new ModelChatMessage
            {
                Content = response,
                Username = "Sparkle",
                IsUser = false,
                Timestamp = DateTime.Now
            };
            chatHistory.Add(aiMessage);

            // Add AI response to conversation
            currentConversation.Add(new ConversationPart
            {
                Role = Role.Assistant,
                Content = response
            });

            // Clear thinking state and input
            currentThinking = "";
            userPrompt = "";
        }
        catch (Exception ex)
        {
            currentThinking = $"Error: {ex.Message}";
        }

        StateHasChanged();
    }

    // Allow sending message with Enter key
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await HandleInteract();
        }
    }

    // Helper class to represent chat messages
    private class ModelChatMessage
    {
        public string Username { get; set; }
        public string Content { get; set; }
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
    }
}