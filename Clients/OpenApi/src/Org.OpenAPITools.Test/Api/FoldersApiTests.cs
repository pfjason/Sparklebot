/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing FoldersApi
    /// </summary>
    public sealed class FoldersApiTests : ApiTestsBase
    {
        private readonly IFoldersApi _instance;

        public FoldersApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IFoldersApi>();
        }

        /// <summary>
        /// Test CreateFolderApiV1FoldersPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateFolderApiV1FoldersPostAsyncTest()
        {
            FolderForm folderForm = default!;
            var response = await _instance.CreateFolderApiV1FoldersPostAsync(folderForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test DeleteFolderByIdApiV1FoldersIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteFolderByIdApiV1FoldersIdDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteFolderByIdApiV1FoldersIdDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetFolderByIdApiV1FoldersIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFolderByIdApiV1FoldersIdGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFolderByIdApiV1FoldersIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<FolderModel>(model);
        }

        /// <summary>
        /// Test GetFoldersApiV1FoldersGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFoldersApiV1FoldersGetAsyncTest()
        {
            var response = await _instance.GetFoldersApiV1FoldersGetAsync();
            var model = response.Ok();
            Assert.IsType<List<FolderModel>>(model);
        }

        /// <summary>
        /// Test UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostAsyncTest()
        {
            string id = default!;
            FolderIsExpandedForm folderIsExpandedForm = default!;
            var response = await _instance.UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostAsync(id, folderIsExpandedForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateFolderNameByIdApiV1FoldersIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFolderNameByIdApiV1FoldersIdUpdatePostAsyncTest()
        {
            string id = default!;
            FolderForm folderForm = default!;
            var response = await _instance.UpdateFolderNameByIdApiV1FoldersIdUpdatePostAsync(id, folderForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostAsyncTest()
        {
            string id = default!;
            FolderParentIdForm folderParentIdForm = default!;
            var response = await _instance.UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostAsync(id, folderParentIdForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
