/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ToolsApi
    /// </summary>
    public sealed class ToolsApiTests : ApiTestsBase
    {
        private readonly IToolsApi _instance;

        public ToolsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IToolsApi>();
        }

        /// <summary>
        /// Test CreateNewToolsApiV1ToolsCreatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewToolsApiV1ToolsCreatePostAsyncTest()
        {
            ToolForm toolForm = default!;
            var response = await _instance.CreateNewToolsApiV1ToolsCreatePostAsync(toolForm);
            var model = response.Ok();
            Assert.IsType<ToolResponse>(model);
        }

        /// <summary>
        /// Test DeleteToolsByIdApiV1ToolsIdIdDeleteDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test ExportToolsApiV1ToolsExportGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExportToolsApiV1ToolsExportGetAsyncTest()
        {
            var response = await _instance.ExportToolsApiV1ToolsExportGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ToolModel>>(model);
        }

        /// <summary>
        /// Test GetToolListApiV1ToolsListGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetToolListApiV1ToolsListGetAsyncTest()
        {
            var response = await _instance.GetToolListApiV1ToolsListGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ToolUserResponse>>(model);
        }

        /// <summary>
        /// Test GetToolsApiV1ToolsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetToolsApiV1ToolsGetAsyncTest()
        {
            var response = await _instance.GetToolsApiV1ToolsGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ToolUserResponse>>(model);
        }

        /// <summary>
        /// Test GetToolsByIdApiV1ToolsIdIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetToolsByIdApiV1ToolsIdIdGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetToolsByIdApiV1ToolsIdIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<ToolModel>(model);
        }

        /// <summary>
        /// Test GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetToolsValvesByIdApiV1ToolsIdIdValvesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetToolsValvesByIdApiV1ToolsIdIdValvesGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetToolsValvesByIdApiV1ToolsIdIdValvesGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test LoadToolFromUrlApiV1ToolsLoadUrlPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LoadToolFromUrlApiV1ToolsLoadUrlPostAsyncTest()
        {
            LoadUrlForm loadUrlForm = default!;
            var response = await _instance.LoadToolFromUrlApiV1ToolsLoadUrlPostAsync(loadUrlForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateToolsByIdApiV1ToolsIdIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateToolsByIdApiV1ToolsIdIdUpdatePostAsyncTest()
        {
            string id = default!;
            ToolForm toolForm = default!;
            var response = await _instance.UpdateToolsByIdApiV1ToolsIdIdUpdatePostAsync(id, toolForm);
            var model = response.Ok();
            Assert.IsType<ToolModel>(model);
        }

        /// <summary>
        /// Test UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostAsyncTest()
        {
            string id = default!;
            Object body = default!;
            var response = await _instance.UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostAsync(id, body);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostAsyncTest()
        {
            string id = default!;
            Object body = default!;
            var response = await _instance.UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostAsync(id, body);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
