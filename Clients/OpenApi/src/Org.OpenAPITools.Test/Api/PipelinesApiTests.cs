/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing PipelinesApi
    /// </summary>
    public sealed class PipelinesApiTests : ApiTestsBase
    {
        private readonly IPipelinesApi _instance;

        public PipelinesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IPipelinesApi>();
        }

        /// <summary>
        /// Test AddPipelineApiV1PipelinesAddPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddPipelineApiV1PipelinesAddPostAsyncTest()
        {
            AddPipelineForm addPipelineForm = default!;
            var response = await _instance.AddPipelineApiV1PipelinesAddPostAsync(addPipelineForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test DeletePipelineApiV1PipelinesDeleteDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeletePipelineApiV1PipelinesDeleteDeleteAsyncTest()
        {
            DeletePipelineForm deletePipelineForm = default!;
            var response = await _instance.DeletePipelineApiV1PipelinesDeleteDeleteAsync(deletePipelineForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetPipelineValvesApiV1PipelinesPipelineIdValvesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineValvesApiV1PipelinesPipelineIdValvesGetAsyncTest()
        {
            string pipelineId = default!;
            int? urlIdx = default!;
            var response = await _instance.GetPipelineValvesApiV1PipelinesPipelineIdValvesGetAsync(pipelineId, urlIdx);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetAsyncTest()
        {
            string pipelineId = default!;
            int? urlIdx = default!;
            var response = await _instance.GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetAsync(pipelineId, urlIdx);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetPipelinesApiV1PipelinesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelinesApiV1PipelinesGetAsyncTest()
        {
            Client.Option<int?> urlIdx = default!;
            var response = await _instance.GetPipelinesApiV1PipelinesGetAsync(urlIdx);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetPipelinesListApiV1PipelinesListGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelinesListApiV1PipelinesListGetAsyncTest()
        {
            var response = await _instance.GetPipelinesListApiV1PipelinesListGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostAsyncTest()
        {
            string pipelineId = default!;
            Object body = default!;
            int? urlIdx = default!;
            var response = await _instance.UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostAsync(pipelineId, body, urlIdx);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UploadPipelineApiV1PipelinesUploadPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadPipelineApiV1PipelinesUploadPostAsyncTest()
        {
            int urlIdx = default!;
            System.IO.Stream file = default!;
            var response = await _instance.UploadPipelineApiV1PipelinesUploadPostAsync(urlIdx, file);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
