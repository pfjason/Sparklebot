/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ChannelsApi
    /// </summary>
    public sealed class ChannelsApiTests : ApiTestsBase
    {
        private readonly IChannelsApi _instance;

        public ChannelsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IChannelsApi>();
        }

        /// <summary>
        /// Test AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostAsyncTest()
        {
            string id = default!;
            string messageId = default!;
            ReactionForm reactionForm = default!;
            var response = await _instance.AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostAsync(id, messageId, reactionForm);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test CreateNewChannelApiV1ChannelsCreatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewChannelApiV1ChannelsCreatePostAsyncTest()
        {
            ChannelForm channelForm = default!;
            var response = await _instance.CreateNewChannelApiV1ChannelsCreatePostAsync(channelForm);
            var model = response.Ok();
            Assert.IsType<ChannelModel>(model);
        }

        /// <summary>
        /// Test DeleteChannelByIdApiV1ChannelsIdDeleteDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteChannelByIdApiV1ChannelsIdDeleteDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteChannelByIdApiV1ChannelsIdDeleteDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteAsyncTest()
        {
            string id = default!;
            string messageId = default!;
            var response = await _instance.DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteAsync(id, messageId);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test GetChannelByIdApiV1ChannelsIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChannelByIdApiV1ChannelsIdGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetChannelByIdApiV1ChannelsIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<ChannelModel>(model);
        }

        /// <summary>
        /// Test GetChannelMessageApiV1ChannelsIdMessagesMessageIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetAsyncTest()
        {
            string id = default!;
            string messageId = default!;
            var response = await _instance.GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetAsync(id, messageId);
            var model = response.Ok();
            Assert.IsType<MessageUserResponse>(model);
        }

        /// <summary>
        /// Test GetChannelMessagesApiV1ChannelsIdMessagesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChannelMessagesApiV1ChannelsIdMessagesGetAsyncTest()
        {
            string id = default!;
            Client.Option<int> skip = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.GetChannelMessagesApiV1ChannelsIdMessagesGetAsync(id, skip, limit);
            var model = response.Ok();
            Assert.IsType<List<MessageUserResponse>>(model);
        }

        /// <summary>
        /// Test GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetAsyncTest()
        {
            string id = default!;
            string messageId = default!;
            Client.Option<int> skip = default!;
            Client.Option<int> limit = default!;
            var response = await _instance.GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetAsync(id, messageId, skip, limit);
            var model = response.Ok();
            Assert.IsType<List<MessageUserResponse>>(model);
        }

        /// <summary>
        /// Test GetChannelsApiV1ChannelsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChannelsApiV1ChannelsGetAsyncTest()
        {
            var response = await _instance.GetChannelsApiV1ChannelsGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ChannelModel>>(model);
        }

        /// <summary>
        /// Test PostNewMessageApiV1ChannelsIdMessagesPostPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostNewMessageApiV1ChannelsIdMessagesPostPostAsyncTest()
        {
            string id = default!;
            OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm = default!;
            var response = await _instance.PostNewMessageApiV1ChannelsIdMessagesPostPostAsync(id, openWebuiModelsMessagesMessageForm);
            var model = response.Ok();
            Assert.IsType<MessageModel>(model);
        }

        /// <summary>
        /// Test RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostAsyncTest()
        {
            string id = default!;
            string messageId = default!;
            ReactionForm reactionForm = default!;
            var response = await _instance.RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostAsync(id, messageId, reactionForm);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test UpdateChannelByIdApiV1ChannelsIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateChannelByIdApiV1ChannelsIdUpdatePostAsyncTest()
        {
            string id = default!;
            ChannelForm channelForm = default!;
            var response = await _instance.UpdateChannelByIdApiV1ChannelsIdUpdatePostAsync(id, channelForm);
            var model = response.Ok();
            Assert.IsType<ChannelModel>(model);
        }

        /// <summary>
        /// Test UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostAsyncTest()
        {
            string id = default!;
            string messageId = default!;
            OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm = default!;
            var response = await _instance.UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostAsync(id, messageId, openWebuiModelsMessagesMessageForm);
            var model = response.Ok();
            Assert.IsType<MessageModel>(model);
        }
    }
}
