/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing MemoriesApi
    /// </summary>
    public sealed class MemoriesApiTests : ApiTestsBase
    {
        private readonly IMemoriesApi _instance;

        public MemoriesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IMemoriesApi>();
        }

        /// <summary>
        /// Test AddMemoryApiV1MemoriesAddPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddMemoryApiV1MemoriesAddPostAsyncTest()
        {
            AddMemoryForm addMemoryForm = default!;
            var response = await _instance.AddMemoryApiV1MemoriesAddPostAsync(addMemoryForm);
            var model = response.Ok();
            Assert.IsType<MemoryModel>(model);
        }

        /// <summary>
        /// Test DeleteMemoryByIdApiV1MemoriesMemoryIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteAsyncTest()
        {
            string memoryId = default!;
            var response = await _instance.DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteAsync(memoryId);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test DeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteAsyncTest()
        {
            var response = await _instance.DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteAsync();
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test GetEmbeddingsApiV1MemoriesEfGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetEmbeddingsApiV1MemoriesEfGetAsyncTest()
        {
            var response = await _instance.GetEmbeddingsApiV1MemoriesEfGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetMemoriesApiV1MemoriesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetMemoriesApiV1MemoriesGetAsyncTest()
        {
            var response = await _instance.GetMemoriesApiV1MemoriesGetAsync();
            var model = response.Ok();
            Assert.IsType<List<MemoryModel>>(model);
        }

        /// <summary>
        /// Test QueryMemoryApiV1MemoriesQueryPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task QueryMemoryApiV1MemoriesQueryPostAsyncTest()
        {
            QueryMemoryForm queryMemoryForm = default!;
            var response = await _instance.QueryMemoryApiV1MemoriesQueryPostAsync(queryMemoryForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test ResetMemoryFromVectorDbApiV1MemoriesResetPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ResetMemoryFromVectorDbApiV1MemoriesResetPostAsyncTest()
        {
            var response = await _instance.ResetMemoryFromVectorDbApiV1MemoriesResetPostAsync();
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostAsyncTest()
        {
            string memoryId = default!;
            MemoryUpdateModel memoryUpdateModel = default!;
            var response = await _instance.UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostAsync(memoryId, memoryUpdateModel);
            var model = response.Ok();
            Assert.IsType<MemoryModel>(model);
        }
    }
}
