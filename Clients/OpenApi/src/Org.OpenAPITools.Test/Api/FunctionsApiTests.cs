/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing FunctionsApi
    /// </summary>
    public sealed class FunctionsApiTests : ApiTestsBase
    {
        private readonly IFunctionsApi _instance;

        public FunctionsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IFunctionsApi>();
        }

        /// <summary>
        /// Test CreateNewFunctionApiV1FunctionsCreatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewFunctionApiV1FunctionsCreatePostAsyncTest()
        {
            FunctionForm functionForm = default!;
            var response = await _instance.CreateNewFunctionApiV1FunctionsCreatePostAsync(functionForm);
            var model = response.Ok();
            Assert.IsType<FunctionResponse>(model);
        }

        /// <summary>
        /// Test DeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test GetFunctionByIdApiV1FunctionsIdIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFunctionByIdApiV1FunctionsIdIdGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFunctionByIdApiV1FunctionsIdIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<FunctionModel>(model);
        }

        /// <summary>
        /// Test GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetFunctionValvesByIdApiV1FunctionsIdIdValvesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetFunctionsApiV1FunctionsExportGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFunctionsApiV1FunctionsExportGetAsyncTest()
        {
            var response = await _instance.GetFunctionsApiV1FunctionsExportGetAsync();
            var model = response.Ok();
            Assert.IsType<List<FunctionModel>>(model);
        }

        /// <summary>
        /// Test GetFunctionsApiV1FunctionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFunctionsApiV1FunctionsGetAsyncTest()
        {
            var response = await _instance.GetFunctionsApiV1FunctionsGetAsync();
            var model = response.Ok();
            Assert.IsType<List<FunctionResponse>>(model);
        }

        /// <summary>
        /// Test LoadFunctionFromUrlApiV1FunctionsLoadUrlPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task LoadFunctionFromUrlApiV1FunctionsLoadUrlPostAsyncTest()
        {
            LoadUrlForm loadUrlForm = default!;
            var response = await _instance.LoadFunctionFromUrlApiV1FunctionsLoadUrlPostAsync(loadUrlForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test SyncFunctionsApiV1FunctionsSyncPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SyncFunctionsApiV1FunctionsSyncPostAsyncTest()
        {
            SyncFunctionsForm syncFunctionsForm = default!;
            var response = await _instance.SyncFunctionsApiV1FunctionsSyncPostAsync(syncFunctionsForm);
            var model = response.Ok();
            Assert.IsType<FunctionModel>(model);
        }

        /// <summary>
        /// Test ToggleFunctionByIdApiV1FunctionsIdIdTogglePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ToggleFunctionByIdApiV1FunctionsIdIdTogglePostAsyncTest()
        {
            string id = default!;
            var response = await _instance.ToggleFunctionByIdApiV1FunctionsIdIdTogglePostAsync(id);
            var model = response.Ok();
            Assert.IsType<FunctionModel>(model);
        }

        /// <summary>
        /// Test ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostAsyncTest()
        {
            string id = default!;
            var response = await _instance.ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostAsync(id);
            var model = response.Ok();
            Assert.IsType<FunctionModel>(model);
        }

        /// <summary>
        /// Test UpdateFunctionByIdApiV1FunctionsIdIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostAsyncTest()
        {
            string id = default!;
            FunctionForm functionForm = default!;
            var response = await _instance.UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostAsync(id, functionForm);
            var model = response.Ok();
            Assert.IsType<FunctionModel>(model);
        }

        /// <summary>
        /// Test UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostAsyncTest()
        {
            string id = default!;
            Object body = default!;
            var response = await _instance.UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostAsync(id, body);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostAsyncTest()
        {
            string id = default!;
            Object body = default!;
            var response = await _instance.UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostAsync(id, body);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
