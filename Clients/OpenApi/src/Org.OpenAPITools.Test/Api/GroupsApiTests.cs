/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing GroupsApi
    /// </summary>
    public sealed class GroupsApiTests : ApiTestsBase
    {
        private readonly IGroupsApi _instance;

        public GroupsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IGroupsApi>();
        }

        /// <summary>
        /// Test CreateNewGroupApiV1GroupsCreatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewGroupApiV1GroupsCreatePostAsyncTest()
        {
            GroupForm groupForm = default!;
            var response = await _instance.CreateNewGroupApiV1GroupsCreatePostAsync(groupForm);
            var model = response.Ok();
            Assert.IsType<GroupResponse>(model);
        }

        /// <summary>
        /// Test DeleteGroupByIdApiV1GroupsIdIdDeleteDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteGroupByIdApiV1GroupsIdIdDeleteDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteGroupByIdApiV1GroupsIdIdDeleteDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test GetGroupByIdApiV1GroupsIdIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupByIdApiV1GroupsIdIdGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetGroupByIdApiV1GroupsIdIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<GroupResponse>(model);
        }

        /// <summary>
        /// Test GetGroupsApiV1GroupsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGroupsApiV1GroupsGetAsyncTest()
        {
            var response = await _instance.GetGroupsApiV1GroupsGetAsync();
            var model = response.Ok();
            Assert.IsType<List<GroupResponse>>(model);
        }

        /// <summary>
        /// Test UpdateGroupByIdApiV1GroupsIdIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateGroupByIdApiV1GroupsIdIdUpdatePostAsyncTest()
        {
            string id = default!;
            GroupUpdateForm groupUpdateForm = default!;
            var response = await _instance.UpdateGroupByIdApiV1GroupsIdIdUpdatePostAsync(id, groupUpdateForm);
            var model = response.Ok();
            Assert.IsType<GroupResponse>(model);
        }
    }
}
