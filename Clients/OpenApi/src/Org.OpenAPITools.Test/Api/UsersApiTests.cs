/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    public sealed class UsersApiTests : ApiTestsBase
    {
        private readonly IUsersApi _instance;

        public UsersApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IUsersApi>();
        }

        /// <summary>
        /// Test DeleteUserByIdApiV1UsersUserIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteUserByIdApiV1UsersUserIdDeleteAsyncTest()
        {
            string userId = default!;
            var response = await _instance.DeleteUserByIdApiV1UsersUserIdDeleteAsync(userId);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test GetActiveUsersApiV1UsersActiveGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetActiveUsersApiV1UsersActiveGetAsyncTest()
        {
            var response = await _instance.GetActiveUsersApiV1UsersActiveGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetAllUsersApiV1UsersAllGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllUsersApiV1UsersAllGetAsyncTest()
        {
            var response = await _instance.GetAllUsersApiV1UsersAllGetAsync();
            var model = response.Ok();
            Assert.IsType<UserListResponse>(model);
        }

        /// <summary>
        /// Test GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetAsyncTest()
        {
            var response = await _instance.GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetAsync();
            var model = response.Ok();
            Assert.IsType<UserPermissions>(model);
        }

        /// <summary>
        /// Test GetUserActiveStatusByIdApiV1UsersUserIdActiveGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserActiveStatusByIdApiV1UsersUserIdActiveGetAsyncTest()
        {
            string userId = default!;
            var response = await _instance.GetUserActiveStatusByIdApiV1UsersUserIdActiveGetAsync(userId);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetUserByIdApiV1UsersUserIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserByIdApiV1UsersUserIdGetAsyncTest()
        {
            string userId = default!;
            var response = await _instance.GetUserByIdApiV1UsersUserIdGetAsync(userId);
            var model = response.Ok();
            Assert.IsType<OpenWebuiRoutersUsersUserResponse>(model);
        }

        /// <summary>
        /// Test GetUserGroupsApiV1UsersGroupsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserGroupsApiV1UsersGroupsGetAsyncTest()
        {
            var response = await _instance.GetUserGroupsApiV1UsersGroupsGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetUserInfoBySessionUserApiV1UsersUserInfoGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserInfoBySessionUserApiV1UsersUserInfoGetAsyncTest()
        {
            var response = await _instance.GetUserInfoBySessionUserApiV1UsersUserInfoGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetUserPermissisionsApiV1UsersPermissionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserPermissisionsApiV1UsersPermissionsGetAsyncTest()
        {
            var response = await _instance.GetUserPermissisionsApiV1UsersPermissionsGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetUserSettingsBySessionUserApiV1UsersUserSettingsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserSettingsBySessionUserApiV1UsersUserSettingsGetAsyncTest()
        {
            var response = await _instance.GetUserSettingsBySessionUserApiV1UsersUserSettingsGetAsync();
            var model = response.Ok();
            Assert.IsType<UserSettings>(model);
        }

        /// <summary>
        /// Test GetUsersApiV1UsersGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUsersApiV1UsersGetAsyncTest()
        {
            Client.Option<string?> query = default!;
            Client.Option<string?> orderBy = default!;
            Client.Option<string?> direction = default!;
            Client.Option<int?> page = default!;
            var response = await _instance.GetUsersApiV1UsersGetAsync(query, orderBy, direction, page);
            var model = response.Ok();
            Assert.IsType<UserListResponse>(model);
        }

        /// <summary>
        /// Test UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostAsyncTest()
        {
            UserPermissions userPermissions = default!;
            var response = await _instance.UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostAsync(userPermissions);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateUserByIdApiV1UsersUserIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateUserByIdApiV1UsersUserIdUpdatePostAsyncTest()
        {
            string userId = default!;
            UserUpdateForm userUpdateForm = default!;
            var response = await _instance.UpdateUserByIdApiV1UsersUserIdUpdatePostAsync(userId, userUpdateForm);
            var model = response.Ok();
            Assert.IsType<UserModel>(model);
        }

        /// <summary>
        /// Test UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostAsyncTest()
        {
            Object body = default!;
            var response = await _instance.UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostAsync(body);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostAsyncTest()
        {
            UserSettings userSettings = default!;
            var response = await _instance.UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostAsync(userSettings);
            var model = response.Ok();
            Assert.IsType<UserSettings>(model);
        }
    }
}
