/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing FilesApi
    /// </summary>
    public sealed class FilesApiTests : ApiTestsBase
    {
        private readonly IFilesApi _instance;

        public FilesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IFilesApi>();
        }

        /// <summary>
        /// Test DeleteAllFilesApiV1FilesAllDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllFilesApiV1FilesAllDeleteAsyncTest()
        {
            var response = await _instance.DeleteAllFilesApiV1FilesAllDeleteAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test DeleteFileByIdApiV1FilesIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteFileByIdApiV1FilesIdDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteFileByIdApiV1FilesIdDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetFileByIdApiV1FilesIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFileByIdApiV1FilesIdGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFileByIdApiV1FilesIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<FileModel>(model);
        }

        /// <summary>
        /// Test GetFileContentByIdApiV1FilesIdContentFileNameGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFileContentByIdApiV1FilesIdContentFileNameGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFileContentByIdApiV1FilesIdContentFileNameGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetFileContentByIdApiV1FilesIdContentGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFileContentByIdApiV1FilesIdContentGetAsyncTest()
        {
            string id = default!;
            Client.Option<bool> attachment = default!;
            var response = await _instance.GetFileContentByIdApiV1FilesIdContentGetAsync(id, attachment);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetFileDataContentByIdApiV1FilesIdDataContentGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetFileDataContentByIdApiV1FilesIdDataContentGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetFileDataContentByIdApiV1FilesIdDataContentGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetHtmlFileContentByIdApiV1FilesIdContentHtmlGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetHtmlFileContentByIdApiV1FilesIdContentHtmlGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetHtmlFileContentByIdApiV1FilesIdContentHtmlGetAsync(id);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test ListFilesApiV1FilesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ListFilesApiV1FilesGetAsyncTest()
        {
            Client.Option<bool> content = default!;
            var response = await _instance.ListFilesApiV1FilesGetAsync(content);
            var model = response.Ok();
            Assert.IsType<List<FileModelResponse>>(model);
        }

        /// <summary>
        /// Test SearchFilesApiV1FilesSearchGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchFilesApiV1FilesSearchGetAsyncTest()
        {
            string filename = default!;
            Client.Option<bool> content = default!;
            var response = await _instance.SearchFilesApiV1FilesSearchGetAsync(filename, content);
            var model = response.Ok();
            Assert.IsType<List<FileModelResponse>>(model);
        }

        /// <summary>
        /// Test UpdateFileDataContentByIdApiV1FilesIdDataContentUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFileDataContentByIdApiV1FilesIdDataContentUpdatePostAsyncTest()
        {
            string id = default!;
            ContentForm contentForm = default!;
            var response = await _instance.UpdateFileDataContentByIdApiV1FilesIdDataContentUpdatePostAsync(id, contentForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UploadFileApiV1FilesPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UploadFileApiV1FilesPostAsyncTest()
        {
            System.IO.Stream file = default!;
            Client.Option<bool> process = default!;
            Client.Option<bool> varInternal = default!;
            Client.Option<Metadata?> metadata = default!;
            var response = await _instance.UploadFileApiV1FilesPostAsync(file, process, varInternal, metadata);
            var model = response.Ok();
            Assert.IsType<FileModelResponse>(model);
        }
    }
}
