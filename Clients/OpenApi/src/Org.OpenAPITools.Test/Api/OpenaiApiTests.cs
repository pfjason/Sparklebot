/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing OpenaiApi
    /// </summary>
    public sealed class OpenaiApiTests : ApiTestsBase
    {
        private readonly IOpenaiApi _instance;

        public OpenaiApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IOpenaiApi>();
        }

        /// <summary>
        /// Test GenerateChatCompletionOpenaiChatCompletionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenerateChatCompletionOpenaiChatCompletionsPostAsyncTest()
        {
            Object body = default!;
            Client.Option<bool?> bypassFilter = default!;
            var response = await _instance.GenerateChatCompletionOpenaiChatCompletionsPostAsync(body, bypassFilter);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetConfigOpenaiConfigGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConfigOpenaiConfigGetAsyncTest()
        {
            var response = await _instance.GetConfigOpenaiConfigGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetModelsOpenaiModelsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetModelsOpenaiModelsGetAsyncTest()
        {
            Client.Option<int?> urlIdx = default!;
            var response = await _instance.GetModelsOpenaiModelsGetAsync(urlIdx);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetModelsOpenaiModelsUrlIdxGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetModelsOpenaiModelsUrlIdxGetAsyncTest()
        {
            int? urlIdx = default!;
            var response = await _instance.GetModelsOpenaiModelsUrlIdxGetAsync(urlIdx);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test ProxyOpenaiPathDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ProxyOpenaiPathDeleteAsyncTest()
        {
            string path = default!;
            var response = await _instance.ProxyOpenaiPathDeleteAsync(path);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test ProxyOpenaiPathDelete_0
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ProxyOpenaiPathDelete_0AsyncTest()
        {
            string path = default!;
            var response = await _instance.ProxyOpenaiPathDelete_0Async(path);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test ProxyOpenaiPathDelete_1
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ProxyOpenaiPathDelete_1AsyncTest()
        {
            string path = default!;
            var response = await _instance.ProxyOpenaiPathDelete_1Async(path);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test ProxyOpenaiPathDelete_2
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ProxyOpenaiPathDelete_2AsyncTest()
        {
            string path = default!;
            var response = await _instance.ProxyOpenaiPathDelete_2Async(path);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test SpeechOpenaiAudioSpeechPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SpeechOpenaiAudioSpeechPostAsyncTest()
        {
            var response = await _instance.SpeechOpenaiAudioSpeechPostAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateConfigOpenaiConfigUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateConfigOpenaiConfigUpdatePostAsyncTest()
        {
            OpenWebuiRoutersOpenaiOpenAIConfigForm openWebuiRoutersOpenaiOpenAIConfigForm = default!;
            var response = await _instance.UpdateConfigOpenaiConfigUpdatePostAsync(openWebuiRoutersOpenaiOpenAIConfigForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test VerifyConnectionOpenaiVerifyPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifyConnectionOpenaiVerifyPostAsyncTest()
        {
            OpenWebuiRoutersOpenaiConnectionVerificationForm openWebuiRoutersOpenaiConnectionVerificationForm = default!;
            var response = await _instance.VerifyConnectionOpenaiVerifyPostAsync(openWebuiRoutersOpenaiConnectionVerificationForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
