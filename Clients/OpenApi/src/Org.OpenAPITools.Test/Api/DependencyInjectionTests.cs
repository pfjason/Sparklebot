/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Extensions;
using Xunit;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var audioApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAudioApi>();
            Assert.True(audioApi.HttpClient.BaseAddress != null);

            var authsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IAuthsApi>();
            Assert.True(authsApi.HttpClient.BaseAddress != null);

            var channelsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IChannelsApi>();
            Assert.True(channelsApi.HttpClient.BaseAddress != null);

            var chatsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IChatsApi>();
            Assert.True(chatsApi.HttpClient.BaseAddress != null);

            var configsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IConfigsApi>();
            Assert.True(configsApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var evaluationsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEvaluationsApi>();
            Assert.True(evaluationsApi.HttpClient.BaseAddress != null);

            var filesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFilesApi>();
            Assert.True(filesApi.HttpClient.BaseAddress != null);

            var foldersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);

            var functionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IFunctionsApi>();
            Assert.True(functionsApi.HttpClient.BaseAddress != null);

            var groupsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IGroupsApi>();
            Assert.True(groupsApi.HttpClient.BaseAddress != null);

            var imagesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IImagesApi>();
            Assert.True(imagesApi.HttpClient.BaseAddress != null);

            var knowledgeApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IKnowledgeApi>();
            Assert.True(knowledgeApi.HttpClient.BaseAddress != null);

            var memoriesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IMemoriesApi>();
            Assert.True(memoriesApi.HttpClient.BaseAddress != null);

            var modelsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IModelsApi>();
            Assert.True(modelsApi.HttpClient.BaseAddress != null);

            var notesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<INotesApi>();
            Assert.True(notesApi.HttpClient.BaseAddress != null);

            var ollamaApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOllamaApi>();
            Assert.True(ollamaApi.HttpClient.BaseAddress != null);

            var openaiApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IOpenaiApi>();
            Assert.True(openaiApi.HttpClient.BaseAddress != null);

            var pipelinesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPipelinesApi>();
            Assert.True(pipelinesApi.HttpClient.BaseAddress != null);

            var promptsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPromptsApi>();
            Assert.True(promptsApi.HttpClient.BaseAddress != null);

            var retrievalApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IRetrievalApi>();
            Assert.True(retrievalApi.HttpClient.BaseAddress != null);

            var tasksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITasksApi>();
            Assert.True(tasksApi.HttpClient.BaseAddress != null);

            var toolsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IToolsApi>();
            Assert.True(toolsApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var utilsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUtilsApi>();
            Assert.True(utilsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var audioApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAudioApi>();
            Assert.True(audioApi.HttpClient.BaseAddress != null);

            var authsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IAuthsApi>();
            Assert.True(authsApi.HttpClient.BaseAddress != null);

            var channelsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IChannelsApi>();
            Assert.True(channelsApi.HttpClient.BaseAddress != null);

            var chatsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IChatsApi>();
            Assert.True(chatsApi.HttpClient.BaseAddress != null);

            var configsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IConfigsApi>();
            Assert.True(configsApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var evaluationsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEvaluationsApi>();
            Assert.True(evaluationsApi.HttpClient.BaseAddress != null);

            var filesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFilesApi>();
            Assert.True(filesApi.HttpClient.BaseAddress != null);

            var foldersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);

            var functionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IFunctionsApi>();
            Assert.True(functionsApi.HttpClient.BaseAddress != null);

            var groupsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IGroupsApi>();
            Assert.True(groupsApi.HttpClient.BaseAddress != null);

            var imagesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IImagesApi>();
            Assert.True(imagesApi.HttpClient.BaseAddress != null);

            var knowledgeApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IKnowledgeApi>();
            Assert.True(knowledgeApi.HttpClient.BaseAddress != null);

            var memoriesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IMemoriesApi>();
            Assert.True(memoriesApi.HttpClient.BaseAddress != null);

            var modelsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IModelsApi>();
            Assert.True(modelsApi.HttpClient.BaseAddress != null);

            var notesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<INotesApi>();
            Assert.True(notesApi.HttpClient.BaseAddress != null);

            var ollamaApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOllamaApi>();
            Assert.True(ollamaApi.HttpClient.BaseAddress != null);

            var openaiApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IOpenaiApi>();
            Assert.True(openaiApi.HttpClient.BaseAddress != null);

            var pipelinesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPipelinesApi>();
            Assert.True(pipelinesApi.HttpClient.BaseAddress != null);

            var promptsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPromptsApi>();
            Assert.True(promptsApi.HttpClient.BaseAddress != null);

            var retrievalApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IRetrievalApi>();
            Assert.True(retrievalApi.HttpClient.BaseAddress != null);

            var tasksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITasksApi>();
            Assert.True(tasksApi.HttpClient.BaseAddress != null);

            var toolsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IToolsApi>();
            Assert.True(toolsApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var utilsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUtilsApi>();
            Assert.True(utilsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var audioApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAudioApi>();
            Assert.True(audioApi.HttpClient.BaseAddress != null);
            
            var authsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IAuthsApi>();
            Assert.True(authsApi.HttpClient.BaseAddress != null);
            
            var channelsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IChannelsApi>();
            Assert.True(channelsApi.HttpClient.BaseAddress != null);
            
            var chatsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IChatsApi>();
            Assert.True(chatsApi.HttpClient.BaseAddress != null);
            
            var configsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IConfigsApi>();
            Assert.True(configsApi.HttpClient.BaseAddress != null);
            
            var defaultApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);
            
            var evaluationsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEvaluationsApi>();
            Assert.True(evaluationsApi.HttpClient.BaseAddress != null);
            
            var filesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFilesApi>();
            Assert.True(filesApi.HttpClient.BaseAddress != null);
            
            var foldersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);
            
            var functionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IFunctionsApi>();
            Assert.True(functionsApi.HttpClient.BaseAddress != null);
            
            var groupsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IGroupsApi>();
            Assert.True(groupsApi.HttpClient.BaseAddress != null);
            
            var imagesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IImagesApi>();
            Assert.True(imagesApi.HttpClient.BaseAddress != null);
            
            var knowledgeApi = _hostUsingAddWithAClient.Services.GetRequiredService<IKnowledgeApi>();
            Assert.True(knowledgeApi.HttpClient.BaseAddress != null);
            
            var memoriesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IMemoriesApi>();
            Assert.True(memoriesApi.HttpClient.BaseAddress != null);
            
            var modelsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IModelsApi>();
            Assert.True(modelsApi.HttpClient.BaseAddress != null);
            
            var notesApi = _hostUsingAddWithAClient.Services.GetRequiredService<INotesApi>();
            Assert.True(notesApi.HttpClient.BaseAddress != null);
            
            var ollamaApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOllamaApi>();
            Assert.True(ollamaApi.HttpClient.BaseAddress != null);
            
            var openaiApi = _hostUsingAddWithAClient.Services.GetRequiredService<IOpenaiApi>();
            Assert.True(openaiApi.HttpClient.BaseAddress != null);
            
            var pipelinesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPipelinesApi>();
            Assert.True(pipelinesApi.HttpClient.BaseAddress != null);
            
            var promptsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPromptsApi>();
            Assert.True(promptsApi.HttpClient.BaseAddress != null);
            
            var retrievalApi = _hostUsingAddWithAClient.Services.GetRequiredService<IRetrievalApi>();
            Assert.True(retrievalApi.HttpClient.BaseAddress != null);
            
            var tasksApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITasksApi>();
            Assert.True(tasksApi.HttpClient.BaseAddress != null);
            
            var toolsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IToolsApi>();
            Assert.True(toolsApi.HttpClient.BaseAddress != null);
            
            var usersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);
            
            var utilsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUtilsApi>();
            Assert.True(utilsApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var audioApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAudioApi>();
            Assert.True(audioApi.HttpClient.BaseAddress != null);

            var authsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IAuthsApi>();
            Assert.True(authsApi.HttpClient.BaseAddress != null);

            var channelsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IChannelsApi>();
            Assert.True(channelsApi.HttpClient.BaseAddress != null);

            var chatsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IChatsApi>();
            Assert.True(chatsApi.HttpClient.BaseAddress != null);

            var configsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IConfigsApi>();
            Assert.True(configsApi.HttpClient.BaseAddress != null);

            var defaultApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDefaultApi>();
            Assert.True(defaultApi.HttpClient.BaseAddress != null);

            var evaluationsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEvaluationsApi>();
            Assert.True(evaluationsApi.HttpClient.BaseAddress != null);

            var filesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFilesApi>();
            Assert.True(filesApi.HttpClient.BaseAddress != null);

            var foldersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);

            var functionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IFunctionsApi>();
            Assert.True(functionsApi.HttpClient.BaseAddress != null);

            var groupsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IGroupsApi>();
            Assert.True(groupsApi.HttpClient.BaseAddress != null);

            var imagesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IImagesApi>();
            Assert.True(imagesApi.HttpClient.BaseAddress != null);

            var knowledgeApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IKnowledgeApi>();
            Assert.True(knowledgeApi.HttpClient.BaseAddress != null);

            var memoriesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IMemoriesApi>();
            Assert.True(memoriesApi.HttpClient.BaseAddress != null);

            var modelsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IModelsApi>();
            Assert.True(modelsApi.HttpClient.BaseAddress != null);

            var notesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<INotesApi>();
            Assert.True(notesApi.HttpClient.BaseAddress != null);

            var ollamaApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOllamaApi>();
            Assert.True(ollamaApi.HttpClient.BaseAddress != null);

            var openaiApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IOpenaiApi>();
            Assert.True(openaiApi.HttpClient.BaseAddress != null);

            var pipelinesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPipelinesApi>();
            Assert.True(pipelinesApi.HttpClient.BaseAddress != null);

            var promptsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPromptsApi>();
            Assert.True(promptsApi.HttpClient.BaseAddress != null);

            var retrievalApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IRetrievalApi>();
            Assert.True(retrievalApi.HttpClient.BaseAddress != null);

            var tasksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITasksApi>();
            Assert.True(tasksApi.HttpClient.BaseAddress != null);

            var toolsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IToolsApi>();
            Assert.True(toolsApi.HttpClient.BaseAddress != null);

            var usersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUsersApi>();
            Assert.True(usersApi.HttpClient.BaseAddress != null);

            var utilsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUtilsApi>();
            Assert.True(utilsApi.HttpClient.BaseAddress != null);
        }
    }
}
