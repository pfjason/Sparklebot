/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ChatsApi
    /// </summary>
    public sealed class ChatsApiTests : ApiTestsBase
    {
        private readonly IChatsApi _instance;

        public ChatsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IChatsApi>();
        }

        /// <summary>
        /// Test AddTagByIdAndTagNameApiV1ChatsIdTagsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddTagByIdAndTagNameApiV1ChatsIdTagsPostAsyncTest()
        {
            string id = default!;
            TagForm tagForm = default!;
            var response = await _instance.AddTagByIdAndTagNameApiV1ChatsIdTagsPostAsync(id, tagForm);
            var model = response.Ok();
            Assert.IsType<List<TagModel>>(model);
        }

        /// <summary>
        /// Test ArchiveAllChatsApiV1ChatsArchiveAllPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ArchiveAllChatsApiV1ChatsArchiveAllPostAsyncTest()
        {
            var response = await _instance.ArchiveAllChatsApiV1ChatsArchiveAllPostAsync();
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test ArchiveChatByIdApiV1ChatsIdArchivePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ArchiveChatByIdApiV1ChatsIdArchivePostAsyncTest()
        {
            string id = default!;
            var response = await _instance.ArchiveChatByIdApiV1ChatsIdArchivePostAsync(id);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test CloneChatByIdApiV1ChatsIdClonePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CloneChatByIdApiV1ChatsIdClonePostAsyncTest()
        {
            string id = default!;
            CloneForm cloneForm = default!;
            var response = await _instance.CloneChatByIdApiV1ChatsIdClonePostAsync(id, cloneForm);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test CloneSharedChatByIdApiV1ChatsIdCloneSharedPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CloneSharedChatByIdApiV1ChatsIdCloneSharedPostAsyncTest()
        {
            string id = default!;
            var response = await _instance.CloneSharedChatByIdApiV1ChatsIdCloneSharedPostAsync(id);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test CreateNewChatApiV1ChatsNewPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewChatApiV1ChatsNewPostAsyncTest()
        {
            ChatForm chatForm = default!;
            var response = await _instance.CreateNewChatApiV1ChatsNewPostAsync(chatForm);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test DeleteAllTagsByIdApiV1ChatsIdTagsAllDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test DeleteAllUserChatsApiV1ChatsDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllUserChatsApiV1ChatsDeleteAsyncTest()
        {
            var response = await _instance.DeleteAllUserChatsApiV1ChatsDeleteAsync();
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test DeleteChatByIdApiV1ChatsIdDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteChatByIdApiV1ChatsIdDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteChatByIdApiV1ChatsIdDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test DeleteSharedChatByIdApiV1ChatsIdShareDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteSharedChatByIdApiV1ChatsIdShareDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteSharedChatByIdApiV1ChatsIdShareDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test DeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteAsyncTest()
        {
            string id = default!;
            TagForm tagForm = default!;
            var response = await _instance.DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteAsync(id, tagForm);
            var model = response.Ok();
            Assert.IsType<List<TagModel>>(model);
        }

        /// <summary>
        /// Test GetAllUserChatsInDbApiV1ChatsAllDbGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllUserChatsInDbApiV1ChatsAllDbGetAsyncTest()
        {
            var response = await _instance.GetAllUserChatsInDbApiV1ChatsAllDbGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ChatResponse>>(model);
        }

        /// <summary>
        /// Test GetAllUserTagsApiV1ChatsAllTagsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAllUserTagsApiV1ChatsAllTagsGetAsyncTest()
        {
            var response = await _instance.GetAllUserTagsApiV1ChatsAllTagsGetAsync();
            var model = response.Ok();
            Assert.IsType<List<TagModel>>(model);
        }

        /// <summary>
        /// Test GetArchivedSessionUserChatListApiV1ChatsArchivedGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetArchivedSessionUserChatListApiV1ChatsArchivedGetAsyncTest()
        {
            Client.Option<int?> page = default!;
            Client.Option<string?> query = default!;
            Client.Option<string?> orderBy = default!;
            Client.Option<string?> direction = default!;
            var response = await _instance.GetArchivedSessionUserChatListApiV1ChatsArchivedGetAsync(page, query, orderBy, direction);
            var model = response.Ok();
            Assert.IsType<List<ChatTitleIdResponse>>(model);
        }

        /// <summary>
        /// Test GetChatByIdApiV1ChatsIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChatByIdApiV1ChatsIdGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetChatByIdApiV1ChatsIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test GetChatTagsByIdApiV1ChatsIdTagsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChatTagsByIdApiV1ChatsIdTagsGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetChatTagsByIdApiV1ChatsIdTagsGetAsync(id);
            var model = response.Ok();
            Assert.IsType<List<TagModel>>(model);
        }

        /// <summary>
        /// Test GetChatsByFolderIdApiV1ChatsFolderFolderIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetChatsByFolderIdApiV1ChatsFolderFolderIdGetAsyncTest()
        {
            string folderId = default!;
            var response = await _instance.GetChatsByFolderIdApiV1ChatsFolderFolderIdGetAsync(folderId);
            var model = response.Ok();
            Assert.IsType<List<ChatResponse>>(model);
        }

        /// <summary>
        /// Test GetPinnedStatusByIdApiV1ChatsIdPinnedGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPinnedStatusByIdApiV1ChatsIdPinnedGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetPinnedStatusByIdApiV1ChatsIdPinnedGetAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test GetSessionUserChatListApiV1ChatsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSessionUserChatListApiV1ChatsGetAsyncTest()
        {
            Client.Option<int?> page = default!;
            var response = await _instance.GetSessionUserChatListApiV1ChatsGetAsync(page);
            var model = response.Ok();
            Assert.IsType<List<ChatTitleIdResponse>>(model);
        }

        /// <summary>
        /// Test GetSessionUserChatListApiV1ChatsListGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSessionUserChatListApiV1ChatsListGetAsyncTest()
        {
            Client.Option<int?> page = default!;
            var response = await _instance.GetSessionUserChatListApiV1ChatsListGetAsync(page);
            var model = response.Ok();
            Assert.IsType<List<ChatTitleIdResponse>>(model);
        }

        /// <summary>
        /// Test GetSharedChatByIdApiV1ChatsShareShareIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSharedChatByIdApiV1ChatsShareShareIdGetAsyncTest()
        {
            string shareId = default!;
            var response = await _instance.GetSharedChatByIdApiV1ChatsShareShareIdGetAsync(shareId);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test GetUserArchivedChatsApiV1ChatsAllArchivedGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserArchivedChatsApiV1ChatsAllArchivedGetAsyncTest()
        {
            var response = await _instance.GetUserArchivedChatsApiV1ChatsAllArchivedGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ChatResponse>>(model);
        }

        /// <summary>
        /// Test GetUserChatListByTagNameApiV1ChatsTagsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserChatListByTagNameApiV1ChatsTagsPostAsyncTest()
        {
            TagFilterForm tagFilterForm = default!;
            var response = await _instance.GetUserChatListByTagNameApiV1ChatsTagsPostAsync(tagFilterForm);
            var model = response.Ok();
            Assert.IsType<List<ChatTitleIdResponse>>(model);
        }

        /// <summary>
        /// Test GetUserChatListByUserIdApiV1ChatsListUserUserIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserChatListByUserIdApiV1ChatsListUserUserIdGetAsyncTest()
        {
            string userId = default!;
            Client.Option<int?> page = default!;
            Client.Option<string?> query = default!;
            Client.Option<string?> orderBy = default!;
            Client.Option<string?> direction = default!;
            var response = await _instance.GetUserChatListByUserIdApiV1ChatsListUserUserIdGetAsync(userId, page, query, orderBy, direction);
            var model = response.Ok();
            Assert.IsType<List<ChatTitleIdResponse>>(model);
        }

        /// <summary>
        /// Test GetUserChatsApiV1ChatsAllGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserChatsApiV1ChatsAllGetAsyncTest()
        {
            var response = await _instance.GetUserChatsApiV1ChatsAllGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ChatResponse>>(model);
        }

        /// <summary>
        /// Test GetUserPinnedChatsApiV1ChatsPinnedGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserPinnedChatsApiV1ChatsPinnedGetAsyncTest()
        {
            var response = await _instance.GetUserPinnedChatsApiV1ChatsPinnedGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ChatTitleIdResponse>>(model);
        }

        /// <summary>
        /// Test ImportChatApiV1ChatsImportPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImportChatApiV1ChatsImportPostAsyncTest()
        {
            ChatImportForm chatImportForm = default!;
            var response = await _instance.ImportChatApiV1ChatsImportPostAsync(chatImportForm);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test PinChatByIdApiV1ChatsIdPinPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PinChatByIdApiV1ChatsIdPinPostAsyncTest()
        {
            string id = default!;
            var response = await _instance.PinChatByIdApiV1ChatsIdPinPostAsync(id);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test SearchUserChatsApiV1ChatsSearchGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchUserChatsApiV1ChatsSearchGetAsyncTest()
        {
            string text = default!;
            Client.Option<int?> page = default!;
            var response = await _instance.SearchUserChatsApiV1ChatsSearchGetAsync(text, page);
            var model = response.Ok();
            Assert.IsType<List<ChatTitleIdResponse>>(model);
        }

        /// <summary>
        /// Test SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostAsyncTest()
        {
            string id = default!;
            string messageId = default!;
            EventForm eventForm = default!;
            var response = await _instance.SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostAsync(id, messageId, eventForm);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test ShareChatByIdApiV1ChatsIdSharePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ShareChatByIdApiV1ChatsIdSharePostAsyncTest()
        {
            string id = default!;
            var response = await _instance.ShareChatByIdApiV1ChatsIdSharePostAsync(id);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test UpdateChatByIdApiV1ChatsIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateChatByIdApiV1ChatsIdPostAsyncTest()
        {
            string id = default!;
            ChatForm chatForm = default!;
            var response = await _instance.UpdateChatByIdApiV1ChatsIdPostAsync(id, chatForm);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test UpdateChatFolderIdByIdApiV1ChatsIdFolderPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateChatFolderIdByIdApiV1ChatsIdFolderPostAsyncTest()
        {
            string id = default!;
            ChatFolderIdForm chatFolderIdForm = default!;
            var response = await _instance.UpdateChatFolderIdByIdApiV1ChatsIdFolderPostAsync(id, chatFolderIdForm);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }

        /// <summary>
        /// Test UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostAsyncTest()
        {
            string id = default!;
            string messageId = default!;
            OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm = default!;
            var response = await _instance.UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostAsync(id, messageId, openWebuiRoutersChatsMessageForm);
            var model = response.Ok();
            Assert.IsType<ChatResponse>(model);
        }
    }
}
