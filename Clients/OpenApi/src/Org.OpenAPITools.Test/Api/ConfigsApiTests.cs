/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ConfigsApi
    /// </summary>
    public sealed class ConfigsApiTests : ApiTestsBase
    {
        private readonly IConfigsApi _instance;

        public ConfigsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IConfigsApi>();
        }

        /// <summary>
        /// Test ExportConfigApiV1ConfigsExportGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExportConfigApiV1ConfigsExportGetAsyncTest()
        {
            var response = await _instance.ExportConfigApiV1ConfigsExportGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetBannersApiV1ConfigsBannersGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBannersApiV1ConfigsBannersGetAsyncTest()
        {
            var response = await _instance.GetBannersApiV1ConfigsBannersGetAsync();
            var model = response.Ok();
            Assert.IsType<List<BannerModel>>(model);
        }

        /// <summary>
        /// Test GetCodeExecutionConfigApiV1ConfigsCodeExecutionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetAsyncTest()
        {
            var response = await _instance.GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetAsync();
            var model = response.Ok();
            Assert.IsType<CodeInterpreterConfigForm>(model);
        }

        /// <summary>
        /// Test GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetAsyncTest()
        {
            var response = await _instance.GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetAsync();
            var model = response.Ok();
            Assert.IsType<DirectConnectionsConfigForm>(model);
        }

        /// <summary>
        /// Test GetModelsConfigApiV1ConfigsModelsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetModelsConfigApiV1ConfigsModelsGetAsyncTest()
        {
            var response = await _instance.GetModelsConfigApiV1ConfigsModelsGetAsync();
            var model = response.Ok();
            Assert.IsType<ModelsConfigForm>(model);
        }

        /// <summary>
        /// Test GetToolServersConfigApiV1ConfigsToolServersGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetToolServersConfigApiV1ConfigsToolServersGetAsyncTest()
        {
            var response = await _instance.GetToolServersConfigApiV1ConfigsToolServersGetAsync();
            var model = response.Ok();
            Assert.IsType<ToolServersConfigForm>(model);
        }

        /// <summary>
        /// Test ImportConfigApiV1ConfigsImportPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImportConfigApiV1ConfigsImportPostAsyncTest()
        {
            ImportConfigForm importConfigForm = default!;
            var response = await _instance.ImportConfigApiV1ConfigsImportPostAsync(importConfigForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test SetBannersApiV1ConfigsBannersPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetBannersApiV1ConfigsBannersPostAsyncTest()
        {
            SetBannersForm setBannersForm = default!;
            var response = await _instance.SetBannersApiV1ConfigsBannersPostAsync(setBannersForm);
            var model = response.Ok();
            Assert.IsType<List<BannerModel>>(model);
        }

        /// <summary>
        /// Test SetCodeExecutionConfigApiV1ConfigsCodeExecutionPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostAsyncTest()
        {
            CodeInterpreterConfigForm codeInterpreterConfigForm = default!;
            var response = await _instance.SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostAsync(codeInterpreterConfigForm);
            var model = response.Ok();
            Assert.IsType<CodeInterpreterConfigForm>(model);
        }

        /// <summary>
        /// Test SetDefaultSuggestionsApiV1ConfigsSuggestionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetDefaultSuggestionsApiV1ConfigsSuggestionsPostAsyncTest()
        {
            SetDefaultSuggestionsForm setDefaultSuggestionsForm = default!;
            var response = await _instance.SetDefaultSuggestionsApiV1ConfigsSuggestionsPostAsync(setDefaultSuggestionsForm);
            var model = response.Ok();
            Assert.IsType<List<PromptSuggestion>>(model);
        }

        /// <summary>
        /// Test SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostAsyncTest()
        {
            DirectConnectionsConfigForm directConnectionsConfigForm = default!;
            var response = await _instance.SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostAsync(directConnectionsConfigForm);
            var model = response.Ok();
            Assert.IsType<DirectConnectionsConfigForm>(model);
        }

        /// <summary>
        /// Test SetModelsConfigApiV1ConfigsModelsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetModelsConfigApiV1ConfigsModelsPostAsyncTest()
        {
            ModelsConfigForm modelsConfigForm = default!;
            var response = await _instance.SetModelsConfigApiV1ConfigsModelsPostAsync(modelsConfigForm);
            var model = response.Ok();
            Assert.IsType<ModelsConfigForm>(model);
        }

        /// <summary>
        /// Test SetToolServersConfigApiV1ConfigsToolServersPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetToolServersConfigApiV1ConfigsToolServersPostAsyncTest()
        {
            ToolServersConfigForm toolServersConfigForm = default!;
            var response = await _instance.SetToolServersConfigApiV1ConfigsToolServersPostAsync(toolServersConfigForm);
            var model = response.Ok();
            Assert.IsType<ToolServersConfigForm>(model);
        }

        /// <summary>
        /// Test VerifyToolServersConfigApiV1ConfigsToolServersVerifyPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostAsyncTest()
        {
            ToolServerConnection toolServerConnection = default!;
            var response = await _instance.VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostAsync(toolServerConnection);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
