/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ModelsApi
    /// </summary>
    public sealed class ModelsApiTests : ApiTestsBase
    {
        private readonly IModelsApi _instance;

        public ModelsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IModelsApi>();
        }

        /// <summary>
        /// Test CreateNewModelApiV1ModelsCreatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewModelApiV1ModelsCreatePostAsyncTest()
        {
            ModelForm modelForm = default!;
            var response = await _instance.CreateNewModelApiV1ModelsCreatePostAsync(modelForm);
            var model = response.Ok();
            Assert.IsType<ModelModel>(model);
        }

        /// <summary>
        /// Test DeleteAllModelsApiV1ModelsDeleteAllDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteAllModelsApiV1ModelsDeleteAllDeleteAsyncTest()
        {
            var response = await _instance.DeleteAllModelsApiV1ModelsDeleteAllDeleteAsync();
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test DeleteModelByIdApiV1ModelsModelDeleteDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteModelByIdApiV1ModelsModelDeleteDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteModelByIdApiV1ModelsModelDeleteDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test GetBaseModelsApiV1ModelsBaseGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetBaseModelsApiV1ModelsBaseGetAsyncTest()
        {
            var response = await _instance.GetBaseModelsApiV1ModelsBaseGetAsync();
            var model = response.Ok();
            Assert.IsType<List<ModelResponse>>(model);
        }

        /// <summary>
        /// Test GetModelByIdApiV1ModelsModelGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetModelByIdApiV1ModelsModelGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetModelByIdApiV1ModelsModelGetAsync(id);
            var model = response.Ok();
            Assert.IsType<ModelResponse>(model);
        }

        /// <summary>
        /// Test GetModelsApiV1ModelsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetModelsApiV1ModelsGetAsyncTest()
        {
            Client.Option<string?> id = default!;
            var response = await _instance.GetModelsApiV1ModelsGetAsync(id);
            var model = response.Ok();
            Assert.IsType<List<ModelUserResponse>>(model);
        }

        /// <summary>
        /// Test ToggleModelByIdApiV1ModelsModelTogglePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ToggleModelByIdApiV1ModelsModelTogglePostAsyncTest()
        {
            string id = default!;
            var response = await _instance.ToggleModelByIdApiV1ModelsModelTogglePostAsync(id);
            var model = response.Ok();
            Assert.IsType<ModelResponse>(model);
        }

        /// <summary>
        /// Test UpdateModelByIdApiV1ModelsModelUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateModelByIdApiV1ModelsModelUpdatePostAsyncTest()
        {
            string id = default!;
            ModelForm modelForm = default!;
            var response = await _instance.UpdateModelByIdApiV1ModelsModelUpdatePostAsync(id, modelForm);
            var model = response.Ok();
            Assert.IsType<ModelModel>(model);
        }
    }
}
