/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UtilsApi
    /// </summary>
    public sealed class UtilsApiTests : ApiTestsBase
    {
        private readonly IUtilsApi _instance;

        public UtilsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IUtilsApi>();
        }

        /// <summary>
        /// Test DownloadChatAsPdfApiV1UtilsPdfPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadChatAsPdfApiV1UtilsPdfPostAsyncTest()
        {
            ChatTitleMessagesForm chatTitleMessagesForm = default!;
            var response = await _instance.DownloadChatAsPdfApiV1UtilsPdfPostAsync(chatTitleMessagesForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test DownloadDbApiV1UtilsDbDownloadGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadDbApiV1UtilsDbDownloadGetAsyncTest()
        {
            var response = await _instance.DownloadDbApiV1UtilsDbDownloadGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetAsyncTest()
        {
            var response = await _instance.DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test ExecuteCodeApiV1UtilsCodeExecutePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExecuteCodeApiV1UtilsCodeExecutePostAsyncTest()
        {
            CodeForm codeForm = default!;
            var response = await _instance.ExecuteCodeApiV1UtilsCodeExecutePostAsync(codeForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test FormatCodeApiV1UtilsCodeFormatPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task FormatCodeApiV1UtilsCodeFormatPostAsyncTest()
        {
            CodeForm codeForm = default!;
            var response = await _instance.FormatCodeApiV1UtilsCodeFormatPostAsync(codeForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetGravatarApiV1UtilsGravatarGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetGravatarApiV1UtilsGravatarGetAsyncTest()
        {
            string email = default!;
            var response = await _instance.GetGravatarApiV1UtilsGravatarGetAsync(email);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetHtmlFromMarkdownApiV1UtilsMarkdownPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetHtmlFromMarkdownApiV1UtilsMarkdownPostAsyncTest()
        {
            MarkdownForm markdownForm = default!;
            var response = await _instance.GetHtmlFromMarkdownApiV1UtilsMarkdownPostAsync(markdownForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
