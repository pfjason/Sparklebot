/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing KnowledgeApi
    /// </summary>
    public sealed class KnowledgeApiTests : ApiTestsBase
    {
        private readonly IKnowledgeApi _instance;

        public KnowledgeApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IKnowledgeApi>();
        }

        /// <summary>
        /// Test AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostAsyncTest()
        {
            string id = default!;
            KnowledgeFileIdForm knowledgeFileIdForm = default!;
            var response = await _instance.AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostAsync(id, knowledgeFileIdForm);
            var model = response.Ok();
            Assert.IsType<KnowledgeFilesResponse>(model);
        }

        /// <summary>
        /// Test AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostAsyncTest()
        {
            string id = default!;
            List<KnowledgeFileIdForm> knowledgeFileIdForm = default!;
            var response = await _instance.AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostAsync(id, knowledgeFileIdForm);
            var model = response.Ok();
            Assert.IsType<KnowledgeFilesResponse>(model);
        }

        /// <summary>
        /// Test CreateNewKnowledgeApiV1KnowledgeCreatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CreateNewKnowledgeApiV1KnowledgeCreatePostAsyncTest()
        {
            KnowledgeForm knowledgeForm = default!;
            var response = await _instance.CreateNewKnowledgeApiV1KnowledgeCreatePostAsync(knowledgeForm);
            var model = response.Ok();
            Assert.IsType<KnowledgeResponse>(model);
        }

        /// <summary>
        /// Test DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteAsyncTest()
        {
            string id = default!;
            var response = await _instance.DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteAsync(id);
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test GetKnowledgeApiV1KnowledgeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetKnowledgeApiV1KnowledgeGetAsyncTest()
        {
            var response = await _instance.GetKnowledgeApiV1KnowledgeGetAsync();
            var model = response.Ok();
            Assert.IsType<List<KnowledgeUserResponse>>(model);
        }

        /// <summary>
        /// Test GetKnowledgeByIdApiV1KnowledgeIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetKnowledgeByIdApiV1KnowledgeIdGetAsyncTest()
        {
            string id = default!;
            var response = await _instance.GetKnowledgeByIdApiV1KnowledgeIdGetAsync(id);
            var model = response.Ok();
            Assert.IsType<KnowledgeFilesResponse>(model);
        }

        /// <summary>
        /// Test GetKnowledgeListApiV1KnowledgeListGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetKnowledgeListApiV1KnowledgeListGetAsyncTest()
        {
            var response = await _instance.GetKnowledgeListApiV1KnowledgeListGetAsync();
            var model = response.Ok();
            Assert.IsType<List<KnowledgeUserResponse>>(model);
        }

        /// <summary>
        /// Test ReindexKnowledgeFilesApiV1KnowledgeReindexPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ReindexKnowledgeFilesApiV1KnowledgeReindexPostAsyncTest()
        {
            var response = await _instance.ReindexKnowledgeFilesApiV1KnowledgeReindexPostAsync();
            var model = response.Ok();
            Assert.IsType<bool>(model);
        }

        /// <summary>
        /// Test RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostAsyncTest()
        {
            string id = default!;
            KnowledgeFileIdForm knowledgeFileIdForm = default!;
            var response = await _instance.RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostAsync(id, knowledgeFileIdForm);
            var model = response.Ok();
            Assert.IsType<KnowledgeFilesResponse>(model);
        }

        /// <summary>
        /// Test ResetKnowledgeByIdApiV1KnowledgeIdResetPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ResetKnowledgeByIdApiV1KnowledgeIdResetPostAsyncTest()
        {
            string id = default!;
            var response = await _instance.ResetKnowledgeByIdApiV1KnowledgeIdResetPostAsync(id);
            var model = response.Ok();
            Assert.IsType<KnowledgeResponse>(model);
        }

        /// <summary>
        /// Test UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostAsyncTest()
        {
            string id = default!;
            KnowledgeFileIdForm knowledgeFileIdForm = default!;
            var response = await _instance.UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostAsync(id, knowledgeFileIdForm);
            var model = response.Ok();
            Assert.IsType<KnowledgeFilesResponse>(model);
        }

        /// <summary>
        /// Test UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostAsyncTest()
        {
            string id = default!;
            KnowledgeForm knowledgeForm = default!;
            var response = await _instance.UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostAsync(id, knowledgeForm);
            var model = response.Ok();
            Assert.IsType<KnowledgeFilesResponse>(model);
        }
    }
}
