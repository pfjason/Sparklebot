/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ImagesApi
    /// </summary>
    public sealed class ImagesApiTests : ApiTestsBase
    {
        private readonly IImagesApi _instance;

        public ImagesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IImagesApi>();
        }

        /// <summary>
        /// Test GetConfigApiV1ImagesConfigGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetConfigApiV1ImagesConfigGetAsyncTest()
        {
            var response = await _instance.GetConfigApiV1ImagesConfigGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetImageConfigApiV1ImagesImageConfigGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetImageConfigApiV1ImagesImageConfigGetAsyncTest()
        {
            var response = await _instance.GetImageConfigApiV1ImagesImageConfigGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test GetModelsApiV1ImagesModelsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetModelsApiV1ImagesModelsGetAsyncTest()
        {
            var response = await _instance.GetModelsApiV1ImagesModelsGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test ImageGenerationsApiV1ImagesGenerationsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ImageGenerationsApiV1ImagesGenerationsPostAsyncTest()
        {
            GenerateImageForm generateImageForm = default!;
            var response = await _instance.ImageGenerationsApiV1ImagesGenerationsPostAsync(generateImageForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateConfigApiV1ImagesConfigUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateConfigApiV1ImagesConfigUpdatePostAsyncTest()
        {
            OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm = default!;
            var response = await _instance.UpdateConfigApiV1ImagesConfigUpdatePostAsync(openWebuiRoutersImagesConfigForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test UpdateImageConfigApiV1ImagesImageConfigUpdatePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateImageConfigApiV1ImagesImageConfigUpdatePostAsyncTest()
        {
            ImageConfigForm imageConfigForm = default!;
            var response = await _instance.UpdateImageConfigApiV1ImagesImageConfigUpdatePostAsync(imageConfigForm);
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }

        /// <summary>
        /// Test VerifyUrlApiV1ImagesConfigUrlVerifyGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifyUrlApiV1ImagesConfigUrlVerifyGetAsyncTest()
        {
            var response = await _instance.VerifyUrlApiV1ImagesConfigUrlVerifyGetAsync();
            var model = response.Ok();
            Assert.IsType<Object>(model);
        }
    }
}
