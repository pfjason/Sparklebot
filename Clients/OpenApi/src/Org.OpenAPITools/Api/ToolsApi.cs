// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IToolsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ToolsApiEvents Events { get; }

        /// <summary>
        /// Create New Tools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewToolsApiV1ToolsCreatePostApiResponse"/>&gt;</returns>
        Task<ICreateNewToolsApiV1ToolsCreatePostApiResponse> CreateNewToolsApiV1ToolsCreatePostAsync(ToolForm toolForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Tools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="toolForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewToolsApiV1ToolsCreatePostApiResponse"/>?&gt;</returns>
        Task<ICreateNewToolsApiV1ToolsCreatePostApiResponse?> CreateNewToolsApiV1ToolsCreatePostOrDefaultAsync(ToolForm toolForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Tools By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse> DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Tools By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse?> DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export Tools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportToolsApiV1ToolsExportGetApiResponse"/>&gt;</returns>
        Task<IExportToolsApiV1ToolsExportGetApiResponse> ExportToolsApiV1ToolsExportGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export Tools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportToolsApiV1ToolsExportGetApiResponse"/>?&gt;</returns>
        Task<IExportToolsApiV1ToolsExportGetApiResponse?> ExportToolsApiV1ToolsExportGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tool List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolListApiV1ToolsListGetApiResponse"/>&gt;</returns>
        Task<IGetToolListApiV1ToolsListGetApiResponse> GetToolListApiV1ToolsListGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tool List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolListApiV1ToolsListGetApiResponse"/>?&gt;</returns>
        Task<IGetToolListApiV1ToolsListGetApiResponse?> GetToolListApiV1ToolsListGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsApiV1ToolsGetApiResponse"/>&gt;</returns>
        Task<IGetToolsApiV1ToolsGetApiResponse> GetToolsApiV1ToolsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsApiV1ToolsGetApiResponse"/>?&gt;</returns>
        Task<IGetToolsApiV1ToolsGetApiResponse?> GetToolsApiV1ToolsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsByIdApiV1ToolsIdIdGetApiResponse"/>&gt;</returns>
        Task<IGetToolsByIdApiV1ToolsIdIdGetApiResponse> GetToolsByIdApiV1ToolsIdIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsByIdApiV1ToolsIdIdGetApiResponse"/>?&gt;</returns>
        Task<IGetToolsByIdApiV1ToolsIdIdGetApiResponse?> GetToolsByIdApiV1ToolsIdIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools User Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse"/>&gt;</returns>
        Task<IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse> GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools User Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse"/>?&gt;</returns>
        Task<IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse?> GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools User Valves Spec By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse"/>&gt;</returns>
        Task<IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse> GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools User Valves Spec By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse"/>?&gt;</returns>
        Task<IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse?> GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse"/>&gt;</returns>
        Task<IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse> GetToolsValvesByIdApiV1ToolsIdIdValvesGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse"/>?&gt;</returns>
        Task<IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse?> GetToolsValvesByIdApiV1ToolsIdIdValvesGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools Valves Spec By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse"/>&gt;</returns>
        Task<IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse> GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tools Valves Spec By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse"/>?&gt;</returns>
        Task<IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse?> GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Load Tool From Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse"/>&gt;</returns>
        Task<ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse> LoadToolFromUrlApiV1ToolsLoadUrlPostAsync(LoadUrlForm loadUrlForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Load Tool From Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="loadUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse"/>?&gt;</returns>
        Task<ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse?> LoadToolFromUrlApiV1ToolsLoadUrlPostOrDefaultAsync(LoadUrlForm loadUrlForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Tools By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse> UpdateToolsByIdApiV1ToolsIdIdUpdatePostAsync(string id, ToolForm toolForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Tools By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse?> UpdateToolsByIdApiV1ToolsIdIdUpdatePostOrDefaultAsync(string id, ToolForm toolForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Tools User Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse> UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Tools User Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse?> UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostOrDefaultAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Tools Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse> UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Tools Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse?> UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostOrDefaultAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateNewToolsApiV1ToolsCreatePostApiResponse"/>
    /// </summary>
    public interface ICreateNewToolsApiV1ToolsCreatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ToolResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IExportToolsApiV1ToolsExportGetApiResponse"/>
    /// </summary>
    public interface IExportToolsApiV1ToolsExportGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ToolModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetToolListApiV1ToolsListGetApiResponse"/>
    /// </summary>
    public interface IGetToolListApiV1ToolsListGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ToolUserResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetToolsApiV1ToolsGetApiResponse"/>
    /// </summary>
    public interface IGetToolsApiV1ToolsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ToolUserResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetToolsByIdApiV1ToolsIdIdGetApiResponse"/>
    /// </summary>
    public interface IGetToolsByIdApiV1ToolsIdIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ToolModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse"/>
    /// </summary>
    public interface IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse"/>
    /// </summary>
    public interface IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse"/>
    /// </summary>
    public interface IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse"/>
    /// </summary>
    public interface IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse"/>
    /// </summary>
    public interface ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ToolModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ToolsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNewToolsApiV1ToolsCreatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNewToolsApiV1ToolsCreatePost;

        internal void ExecuteOnCreateNewToolsApiV1ToolsCreatePost(ToolsApi.CreateNewToolsApiV1ToolsCreatePostApiResponse apiResponse)
        {
            OnCreateNewToolsApiV1ToolsCreatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewToolsApiV1ToolsCreatePost(Exception exception)
        {
            OnErrorCreateNewToolsApiV1ToolsCreatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteToolsByIdApiV1ToolsIdIdDeleteDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteToolsByIdApiV1ToolsIdIdDeleteDelete;

        internal void ExecuteOnDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(ToolsApi.DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse apiResponse)
        {
            OnDeleteToolsByIdApiV1ToolsIdIdDeleteDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(Exception exception)
        {
            OnErrorDeleteToolsByIdApiV1ToolsIdIdDeleteDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExportToolsApiV1ToolsExportGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExportToolsApiV1ToolsExportGet;

        internal void ExecuteOnExportToolsApiV1ToolsExportGet(ToolsApi.ExportToolsApiV1ToolsExportGetApiResponse apiResponse)
        {
            OnExportToolsApiV1ToolsExportGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExportToolsApiV1ToolsExportGet(Exception exception)
        {
            OnErrorExportToolsApiV1ToolsExportGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetToolListApiV1ToolsListGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetToolListApiV1ToolsListGet;

        internal void ExecuteOnGetToolListApiV1ToolsListGet(ToolsApi.GetToolListApiV1ToolsListGetApiResponse apiResponse)
        {
            OnGetToolListApiV1ToolsListGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetToolListApiV1ToolsListGet(Exception exception)
        {
            OnErrorGetToolListApiV1ToolsListGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetToolsApiV1ToolsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetToolsApiV1ToolsGet;

        internal void ExecuteOnGetToolsApiV1ToolsGet(ToolsApi.GetToolsApiV1ToolsGetApiResponse apiResponse)
        {
            OnGetToolsApiV1ToolsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetToolsApiV1ToolsGet(Exception exception)
        {
            OnErrorGetToolsApiV1ToolsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetToolsByIdApiV1ToolsIdIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetToolsByIdApiV1ToolsIdIdGet;

        internal void ExecuteOnGetToolsByIdApiV1ToolsIdIdGet(ToolsApi.GetToolsByIdApiV1ToolsIdIdGetApiResponse apiResponse)
        {
            OnGetToolsByIdApiV1ToolsIdIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetToolsByIdApiV1ToolsIdIdGet(Exception exception)
        {
            OnErrorGetToolsByIdApiV1ToolsIdIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet;

        internal void ExecuteOnGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(ToolsApi.GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse apiResponse)
        {
            OnGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(Exception exception)
        {
            OnErrorGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet;

        internal void ExecuteOnGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(ToolsApi.GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse apiResponse)
        {
            OnGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(Exception exception)
        {
            OnErrorGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetToolsValvesByIdApiV1ToolsIdIdValvesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetToolsValvesByIdApiV1ToolsIdIdValvesGet;

        internal void ExecuteOnGetToolsValvesByIdApiV1ToolsIdIdValvesGet(ToolsApi.GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse apiResponse)
        {
            OnGetToolsValvesByIdApiV1ToolsIdIdValvesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetToolsValvesByIdApiV1ToolsIdIdValvesGet(Exception exception)
        {
            OnErrorGetToolsValvesByIdApiV1ToolsIdIdValvesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet;

        internal void ExecuteOnGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(ToolsApi.GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse apiResponse)
        {
            OnGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(Exception exception)
        {
            OnErrorGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLoadToolFromUrlApiV1ToolsLoadUrlPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLoadToolFromUrlApiV1ToolsLoadUrlPost;

        internal void ExecuteOnLoadToolFromUrlApiV1ToolsLoadUrlPost(ToolsApi.LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse apiResponse)
        {
            OnLoadToolFromUrlApiV1ToolsLoadUrlPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLoadToolFromUrlApiV1ToolsLoadUrlPost(Exception exception)
        {
            OnErrorLoadToolFromUrlApiV1ToolsLoadUrlPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateToolsByIdApiV1ToolsIdIdUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateToolsByIdApiV1ToolsIdIdUpdatePost;

        internal void ExecuteOnUpdateToolsByIdApiV1ToolsIdIdUpdatePost(ToolsApi.UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse apiResponse)
        {
            OnUpdateToolsByIdApiV1ToolsIdIdUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateToolsByIdApiV1ToolsIdIdUpdatePost(Exception exception)
        {
            OnErrorUpdateToolsByIdApiV1ToolsIdIdUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost;

        internal void ExecuteOnUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(ToolsApi.UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse apiResponse)
        {
            OnUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(Exception exception)
        {
            OnErrorUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost;

        internal void ExecuteOnUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(ToolsApi.UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse apiResponse)
        {
            OnUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(Exception exception)
        {
            OnErrorUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ToolsApi : IToolsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ToolsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ToolsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ToolsApi(ILogger<ToolsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ToolsApiEvents toolsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ToolsApi>();
            HttpClient = httpClient;
            Events = toolsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateNewToolsApiV1ToolsCreatePost(ToolForm toolForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="toolForm"></param>
        /// <returns></returns>
        private void ValidateCreateNewToolsApiV1ToolsCreatePost(ToolForm toolForm)
        {
            if (toolForm == null)
                throw new ArgumentNullException(nameof(toolForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="toolForm"></param>
        private void AfterCreateNewToolsApiV1ToolsCreatePostDefaultImplementation(ICreateNewToolsApiV1ToolsCreatePostApiResponse apiResponseLocalVar, ToolForm toolForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewToolsApiV1ToolsCreatePost(ref suppressDefaultLog, apiResponseLocalVar, toolForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="toolForm"></param>
        partial void AfterCreateNewToolsApiV1ToolsCreatePost(ref bool suppressDefaultLog, ICreateNewToolsApiV1ToolsCreatePostApiResponse apiResponseLocalVar, ToolForm toolForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="toolForm"></param>
        private void OnErrorCreateNewToolsApiV1ToolsCreatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ToolForm toolForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewToolsApiV1ToolsCreatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, toolForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="toolForm"></param>
        partial void OnErrorCreateNewToolsApiV1ToolsCreatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ToolForm toolForm);

        /// <summary>
        /// Create New Tools 
        /// </summary>
        /// <param name="toolForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewToolsApiV1ToolsCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewToolsApiV1ToolsCreatePostApiResponse?> CreateNewToolsApiV1ToolsCreatePostOrDefaultAsync(ToolForm toolForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewToolsApiV1ToolsCreatePostAsync(toolForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create New Tools 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewToolsApiV1ToolsCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewToolsApiV1ToolsCreatePostApiResponse> CreateNewToolsApiV1ToolsCreatePostAsync(ToolForm toolForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewToolsApiV1ToolsCreatePost(toolForm);

                FormatCreateNewToolsApiV1ToolsCreatePost(toolForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/create");

                    httpRequestMessageLocalVar.Content = (toolForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(toolForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNewToolsApiV1ToolsCreatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewToolsApiV1ToolsCreatePostApiResponse>();

                        CreateNewToolsApiV1ToolsCreatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewToolsApiV1ToolsCreatePostDefaultImplementation(apiResponseLocalVar, toolForm);

                        Events.ExecuteOnCreateNewToolsApiV1ToolsCreatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewToolsApiV1ToolsCreatePostDefaultImplementation(e, "/api/v1/tools/create", uriBuilderLocalVar.Path, toolForm);
                Events.ExecuteOnErrorCreateNewToolsApiV1ToolsCreatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewToolsApiV1ToolsCreatePostApiResponse"/>
        /// </summary>
        public partial class CreateNewToolsApiV1ToolsCreatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateNewToolsApiV1ToolsCreatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewToolsApiV1ToolsCreatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewToolsApiV1ToolsCreatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewToolsApiV1ToolsCreatePostApiResponse(ILogger<CreateNewToolsApiV1ToolsCreatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ToolResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ToolResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ToolResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteDefaultImplementation(IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(ref bool suppressDefaultLog, IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete Tools By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse?> DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Tools By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse> DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(id);

                FormatDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}/delete");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse>();

                        DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteDefaultImplementation(e, "/api/v1/tools/id/{id}/delete", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteToolsByIdApiV1ToolsIdIdDeleteDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse(ILogger<DeleteToolsByIdApiV1ToolsIdIdDeleteDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterExportToolsApiV1ToolsExportGetDefaultImplementation(IExportToolsApiV1ToolsExportGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterExportToolsApiV1ToolsExportGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterExportToolsApiV1ToolsExportGet(ref bool suppressDefaultLog, IExportToolsApiV1ToolsExportGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorExportToolsApiV1ToolsExportGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExportToolsApiV1ToolsExportGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorExportToolsApiV1ToolsExportGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Export Tools 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportToolsApiV1ToolsExportGetApiResponse"/>&gt;</returns>
        public async Task<IExportToolsApiV1ToolsExportGetApiResponse?> ExportToolsApiV1ToolsExportGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExportToolsApiV1ToolsExportGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export Tools 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportToolsApiV1ToolsExportGetApiResponse"/>&gt;</returns>
        public async Task<IExportToolsApiV1ToolsExportGetApiResponse> ExportToolsApiV1ToolsExportGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/export"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/export");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExportToolsApiV1ToolsExportGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExportToolsApiV1ToolsExportGetApiResponse>();

                        ExportToolsApiV1ToolsExportGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/export", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExportToolsApiV1ToolsExportGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnExportToolsApiV1ToolsExportGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExportToolsApiV1ToolsExportGetDefaultImplementation(e, "/api/v1/tools/export", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorExportToolsApiV1ToolsExportGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExportToolsApiV1ToolsExportGetApiResponse"/>
        /// </summary>
        public partial class ExportToolsApiV1ToolsExportGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IExportToolsApiV1ToolsExportGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExportToolsApiV1ToolsExportGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExportToolsApiV1ToolsExportGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExportToolsApiV1ToolsExportGetApiResponse(ILogger<ExportToolsApiV1ToolsExportGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ToolModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ToolModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ToolModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetToolListApiV1ToolsListGetDefaultImplementation(IGetToolListApiV1ToolsListGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetToolListApiV1ToolsListGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetToolListApiV1ToolsListGet(ref bool suppressDefaultLog, IGetToolListApiV1ToolsListGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetToolListApiV1ToolsListGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetToolListApiV1ToolsListGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetToolListApiV1ToolsListGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Tool List 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolListApiV1ToolsListGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolListApiV1ToolsListGetApiResponse?> GetToolListApiV1ToolsListGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetToolListApiV1ToolsListGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tool List 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolListApiV1ToolsListGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolListApiV1ToolsListGetApiResponse> GetToolListApiV1ToolsListGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/list"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/list");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetToolListApiV1ToolsListGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetToolListApiV1ToolsListGetApiResponse>();

                        GetToolListApiV1ToolsListGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/list", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetToolListApiV1ToolsListGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetToolListApiV1ToolsListGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetToolListApiV1ToolsListGetDefaultImplementation(e, "/api/v1/tools/list", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetToolListApiV1ToolsListGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetToolListApiV1ToolsListGetApiResponse"/>
        /// </summary>
        public partial class GetToolListApiV1ToolsListGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetToolListApiV1ToolsListGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetToolListApiV1ToolsListGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetToolListApiV1ToolsListGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetToolListApiV1ToolsListGetApiResponse(ILogger<GetToolListApiV1ToolsListGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ToolUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ToolUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ToolUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetToolsApiV1ToolsGetDefaultImplementation(IGetToolsApiV1ToolsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetToolsApiV1ToolsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetToolsApiV1ToolsGet(ref bool suppressDefaultLog, IGetToolsApiV1ToolsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetToolsApiV1ToolsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetToolsApiV1ToolsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetToolsApiV1ToolsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Tools 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsApiV1ToolsGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsApiV1ToolsGetApiResponse?> GetToolsApiV1ToolsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetToolsApiV1ToolsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tools 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsApiV1ToolsGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsApiV1ToolsGetApiResponse> GetToolsApiV1ToolsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetToolsApiV1ToolsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetToolsApiV1ToolsGetApiResponse>();

                        GetToolsApiV1ToolsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetToolsApiV1ToolsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetToolsApiV1ToolsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetToolsApiV1ToolsGetDefaultImplementation(e, "/api/v1/tools/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetToolsApiV1ToolsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetToolsApiV1ToolsGetApiResponse"/>
        /// </summary>
        public partial class GetToolsApiV1ToolsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetToolsApiV1ToolsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetToolsApiV1ToolsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetToolsApiV1ToolsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetToolsApiV1ToolsGetApiResponse(ILogger<GetToolsApiV1ToolsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ToolUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ToolUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ToolUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetToolsByIdApiV1ToolsIdIdGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetToolsByIdApiV1ToolsIdIdGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetToolsByIdApiV1ToolsIdIdGetDefaultImplementation(IGetToolsByIdApiV1ToolsIdIdGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetToolsByIdApiV1ToolsIdIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetToolsByIdApiV1ToolsIdIdGet(ref bool suppressDefaultLog, IGetToolsByIdApiV1ToolsIdIdGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetToolsByIdApiV1ToolsIdIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetToolsByIdApiV1ToolsIdIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetToolsByIdApiV1ToolsIdIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Tools By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsByIdApiV1ToolsIdIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsByIdApiV1ToolsIdIdGetApiResponse?> GetToolsByIdApiV1ToolsIdIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetToolsByIdApiV1ToolsIdIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tools By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsByIdApiV1ToolsIdIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsByIdApiV1ToolsIdIdGetApiResponse> GetToolsByIdApiV1ToolsIdIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetToolsByIdApiV1ToolsIdIdGet(id);

                FormatGetToolsByIdApiV1ToolsIdIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetToolsByIdApiV1ToolsIdIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetToolsByIdApiV1ToolsIdIdGetApiResponse>();

                        GetToolsByIdApiV1ToolsIdIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetToolsByIdApiV1ToolsIdIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetToolsByIdApiV1ToolsIdIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetToolsByIdApiV1ToolsIdIdGetDefaultImplementation(e, "/api/v1/tools/id/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetToolsByIdApiV1ToolsIdIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetToolsByIdApiV1ToolsIdIdGetApiResponse"/>
        /// </summary>
        public partial class GetToolsByIdApiV1ToolsIdIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetToolsByIdApiV1ToolsIdIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetToolsByIdApiV1ToolsIdIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetToolsByIdApiV1ToolsIdIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetToolsByIdApiV1ToolsIdIdGetApiResponse(ILogger<GetToolsByIdApiV1ToolsIdIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ToolModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ToolModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ToolModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetDefaultImplementation(IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(ref bool suppressDefaultLog, IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Tools User Valves By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse?> GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tools User Valves By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse> GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(id);

                FormatGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}/valves/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}/valves/user");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse>();

                        GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}/valves/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetDefaultImplementation(e, "/api/v1/tools/id/{id}/valves/user", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse"/>
        /// </summary>
        public partial class GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse(ILogger<GetToolsUserValvesByIdApiV1ToolsIdIdValvesUserGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetDefaultImplementation(IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(ref bool suppressDefaultLog, IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Tools User Valves Spec By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse?> GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tools User Valves Spec By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse> GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(id);

                FormatGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}/valves/user/spec"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}/valves/user/spec");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse>();

                        GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}/valves/user/spec", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetDefaultImplementation(e, "/api/v1/tools/id/{id}/valves/user/spec", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse"/>
        /// </summary>
        public partial class GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse(ILogger<GetToolsUserValvesSpecByIdApiV1ToolsIdIdValvesUserSpecGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetToolsValvesByIdApiV1ToolsIdIdValvesGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetToolsValvesByIdApiV1ToolsIdIdValvesGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetToolsValvesByIdApiV1ToolsIdIdValvesGetDefaultImplementation(IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetToolsValvesByIdApiV1ToolsIdIdValvesGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetToolsValvesByIdApiV1ToolsIdIdValvesGet(ref bool suppressDefaultLog, IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetToolsValvesByIdApiV1ToolsIdIdValvesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetToolsValvesByIdApiV1ToolsIdIdValvesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetToolsValvesByIdApiV1ToolsIdIdValvesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Tools Valves By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse?> GetToolsValvesByIdApiV1ToolsIdIdValvesGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetToolsValvesByIdApiV1ToolsIdIdValvesGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tools Valves By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse> GetToolsValvesByIdApiV1ToolsIdIdValvesGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetToolsValvesByIdApiV1ToolsIdIdValvesGet(id);

                FormatGetToolsValvesByIdApiV1ToolsIdIdValvesGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}/valves"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}/valves");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse>();

                        GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}/valves", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetToolsValvesByIdApiV1ToolsIdIdValvesGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetToolsValvesByIdApiV1ToolsIdIdValvesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetToolsValvesByIdApiV1ToolsIdIdValvesGetDefaultImplementation(e, "/api/v1/tools/id/{id}/valves", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetToolsValvesByIdApiV1ToolsIdIdValvesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse"/>
        /// </summary>
        public partial class GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse(ILogger<GetToolsValvesByIdApiV1ToolsIdIdValvesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetDefaultImplementation(IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(ref bool suppressDefaultLog, IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Tools Valves Spec By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse?> GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tools Valves Spec By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse> GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(id);

                FormatGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}/valves/spec"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}/valves/spec");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse>();

                        GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}/valves/spec", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetDefaultImplementation(e, "/api/v1/tools/id/{id}/valves/spec", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse"/>
        /// </summary>
        public partial class GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse(ILogger<GetToolsValvesSpecByIdApiV1ToolsIdIdValvesSpecGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLoadToolFromUrlApiV1ToolsLoadUrlPost(LoadUrlForm loadUrlForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="loadUrlForm"></param>
        /// <returns></returns>
        private void ValidateLoadToolFromUrlApiV1ToolsLoadUrlPost(LoadUrlForm loadUrlForm)
        {
            if (loadUrlForm == null)
                throw new ArgumentNullException(nameof(loadUrlForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="loadUrlForm"></param>
        private void AfterLoadToolFromUrlApiV1ToolsLoadUrlPostDefaultImplementation(ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse apiResponseLocalVar, LoadUrlForm loadUrlForm)
        {
            bool suppressDefaultLog = false;
            AfterLoadToolFromUrlApiV1ToolsLoadUrlPost(ref suppressDefaultLog, apiResponseLocalVar, loadUrlForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="loadUrlForm"></param>
        partial void AfterLoadToolFromUrlApiV1ToolsLoadUrlPost(ref bool suppressDefaultLog, ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse apiResponseLocalVar, LoadUrlForm loadUrlForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="loadUrlForm"></param>
        private void OnErrorLoadToolFromUrlApiV1ToolsLoadUrlPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LoadUrlForm loadUrlForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLoadToolFromUrlApiV1ToolsLoadUrlPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, loadUrlForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="loadUrlForm"></param>
        partial void OnErrorLoadToolFromUrlApiV1ToolsLoadUrlPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LoadUrlForm loadUrlForm);

        /// <summary>
        /// Load Tool From Url 
        /// </summary>
        /// <param name="loadUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse"/>&gt;</returns>
        public async Task<ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse?> LoadToolFromUrlApiV1ToolsLoadUrlPostOrDefaultAsync(LoadUrlForm loadUrlForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LoadToolFromUrlApiV1ToolsLoadUrlPostAsync(loadUrlForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Load Tool From Url 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse"/>&gt;</returns>
        public async Task<ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse> LoadToolFromUrlApiV1ToolsLoadUrlPostAsync(LoadUrlForm loadUrlForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLoadToolFromUrlApiV1ToolsLoadUrlPost(loadUrlForm);

                FormatLoadToolFromUrlApiV1ToolsLoadUrlPost(loadUrlForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/load/url"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/load/url");

                    httpRequestMessageLocalVar.Content = (loadUrlForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(loadUrlForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse>();

                        LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/load/url", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLoadToolFromUrlApiV1ToolsLoadUrlPostDefaultImplementation(apiResponseLocalVar, loadUrlForm);

                        Events.ExecuteOnLoadToolFromUrlApiV1ToolsLoadUrlPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLoadToolFromUrlApiV1ToolsLoadUrlPostDefaultImplementation(e, "/api/v1/tools/load/url", uriBuilderLocalVar.Path, loadUrlForm);
                Events.ExecuteOnErrorLoadToolFromUrlApiV1ToolsLoadUrlPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse"/>
        /// </summary>
        public partial class LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ILoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse(ILogger<LoadToolFromUrlApiV1ToolsLoadUrlPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateToolsByIdApiV1ToolsIdIdUpdatePost(ref string id, ToolForm toolForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        /// <returns></returns>
        private void ValidateUpdateToolsByIdApiV1ToolsIdIdUpdatePost(string id, ToolForm toolForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (toolForm == null)
                throw new ArgumentNullException(nameof(toolForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        private void AfterUpdateToolsByIdApiV1ToolsIdIdUpdatePostDefaultImplementation(IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse apiResponseLocalVar, string id, ToolForm toolForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateToolsByIdApiV1ToolsIdIdUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, toolForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        partial void AfterUpdateToolsByIdApiV1ToolsIdIdUpdatePost(ref bool suppressDefaultLog, IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse apiResponseLocalVar, string id, ToolForm toolForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        private void OnErrorUpdateToolsByIdApiV1ToolsIdIdUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ToolForm toolForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateToolsByIdApiV1ToolsIdIdUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, toolForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        partial void OnErrorUpdateToolsByIdApiV1ToolsIdIdUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ToolForm toolForm);

        /// <summary>
        /// Update Tools By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse?> UpdateToolsByIdApiV1ToolsIdIdUpdatePostOrDefaultAsync(string id, ToolForm toolForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateToolsByIdApiV1ToolsIdIdUpdatePostAsync(id, toolForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Tools By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="toolForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse> UpdateToolsByIdApiV1ToolsIdIdUpdatePostAsync(string id, ToolForm toolForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateToolsByIdApiV1ToolsIdIdUpdatePost(id, toolForm);

                FormatUpdateToolsByIdApiV1ToolsIdIdUpdatePost(ref id, toolForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (toolForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(toolForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse>();

                        UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateToolsByIdApiV1ToolsIdIdUpdatePostDefaultImplementation(apiResponseLocalVar, id, toolForm);

                        Events.ExecuteOnUpdateToolsByIdApiV1ToolsIdIdUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateToolsByIdApiV1ToolsIdIdUpdatePostDefaultImplementation(e, "/api/v1/tools/id/{id}/update", uriBuilderLocalVar.Path, id, toolForm);
                Events.ExecuteOnErrorUpdateToolsByIdApiV1ToolsIdIdUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse(ILogger<UpdateToolsByIdApiV1ToolsIdIdUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ToolModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ToolModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ToolModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(ref string id, ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(string id, Object body)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void AfterUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostDefaultImplementation(IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse apiResponseLocalVar, string id, Object body)
        {
            bool suppressDefaultLog = false;
            AfterUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void AfterUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(ref bool suppressDefaultLog, IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse apiResponseLocalVar, string id, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void OnErrorUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void OnErrorUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Object body);

        /// <summary>
        /// Update Tools User Valves By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse?> UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostOrDefaultAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Tools User Valves By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse> UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(id, body);

                FormatUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(ref id, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}/valves/user/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}/valves/user/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse>();

                        UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}/valves/user/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostDefaultImplementation(apiResponseLocalVar, id, body);

                        Events.ExecuteOnUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostDefaultImplementation(e, "/api/v1/tools/id/{id}/valves/user/update", uriBuilderLocalVar.Path, id, body);
                Events.ExecuteOnErrorUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse(ILogger<UpdateToolsUserValvesByIdApiV1ToolsIdIdValvesUserUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(ref string id, ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(string id, Object body)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void AfterUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostDefaultImplementation(IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse apiResponseLocalVar, string id, Object body)
        {
            bool suppressDefaultLog = false;
            AfterUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void AfterUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(ref bool suppressDefaultLog, IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse apiResponseLocalVar, string id, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void OnErrorUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void OnErrorUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Object body);

        /// <summary>
        /// Update Tools Valves By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse?> UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostOrDefaultAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Tools Valves By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse> UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(id, body);

                FormatUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(ref id, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tools/id/{id}/valves/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tools/id/{id}/valves/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse>();

                        UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tools/id/{id}/valves/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostDefaultImplementation(apiResponseLocalVar, id, body);

                        Events.ExecuteOnUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostDefaultImplementation(e, "/api/v1/tools/id/{id}/valves/update", uriBuilderLocalVar.Path, id, body);
                Events.ExecuteOnErrorUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse(ILogger<UpdateToolsValvesByIdApiV1ToolsIdIdValvesUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
