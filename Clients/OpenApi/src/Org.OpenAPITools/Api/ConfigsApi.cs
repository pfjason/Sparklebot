// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IConfigsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ConfigsApiEvents Events { get; }

        /// <summary>
        /// Export Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportConfigApiV1ConfigsExportGetApiResponse"/>&gt;</returns>
        Task<IExportConfigApiV1ConfigsExportGetApiResponse> ExportConfigApiV1ConfigsExportGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Export Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportConfigApiV1ConfigsExportGetApiResponse"/>?&gt;</returns>
        Task<IExportConfigApiV1ConfigsExportGetApiResponse?> ExportConfigApiV1ConfigsExportGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Banners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBannersApiV1ConfigsBannersGetApiResponse"/>&gt;</returns>
        Task<IGetBannersApiV1ConfigsBannersGetApiResponse> GetBannersApiV1ConfigsBannersGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Banners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBannersApiV1ConfigsBannersGetApiResponse"/>?&gt;</returns>
        Task<IGetBannersApiV1ConfigsBannersGetApiResponse?> GetBannersApiV1ConfigsBannersGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Code Execution Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse"/>&gt;</returns>
        Task<IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse> GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Code Execution Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse"/>?&gt;</returns>
        Task<IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse?> GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Direct Connections Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse"/>&gt;</returns>
        Task<IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse> GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Direct Connections Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse"/>?&gt;</returns>
        Task<IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse?> GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Models Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsConfigApiV1ConfigsModelsGetApiResponse"/>&gt;</returns>
        Task<IGetModelsConfigApiV1ConfigsModelsGetApiResponse> GetModelsConfigApiV1ConfigsModelsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Models Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsConfigApiV1ConfigsModelsGetApiResponse"/>?&gt;</returns>
        Task<IGetModelsConfigApiV1ConfigsModelsGetApiResponse?> GetModelsConfigApiV1ConfigsModelsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tool Servers Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse"/>&gt;</returns>
        Task<IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse> GetToolServersConfigApiV1ConfigsToolServersGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Tool Servers Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse"/>?&gt;</returns>
        Task<IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse?> GetToolServersConfigApiV1ConfigsToolServersGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="importConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportConfigApiV1ConfigsImportPostApiResponse"/>&gt;</returns>
        Task<IImportConfigApiV1ConfigsImportPostApiResponse> ImportConfigApiV1ConfigsImportPostAsync(ImportConfigForm importConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="importConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportConfigApiV1ConfigsImportPostApiResponse"/>?&gt;</returns>
        Task<IImportConfigApiV1ConfigsImportPostApiResponse?> ImportConfigApiV1ConfigsImportPostOrDefaultAsync(ImportConfigForm importConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Banners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="setBannersForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetBannersApiV1ConfigsBannersPostApiResponse"/>&gt;</returns>
        Task<ISetBannersApiV1ConfigsBannersPostApiResponse> SetBannersApiV1ConfigsBannersPostAsync(SetBannersForm setBannersForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Banners
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="setBannersForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetBannersApiV1ConfigsBannersPostApiResponse"/>?&gt;</returns>
        Task<ISetBannersApiV1ConfigsBannersPostApiResponse?> SetBannersApiV1ConfigsBannersPostOrDefaultAsync(SetBannersForm setBannersForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Code Execution Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeInterpreterConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse"/>&gt;</returns>
        Task<ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse> SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostAsync(CodeInterpreterConfigForm codeInterpreterConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Code Execution Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="codeInterpreterConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse"/>?&gt;</returns>
        Task<ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse?> SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostOrDefaultAsync(CodeInterpreterConfigForm codeInterpreterConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Default Suggestions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="setDefaultSuggestionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse"/>&gt;</returns>
        Task<ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse> SetDefaultSuggestionsApiV1ConfigsSuggestionsPostAsync(SetDefaultSuggestionsForm setDefaultSuggestionsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Default Suggestions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="setDefaultSuggestionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse"/>?&gt;</returns>
        Task<ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse?> SetDefaultSuggestionsApiV1ConfigsSuggestionsPostOrDefaultAsync(SetDefaultSuggestionsForm setDefaultSuggestionsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Direct Connections Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="directConnectionsConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse"/>&gt;</returns>
        Task<ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse> SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostAsync(DirectConnectionsConfigForm directConnectionsConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Direct Connections Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="directConnectionsConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse"/>?&gt;</returns>
        Task<ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse?> SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostOrDefaultAsync(DirectConnectionsConfigForm directConnectionsConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Models Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelsConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetModelsConfigApiV1ConfigsModelsPostApiResponse"/>&gt;</returns>
        Task<ISetModelsConfigApiV1ConfigsModelsPostApiResponse> SetModelsConfigApiV1ConfigsModelsPostAsync(ModelsConfigForm modelsConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Models Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="modelsConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetModelsConfigApiV1ConfigsModelsPostApiResponse"/>?&gt;</returns>
        Task<ISetModelsConfigApiV1ConfigsModelsPostApiResponse?> SetModelsConfigApiV1ConfigsModelsPostOrDefaultAsync(ModelsConfigForm modelsConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Tool Servers Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolServersConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse"/>&gt;</returns>
        Task<ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse> SetToolServersConfigApiV1ConfigsToolServersPostAsync(ToolServersConfigForm toolServersConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set Tool Servers Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="toolServersConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse"/>?&gt;</returns>
        Task<ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse?> SetToolServersConfigApiV1ConfigsToolServersPostOrDefaultAsync(ToolServersConfigForm toolServersConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Tool Servers Config
        /// </summary>
        /// <remarks>
        /// Verify the connection to the tool server.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolServerConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse"/>&gt;</returns>
        Task<IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse> VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostAsync(ToolServerConnection toolServerConnection, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Tool Servers Config
        /// </summary>
        /// <remarks>
        /// Verify the connection to the tool server.
        /// </remarks>
        /// <param name="toolServerConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse"/>?&gt;</returns>
        Task<IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse?> VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostOrDefaultAsync(ToolServerConnection toolServerConnection, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IExportConfigApiV1ConfigsExportGetApiResponse"/>
    /// </summary>
    public interface IExportConfigApiV1ConfigsExportGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetBannersApiV1ConfigsBannersGetApiResponse"/>
    /// </summary>
    public interface IGetBannersApiV1ConfigsBannersGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<BannerModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse"/>
    /// </summary>
    public interface IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.CodeInterpreterConfigForm?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse"/>
    /// </summary>
    public interface IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.DirectConnectionsConfigForm?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetModelsConfigApiV1ConfigsModelsGetApiResponse"/>
    /// </summary>
    public interface IGetModelsConfigApiV1ConfigsModelsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ModelsConfigForm?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse"/>
    /// </summary>
    public interface IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ToolServersConfigForm?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IImportConfigApiV1ConfigsImportPostApiResponse"/>
    /// </summary>
    public interface IImportConfigApiV1ConfigsImportPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISetBannersApiV1ConfigsBannersPostApiResponse"/>
    /// </summary>
    public interface ISetBannersApiV1ConfigsBannersPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<BannerModel>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse"/>
    /// </summary>
    public interface ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.CodeInterpreterConfigForm?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse"/>
    /// </summary>
    public interface ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<PromptSuggestion>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse"/>
    /// </summary>
    public interface ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.DirectConnectionsConfigForm?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISetModelsConfigApiV1ConfigsModelsPostApiResponse"/>
    /// </summary>
    public interface ISetModelsConfigApiV1ConfigsModelsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ModelsConfigForm?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse"/>
    /// </summary>
    public interface ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ToolServersConfigForm?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse"/>
    /// </summary>
    public interface IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ConfigsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExportConfigApiV1ConfigsExportGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExportConfigApiV1ConfigsExportGet;

        internal void ExecuteOnExportConfigApiV1ConfigsExportGet(ConfigsApi.ExportConfigApiV1ConfigsExportGetApiResponse apiResponse)
        {
            OnExportConfigApiV1ConfigsExportGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExportConfigApiV1ConfigsExportGet(Exception exception)
        {
            OnErrorExportConfigApiV1ConfigsExportGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBannersApiV1ConfigsBannersGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBannersApiV1ConfigsBannersGet;

        internal void ExecuteOnGetBannersApiV1ConfigsBannersGet(ConfigsApi.GetBannersApiV1ConfigsBannersGetApiResponse apiResponse)
        {
            OnGetBannersApiV1ConfigsBannersGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBannersApiV1ConfigsBannersGet(Exception exception)
        {
            OnErrorGetBannersApiV1ConfigsBannersGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet;

        internal void ExecuteOnGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(ConfigsApi.GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse apiResponse)
        {
            OnGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(Exception exception)
        {
            OnErrorGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet;

        internal void ExecuteOnGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet(ConfigsApi.GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse apiResponse)
        {
            OnGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet(Exception exception)
        {
            OnErrorGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetModelsConfigApiV1ConfigsModelsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetModelsConfigApiV1ConfigsModelsGet;

        internal void ExecuteOnGetModelsConfigApiV1ConfigsModelsGet(ConfigsApi.GetModelsConfigApiV1ConfigsModelsGetApiResponse apiResponse)
        {
            OnGetModelsConfigApiV1ConfigsModelsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetModelsConfigApiV1ConfigsModelsGet(Exception exception)
        {
            OnErrorGetModelsConfigApiV1ConfigsModelsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetToolServersConfigApiV1ConfigsToolServersGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetToolServersConfigApiV1ConfigsToolServersGet;

        internal void ExecuteOnGetToolServersConfigApiV1ConfigsToolServersGet(ConfigsApi.GetToolServersConfigApiV1ConfigsToolServersGetApiResponse apiResponse)
        {
            OnGetToolServersConfigApiV1ConfigsToolServersGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetToolServersConfigApiV1ConfigsToolServersGet(Exception exception)
        {
            OnErrorGetToolServersConfigApiV1ConfigsToolServersGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnImportConfigApiV1ConfigsImportPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorImportConfigApiV1ConfigsImportPost;

        internal void ExecuteOnImportConfigApiV1ConfigsImportPost(ConfigsApi.ImportConfigApiV1ConfigsImportPostApiResponse apiResponse)
        {
            OnImportConfigApiV1ConfigsImportPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorImportConfigApiV1ConfigsImportPost(Exception exception)
        {
            OnErrorImportConfigApiV1ConfigsImportPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetBannersApiV1ConfigsBannersPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetBannersApiV1ConfigsBannersPost;

        internal void ExecuteOnSetBannersApiV1ConfigsBannersPost(ConfigsApi.SetBannersApiV1ConfigsBannersPostApiResponse apiResponse)
        {
            OnSetBannersApiV1ConfigsBannersPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetBannersApiV1ConfigsBannersPost(Exception exception)
        {
            OnErrorSetBannersApiV1ConfigsBannersPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost;

        internal void ExecuteOnSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(ConfigsApi.SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse apiResponse)
        {
            OnSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(Exception exception)
        {
            OnErrorSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetDefaultSuggestionsApiV1ConfigsSuggestionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetDefaultSuggestionsApiV1ConfigsSuggestionsPost;

        internal void ExecuteOnSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(ConfigsApi.SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse apiResponse)
        {
            OnSetDefaultSuggestionsApiV1ConfigsSuggestionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(Exception exception)
        {
            OnErrorSetDefaultSuggestionsApiV1ConfigsSuggestionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost;

        internal void ExecuteOnSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(ConfigsApi.SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse apiResponse)
        {
            OnSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(Exception exception)
        {
            OnErrorSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetModelsConfigApiV1ConfigsModelsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetModelsConfigApiV1ConfigsModelsPost;

        internal void ExecuteOnSetModelsConfigApiV1ConfigsModelsPost(ConfigsApi.SetModelsConfigApiV1ConfigsModelsPostApiResponse apiResponse)
        {
            OnSetModelsConfigApiV1ConfigsModelsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetModelsConfigApiV1ConfigsModelsPost(Exception exception)
        {
            OnErrorSetModelsConfigApiV1ConfigsModelsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetToolServersConfigApiV1ConfigsToolServersPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetToolServersConfigApiV1ConfigsToolServersPost;

        internal void ExecuteOnSetToolServersConfigApiV1ConfigsToolServersPost(ConfigsApi.SetToolServersConfigApiV1ConfigsToolServersPostApiResponse apiResponse)
        {
            OnSetToolServersConfigApiV1ConfigsToolServersPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetToolServersConfigApiV1ConfigsToolServersPost(Exception exception)
        {
            OnErrorSetToolServersConfigApiV1ConfigsToolServersPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost;

        internal void ExecuteOnVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(ConfigsApi.VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse apiResponse)
        {
            OnVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(Exception exception)
        {
            OnErrorVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ConfigsApi : IConfigsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ConfigsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ConfigsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigsApi(ILogger<ConfigsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ConfigsApiEvents configsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ConfigsApi>();
            HttpClient = httpClient;
            Events = configsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterExportConfigApiV1ConfigsExportGetDefaultImplementation(IExportConfigApiV1ConfigsExportGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterExportConfigApiV1ConfigsExportGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterExportConfigApiV1ConfigsExportGet(ref bool suppressDefaultLog, IExportConfigApiV1ConfigsExportGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorExportConfigApiV1ConfigsExportGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExportConfigApiV1ConfigsExportGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorExportConfigApiV1ConfigsExportGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Export Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportConfigApiV1ConfigsExportGetApiResponse"/>&gt;</returns>
        public async Task<IExportConfigApiV1ConfigsExportGetApiResponse?> ExportConfigApiV1ConfigsExportGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExportConfigApiV1ConfigsExportGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Export Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExportConfigApiV1ConfigsExportGetApiResponse"/>&gt;</returns>
        public async Task<IExportConfigApiV1ConfigsExportGetApiResponse> ExportConfigApiV1ConfigsExportGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/export"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/export");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExportConfigApiV1ConfigsExportGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExportConfigApiV1ConfigsExportGetApiResponse>();

                        ExportConfigApiV1ConfigsExportGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/export", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExportConfigApiV1ConfigsExportGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnExportConfigApiV1ConfigsExportGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExportConfigApiV1ConfigsExportGetDefaultImplementation(e, "/api/v1/configs/export", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorExportConfigApiV1ConfigsExportGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExportConfigApiV1ConfigsExportGetApiResponse"/>
        /// </summary>
        public partial class ExportConfigApiV1ConfigsExportGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IExportConfigApiV1ConfigsExportGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExportConfigApiV1ConfigsExportGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExportConfigApiV1ConfigsExportGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExportConfigApiV1ConfigsExportGetApiResponse(ILogger<ExportConfigApiV1ConfigsExportGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetBannersApiV1ConfigsBannersGetDefaultImplementation(IGetBannersApiV1ConfigsBannersGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetBannersApiV1ConfigsBannersGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetBannersApiV1ConfigsBannersGet(ref bool suppressDefaultLog, IGetBannersApiV1ConfigsBannersGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetBannersApiV1ConfigsBannersGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetBannersApiV1ConfigsBannersGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetBannersApiV1ConfigsBannersGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Banners 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBannersApiV1ConfigsBannersGetApiResponse"/>&gt;</returns>
        public async Task<IGetBannersApiV1ConfigsBannersGetApiResponse?> GetBannersApiV1ConfigsBannersGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBannersApiV1ConfigsBannersGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Banners 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBannersApiV1ConfigsBannersGetApiResponse"/>&gt;</returns>
        public async Task<IGetBannersApiV1ConfigsBannersGetApiResponse> GetBannersApiV1ConfigsBannersGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/banners"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/banners");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBannersApiV1ConfigsBannersGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBannersApiV1ConfigsBannersGetApiResponse>();

                        GetBannersApiV1ConfigsBannersGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/banners", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBannersApiV1ConfigsBannersGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetBannersApiV1ConfigsBannersGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBannersApiV1ConfigsBannersGetDefaultImplementation(e, "/api/v1/configs/banners", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetBannersApiV1ConfigsBannersGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBannersApiV1ConfigsBannersGetApiResponse"/>
        /// </summary>
        public partial class GetBannersApiV1ConfigsBannersGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetBannersApiV1ConfigsBannersGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBannersApiV1ConfigsBannersGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBannersApiV1ConfigsBannersGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBannersApiV1ConfigsBannersGetApiResponse(ILogger<GetBannersApiV1ConfigsBannersGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<BannerModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<BannerModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<BannerModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetDefaultImplementation(IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(ref bool suppressDefaultLog, IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Code Execution Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse"/>&gt;</returns>
        public async Task<IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse?> GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Code Execution Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse"/>&gt;</returns>
        public async Task<IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse> GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/code_execution"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/code_execution");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse>();

                        GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/code_execution", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetDefaultImplementation(e, "/api/v1/configs/code_execution", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse"/>
        /// </summary>
        public partial class GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse(ILogger<GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CodeInterpreterConfigForm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CodeInterpreterConfigForm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.CodeInterpreterConfigForm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetDefaultImplementation(IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet(ref bool suppressDefaultLog, IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Direct Connections Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse?> GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Direct Connections Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse> GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/direct_connections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/direct_connections");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse>();

                        GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/direct_connections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetDefaultImplementation(e, "/api/v1/configs/direct_connections", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse"/>
        /// </summary>
        public partial class GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse(ILogger<GetDirectConnectionsConfigApiV1ConfigsDirectConnectionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DirectConnectionsConfigForm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DirectConnectionsConfigForm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.DirectConnectionsConfigForm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetModelsConfigApiV1ConfigsModelsGetDefaultImplementation(IGetModelsConfigApiV1ConfigsModelsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetModelsConfigApiV1ConfigsModelsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetModelsConfigApiV1ConfigsModelsGet(ref bool suppressDefaultLog, IGetModelsConfigApiV1ConfigsModelsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetModelsConfigApiV1ConfigsModelsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetModelsConfigApiV1ConfigsModelsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetModelsConfigApiV1ConfigsModelsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Models Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsConfigApiV1ConfigsModelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetModelsConfigApiV1ConfigsModelsGetApiResponse?> GetModelsConfigApiV1ConfigsModelsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetModelsConfigApiV1ConfigsModelsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Models Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsConfigApiV1ConfigsModelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetModelsConfigApiV1ConfigsModelsGetApiResponse> GetModelsConfigApiV1ConfigsModelsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/models"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/models");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetModelsConfigApiV1ConfigsModelsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetModelsConfigApiV1ConfigsModelsGetApiResponse>();

                        GetModelsConfigApiV1ConfigsModelsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/models", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetModelsConfigApiV1ConfigsModelsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetModelsConfigApiV1ConfigsModelsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetModelsConfigApiV1ConfigsModelsGetDefaultImplementation(e, "/api/v1/configs/models", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetModelsConfigApiV1ConfigsModelsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetModelsConfigApiV1ConfigsModelsGetApiResponse"/>
        /// </summary>
        public partial class GetModelsConfigApiV1ConfigsModelsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetModelsConfigApiV1ConfigsModelsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetModelsConfigApiV1ConfigsModelsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetModelsConfigApiV1ConfigsModelsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetModelsConfigApiV1ConfigsModelsGetApiResponse(ILogger<GetModelsConfigApiV1ConfigsModelsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ModelsConfigForm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ModelsConfigForm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ModelsConfigForm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetToolServersConfigApiV1ConfigsToolServersGetDefaultImplementation(IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetToolServersConfigApiV1ConfigsToolServersGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetToolServersConfigApiV1ConfigsToolServersGet(ref bool suppressDefaultLog, IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetToolServersConfigApiV1ConfigsToolServersGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetToolServersConfigApiV1ConfigsToolServersGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetToolServersConfigApiV1ConfigsToolServersGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Tool Servers Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse?> GetToolServersConfigApiV1ConfigsToolServersGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetToolServersConfigApiV1ConfigsToolServersGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Tool Servers Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse"/>&gt;</returns>
        public async Task<IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse> GetToolServersConfigApiV1ConfigsToolServersGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/tool_servers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/tool_servers");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetToolServersConfigApiV1ConfigsToolServersGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetToolServersConfigApiV1ConfigsToolServersGetApiResponse>();

                        GetToolServersConfigApiV1ConfigsToolServersGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/tool_servers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetToolServersConfigApiV1ConfigsToolServersGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetToolServersConfigApiV1ConfigsToolServersGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetToolServersConfigApiV1ConfigsToolServersGetDefaultImplementation(e, "/api/v1/configs/tool_servers", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetToolServersConfigApiV1ConfigsToolServersGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetToolServersConfigApiV1ConfigsToolServersGetApiResponse"/>
        /// </summary>
        public partial class GetToolServersConfigApiV1ConfigsToolServersGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetToolServersConfigApiV1ConfigsToolServersGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetToolServersConfigApiV1ConfigsToolServersGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetToolServersConfigApiV1ConfigsToolServersGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetToolServersConfigApiV1ConfigsToolServersGetApiResponse(ILogger<GetToolServersConfigApiV1ConfigsToolServersGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ToolServersConfigForm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ToolServersConfigForm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ToolServersConfigForm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatImportConfigApiV1ConfigsImportPost(ImportConfigForm importConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="importConfigForm"></param>
        /// <returns></returns>
        private void ValidateImportConfigApiV1ConfigsImportPost(ImportConfigForm importConfigForm)
        {
            if (importConfigForm == null)
                throw new ArgumentNullException(nameof(importConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="importConfigForm"></param>
        private void AfterImportConfigApiV1ConfigsImportPostDefaultImplementation(IImportConfigApiV1ConfigsImportPostApiResponse apiResponseLocalVar, ImportConfigForm importConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterImportConfigApiV1ConfigsImportPost(ref suppressDefaultLog, apiResponseLocalVar, importConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="importConfigForm"></param>
        partial void AfterImportConfigApiV1ConfigsImportPost(ref bool suppressDefaultLog, IImportConfigApiV1ConfigsImportPostApiResponse apiResponseLocalVar, ImportConfigForm importConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="importConfigForm"></param>
        private void OnErrorImportConfigApiV1ConfigsImportPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ImportConfigForm importConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorImportConfigApiV1ConfigsImportPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, importConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="importConfigForm"></param>
        partial void OnErrorImportConfigApiV1ConfigsImportPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ImportConfigForm importConfigForm);

        /// <summary>
        /// Import Config 
        /// </summary>
        /// <param name="importConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportConfigApiV1ConfigsImportPostApiResponse"/>&gt;</returns>
        public async Task<IImportConfigApiV1ConfigsImportPostApiResponse?> ImportConfigApiV1ConfigsImportPostOrDefaultAsync(ImportConfigForm importConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ImportConfigApiV1ConfigsImportPostAsync(importConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Import Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="importConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportConfigApiV1ConfigsImportPostApiResponse"/>&gt;</returns>
        public async Task<IImportConfigApiV1ConfigsImportPostApiResponse> ImportConfigApiV1ConfigsImportPostAsync(ImportConfigForm importConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateImportConfigApiV1ConfigsImportPost(importConfigForm);

                FormatImportConfigApiV1ConfigsImportPost(importConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/import"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/import");

                    httpRequestMessageLocalVar.Content = (importConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(importConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ImportConfigApiV1ConfigsImportPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ImportConfigApiV1ConfigsImportPostApiResponse>();

                        ImportConfigApiV1ConfigsImportPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/import", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterImportConfigApiV1ConfigsImportPostDefaultImplementation(apiResponseLocalVar, importConfigForm);

                        Events.ExecuteOnImportConfigApiV1ConfigsImportPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorImportConfigApiV1ConfigsImportPostDefaultImplementation(e, "/api/v1/configs/import", uriBuilderLocalVar.Path, importConfigForm);
                Events.ExecuteOnErrorImportConfigApiV1ConfigsImportPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ImportConfigApiV1ConfigsImportPostApiResponse"/>
        /// </summary>
        public partial class ImportConfigApiV1ConfigsImportPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IImportConfigApiV1ConfigsImportPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ImportConfigApiV1ConfigsImportPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ImportConfigApiV1ConfigsImportPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ImportConfigApiV1ConfigsImportPostApiResponse(ILogger<ImportConfigApiV1ConfigsImportPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetBannersApiV1ConfigsBannersPost(SetBannersForm setBannersForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="setBannersForm"></param>
        /// <returns></returns>
        private void ValidateSetBannersApiV1ConfigsBannersPost(SetBannersForm setBannersForm)
        {
            if (setBannersForm == null)
                throw new ArgumentNullException(nameof(setBannersForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="setBannersForm"></param>
        private void AfterSetBannersApiV1ConfigsBannersPostDefaultImplementation(ISetBannersApiV1ConfigsBannersPostApiResponse apiResponseLocalVar, SetBannersForm setBannersForm)
        {
            bool suppressDefaultLog = false;
            AfterSetBannersApiV1ConfigsBannersPost(ref suppressDefaultLog, apiResponseLocalVar, setBannersForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="setBannersForm"></param>
        partial void AfterSetBannersApiV1ConfigsBannersPost(ref bool suppressDefaultLog, ISetBannersApiV1ConfigsBannersPostApiResponse apiResponseLocalVar, SetBannersForm setBannersForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="setBannersForm"></param>
        private void OnErrorSetBannersApiV1ConfigsBannersPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SetBannersForm setBannersForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetBannersApiV1ConfigsBannersPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, setBannersForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="setBannersForm"></param>
        partial void OnErrorSetBannersApiV1ConfigsBannersPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SetBannersForm setBannersForm);

        /// <summary>
        /// Set Banners 
        /// </summary>
        /// <param name="setBannersForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetBannersApiV1ConfigsBannersPostApiResponse"/>&gt;</returns>
        public async Task<ISetBannersApiV1ConfigsBannersPostApiResponse?> SetBannersApiV1ConfigsBannersPostOrDefaultAsync(SetBannersForm setBannersForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetBannersApiV1ConfigsBannersPostAsync(setBannersForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set Banners 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="setBannersForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetBannersApiV1ConfigsBannersPostApiResponse"/>&gt;</returns>
        public async Task<ISetBannersApiV1ConfigsBannersPostApiResponse> SetBannersApiV1ConfigsBannersPostAsync(SetBannersForm setBannersForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetBannersApiV1ConfigsBannersPost(setBannersForm);

                FormatSetBannersApiV1ConfigsBannersPost(setBannersForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/banners"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/banners");

                    httpRequestMessageLocalVar.Content = (setBannersForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(setBannersForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetBannersApiV1ConfigsBannersPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetBannersApiV1ConfigsBannersPostApiResponse>();

                        SetBannersApiV1ConfigsBannersPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/banners", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetBannersApiV1ConfigsBannersPostDefaultImplementation(apiResponseLocalVar, setBannersForm);

                        Events.ExecuteOnSetBannersApiV1ConfigsBannersPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetBannersApiV1ConfigsBannersPostDefaultImplementation(e, "/api/v1/configs/banners", uriBuilderLocalVar.Path, setBannersForm);
                Events.ExecuteOnErrorSetBannersApiV1ConfigsBannersPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetBannersApiV1ConfigsBannersPostApiResponse"/>
        /// </summary>
        public partial class SetBannersApiV1ConfigsBannersPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISetBannersApiV1ConfigsBannersPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetBannersApiV1ConfigsBannersPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetBannersApiV1ConfigsBannersPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetBannersApiV1ConfigsBannersPostApiResponse(ILogger<SetBannersApiV1ConfigsBannersPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<BannerModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<BannerModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<BannerModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(CodeInterpreterConfigForm codeInterpreterConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="codeInterpreterConfigForm"></param>
        /// <returns></returns>
        private void ValidateSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(CodeInterpreterConfigForm codeInterpreterConfigForm)
        {
            if (codeInterpreterConfigForm == null)
                throw new ArgumentNullException(nameof(codeInterpreterConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="codeInterpreterConfigForm"></param>
        private void AfterSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostDefaultImplementation(ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse apiResponseLocalVar, CodeInterpreterConfigForm codeInterpreterConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(ref suppressDefaultLog, apiResponseLocalVar, codeInterpreterConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="codeInterpreterConfigForm"></param>
        partial void AfterSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(ref bool suppressDefaultLog, ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse apiResponseLocalVar, CodeInterpreterConfigForm codeInterpreterConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="codeInterpreterConfigForm"></param>
        private void OnErrorSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CodeInterpreterConfigForm codeInterpreterConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, codeInterpreterConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="codeInterpreterConfigForm"></param>
        partial void OnErrorSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CodeInterpreterConfigForm codeInterpreterConfigForm);

        /// <summary>
        /// Set Code Execution Config 
        /// </summary>
        /// <param name="codeInterpreterConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse"/>&gt;</returns>
        public async Task<ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse?> SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostOrDefaultAsync(CodeInterpreterConfigForm codeInterpreterConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostAsync(codeInterpreterConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set Code Execution Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeInterpreterConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse"/>&gt;</returns>
        public async Task<ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse> SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostAsync(CodeInterpreterConfigForm codeInterpreterConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(codeInterpreterConfigForm);

                FormatSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(codeInterpreterConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/code_execution"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/code_execution");

                    httpRequestMessageLocalVar.Content = (codeInterpreterConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(codeInterpreterConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse>();

                        SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/code_execution", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostDefaultImplementation(apiResponseLocalVar, codeInterpreterConfigForm);

                        Events.ExecuteOnSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostDefaultImplementation(e, "/api/v1/configs/code_execution", uriBuilderLocalVar.Path, codeInterpreterConfigForm);
                Events.ExecuteOnErrorSetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse"/>
        /// </summary>
        public partial class SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse(ILogger<SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.CodeInterpreterConfigForm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.CodeInterpreterConfigForm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.CodeInterpreterConfigForm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(SetDefaultSuggestionsForm setDefaultSuggestionsForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="setDefaultSuggestionsForm"></param>
        /// <returns></returns>
        private void ValidateSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(SetDefaultSuggestionsForm setDefaultSuggestionsForm)
        {
            if (setDefaultSuggestionsForm == null)
                throw new ArgumentNullException(nameof(setDefaultSuggestionsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="setDefaultSuggestionsForm"></param>
        private void AfterSetDefaultSuggestionsApiV1ConfigsSuggestionsPostDefaultImplementation(ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse apiResponseLocalVar, SetDefaultSuggestionsForm setDefaultSuggestionsForm)
        {
            bool suppressDefaultLog = false;
            AfterSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(ref suppressDefaultLog, apiResponseLocalVar, setDefaultSuggestionsForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="setDefaultSuggestionsForm"></param>
        partial void AfterSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(ref bool suppressDefaultLog, ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse apiResponseLocalVar, SetDefaultSuggestionsForm setDefaultSuggestionsForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="setDefaultSuggestionsForm"></param>
        private void OnErrorSetDefaultSuggestionsApiV1ConfigsSuggestionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SetDefaultSuggestionsForm setDefaultSuggestionsForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, setDefaultSuggestionsForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="setDefaultSuggestionsForm"></param>
        partial void OnErrorSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SetDefaultSuggestionsForm setDefaultSuggestionsForm);

        /// <summary>
        /// Set Default Suggestions 
        /// </summary>
        /// <param name="setDefaultSuggestionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse"/>&gt;</returns>
        public async Task<ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse?> SetDefaultSuggestionsApiV1ConfigsSuggestionsPostOrDefaultAsync(SetDefaultSuggestionsForm setDefaultSuggestionsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetDefaultSuggestionsApiV1ConfigsSuggestionsPostAsync(setDefaultSuggestionsForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set Default Suggestions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="setDefaultSuggestionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse"/>&gt;</returns>
        public async Task<ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse> SetDefaultSuggestionsApiV1ConfigsSuggestionsPostAsync(SetDefaultSuggestionsForm setDefaultSuggestionsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(setDefaultSuggestionsForm);

                FormatSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(setDefaultSuggestionsForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/suggestions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/suggestions");

                    httpRequestMessageLocalVar.Content = (setDefaultSuggestionsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(setDefaultSuggestionsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse>();

                        SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/suggestions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetDefaultSuggestionsApiV1ConfigsSuggestionsPostDefaultImplementation(apiResponseLocalVar, setDefaultSuggestionsForm);

                        Events.ExecuteOnSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetDefaultSuggestionsApiV1ConfigsSuggestionsPostDefaultImplementation(e, "/api/v1/configs/suggestions", uriBuilderLocalVar.Path, setDefaultSuggestionsForm);
                Events.ExecuteOnErrorSetDefaultSuggestionsApiV1ConfigsSuggestionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse"/>
        /// </summary>
        public partial class SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse(ILogger<SetDefaultSuggestionsApiV1ConfigsSuggestionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PromptSuggestion>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PromptSuggestion>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PromptSuggestion>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(DirectConnectionsConfigForm directConnectionsConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="directConnectionsConfigForm"></param>
        /// <returns></returns>
        private void ValidateSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(DirectConnectionsConfigForm directConnectionsConfigForm)
        {
            if (directConnectionsConfigForm == null)
                throw new ArgumentNullException(nameof(directConnectionsConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="directConnectionsConfigForm"></param>
        private void AfterSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostDefaultImplementation(ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse apiResponseLocalVar, DirectConnectionsConfigForm directConnectionsConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(ref suppressDefaultLog, apiResponseLocalVar, directConnectionsConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="directConnectionsConfigForm"></param>
        partial void AfterSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(ref bool suppressDefaultLog, ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse apiResponseLocalVar, DirectConnectionsConfigForm directConnectionsConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="directConnectionsConfigForm"></param>
        private void OnErrorSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DirectConnectionsConfigForm directConnectionsConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, directConnectionsConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="directConnectionsConfigForm"></param>
        partial void OnErrorSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DirectConnectionsConfigForm directConnectionsConfigForm);

        /// <summary>
        /// Set Direct Connections Config 
        /// </summary>
        /// <param name="directConnectionsConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse"/>&gt;</returns>
        public async Task<ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse?> SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostOrDefaultAsync(DirectConnectionsConfigForm directConnectionsConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostAsync(directConnectionsConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set Direct Connections Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="directConnectionsConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse"/>&gt;</returns>
        public async Task<ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse> SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostAsync(DirectConnectionsConfigForm directConnectionsConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(directConnectionsConfigForm);

                FormatSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(directConnectionsConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/direct_connections"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/direct_connections");

                    httpRequestMessageLocalVar.Content = (directConnectionsConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(directConnectionsConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse>();

                        SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/direct_connections", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostDefaultImplementation(apiResponseLocalVar, directConnectionsConfigForm);

                        Events.ExecuteOnSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostDefaultImplementation(e, "/api/v1/configs/direct_connections", uriBuilderLocalVar.Path, directConnectionsConfigForm);
                Events.ExecuteOnErrorSetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse"/>
        /// </summary>
        public partial class SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse(ILogger<SetDirectConnectionsConfigApiV1ConfigsDirectConnectionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.DirectConnectionsConfigForm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.DirectConnectionsConfigForm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.DirectConnectionsConfigForm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetModelsConfigApiV1ConfigsModelsPost(ModelsConfigForm modelsConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelsConfigForm"></param>
        /// <returns></returns>
        private void ValidateSetModelsConfigApiV1ConfigsModelsPost(ModelsConfigForm modelsConfigForm)
        {
            if (modelsConfigForm == null)
                throw new ArgumentNullException(nameof(modelsConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelsConfigForm"></param>
        private void AfterSetModelsConfigApiV1ConfigsModelsPostDefaultImplementation(ISetModelsConfigApiV1ConfigsModelsPostApiResponse apiResponseLocalVar, ModelsConfigForm modelsConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterSetModelsConfigApiV1ConfigsModelsPost(ref suppressDefaultLog, apiResponseLocalVar, modelsConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelsConfigForm"></param>
        partial void AfterSetModelsConfigApiV1ConfigsModelsPost(ref bool suppressDefaultLog, ISetModelsConfigApiV1ConfigsModelsPostApiResponse apiResponseLocalVar, ModelsConfigForm modelsConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelsConfigForm"></param>
        private void OnErrorSetModelsConfigApiV1ConfigsModelsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelsConfigForm modelsConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetModelsConfigApiV1ConfigsModelsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, modelsConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelsConfigForm"></param>
        partial void OnErrorSetModelsConfigApiV1ConfigsModelsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelsConfigForm modelsConfigForm);

        /// <summary>
        /// Set Models Config 
        /// </summary>
        /// <param name="modelsConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetModelsConfigApiV1ConfigsModelsPostApiResponse"/>&gt;</returns>
        public async Task<ISetModelsConfigApiV1ConfigsModelsPostApiResponse?> SetModelsConfigApiV1ConfigsModelsPostOrDefaultAsync(ModelsConfigForm modelsConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetModelsConfigApiV1ConfigsModelsPostAsync(modelsConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set Models Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelsConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetModelsConfigApiV1ConfigsModelsPostApiResponse"/>&gt;</returns>
        public async Task<ISetModelsConfigApiV1ConfigsModelsPostApiResponse> SetModelsConfigApiV1ConfigsModelsPostAsync(ModelsConfigForm modelsConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetModelsConfigApiV1ConfigsModelsPost(modelsConfigForm);

                FormatSetModelsConfigApiV1ConfigsModelsPost(modelsConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/models"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/models");

                    httpRequestMessageLocalVar.Content = (modelsConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelsConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetModelsConfigApiV1ConfigsModelsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetModelsConfigApiV1ConfigsModelsPostApiResponse>();

                        SetModelsConfigApiV1ConfigsModelsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/models", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetModelsConfigApiV1ConfigsModelsPostDefaultImplementation(apiResponseLocalVar, modelsConfigForm);

                        Events.ExecuteOnSetModelsConfigApiV1ConfigsModelsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetModelsConfigApiV1ConfigsModelsPostDefaultImplementation(e, "/api/v1/configs/models", uriBuilderLocalVar.Path, modelsConfigForm);
                Events.ExecuteOnErrorSetModelsConfigApiV1ConfigsModelsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetModelsConfigApiV1ConfigsModelsPostApiResponse"/>
        /// </summary>
        public partial class SetModelsConfigApiV1ConfigsModelsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISetModelsConfigApiV1ConfigsModelsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetModelsConfigApiV1ConfigsModelsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetModelsConfigApiV1ConfigsModelsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetModelsConfigApiV1ConfigsModelsPostApiResponse(ILogger<SetModelsConfigApiV1ConfigsModelsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ModelsConfigForm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ModelsConfigForm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ModelsConfigForm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetToolServersConfigApiV1ConfigsToolServersPost(ToolServersConfigForm toolServersConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="toolServersConfigForm"></param>
        /// <returns></returns>
        private void ValidateSetToolServersConfigApiV1ConfigsToolServersPost(ToolServersConfigForm toolServersConfigForm)
        {
            if (toolServersConfigForm == null)
                throw new ArgumentNullException(nameof(toolServersConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="toolServersConfigForm"></param>
        private void AfterSetToolServersConfigApiV1ConfigsToolServersPostDefaultImplementation(ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse apiResponseLocalVar, ToolServersConfigForm toolServersConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterSetToolServersConfigApiV1ConfigsToolServersPost(ref suppressDefaultLog, apiResponseLocalVar, toolServersConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="toolServersConfigForm"></param>
        partial void AfterSetToolServersConfigApiV1ConfigsToolServersPost(ref bool suppressDefaultLog, ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse apiResponseLocalVar, ToolServersConfigForm toolServersConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="toolServersConfigForm"></param>
        private void OnErrorSetToolServersConfigApiV1ConfigsToolServersPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ToolServersConfigForm toolServersConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetToolServersConfigApiV1ConfigsToolServersPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, toolServersConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="toolServersConfigForm"></param>
        partial void OnErrorSetToolServersConfigApiV1ConfigsToolServersPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ToolServersConfigForm toolServersConfigForm);

        /// <summary>
        /// Set Tool Servers Config 
        /// </summary>
        /// <param name="toolServersConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse"/>&gt;</returns>
        public async Task<ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse?> SetToolServersConfigApiV1ConfigsToolServersPostOrDefaultAsync(ToolServersConfigForm toolServersConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetToolServersConfigApiV1ConfigsToolServersPostAsync(toolServersConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set Tool Servers Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolServersConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse"/>&gt;</returns>
        public async Task<ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse> SetToolServersConfigApiV1ConfigsToolServersPostAsync(ToolServersConfigForm toolServersConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetToolServersConfigApiV1ConfigsToolServersPost(toolServersConfigForm);

                FormatSetToolServersConfigApiV1ConfigsToolServersPost(toolServersConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/tool_servers"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/tool_servers");

                    httpRequestMessageLocalVar.Content = (toolServersConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(toolServersConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetToolServersConfigApiV1ConfigsToolServersPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetToolServersConfigApiV1ConfigsToolServersPostApiResponse>();

                        SetToolServersConfigApiV1ConfigsToolServersPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/tool_servers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetToolServersConfigApiV1ConfigsToolServersPostDefaultImplementation(apiResponseLocalVar, toolServersConfigForm);

                        Events.ExecuteOnSetToolServersConfigApiV1ConfigsToolServersPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetToolServersConfigApiV1ConfigsToolServersPostDefaultImplementation(e, "/api/v1/configs/tool_servers", uriBuilderLocalVar.Path, toolServersConfigForm);
                Events.ExecuteOnErrorSetToolServersConfigApiV1ConfigsToolServersPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetToolServersConfigApiV1ConfigsToolServersPostApiResponse"/>
        /// </summary>
        public partial class SetToolServersConfigApiV1ConfigsToolServersPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISetToolServersConfigApiV1ConfigsToolServersPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetToolServersConfigApiV1ConfigsToolServersPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetToolServersConfigApiV1ConfigsToolServersPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetToolServersConfigApiV1ConfigsToolServersPostApiResponse(ILogger<SetToolServersConfigApiV1ConfigsToolServersPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ToolServersConfigForm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ToolServersConfigForm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ToolServersConfigForm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(ToolServerConnection toolServerConnection);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="toolServerConnection"></param>
        /// <returns></returns>
        private void ValidateVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(ToolServerConnection toolServerConnection)
        {
            if (toolServerConnection == null)
                throw new ArgumentNullException(nameof(toolServerConnection));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="toolServerConnection"></param>
        private void AfterVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostDefaultImplementation(IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse apiResponseLocalVar, ToolServerConnection toolServerConnection)
        {
            bool suppressDefaultLog = false;
            AfterVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(ref suppressDefaultLog, apiResponseLocalVar, toolServerConnection);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="toolServerConnection"></param>
        partial void AfterVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(ref bool suppressDefaultLog, IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse apiResponseLocalVar, ToolServerConnection toolServerConnection);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="toolServerConnection"></param>
        private void OnErrorVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ToolServerConnection toolServerConnection)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, toolServerConnection);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="toolServerConnection"></param>
        partial void OnErrorVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ToolServerConnection toolServerConnection);

        /// <summary>
        /// Verify Tool Servers Config Verify the connection to the tool server.
        /// </summary>
        /// <param name="toolServerConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse"/>&gt;</returns>
        public async Task<IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse?> VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostOrDefaultAsync(ToolServerConnection toolServerConnection, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostAsync(toolServerConnection, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verify Tool Servers Config Verify the connection to the tool server.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="toolServerConnection"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse"/>&gt;</returns>
        public async Task<IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse> VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostAsync(ToolServerConnection toolServerConnection, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(toolServerConnection);

                FormatVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(toolServerConnection);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/configs/tool_servers/verify"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/configs/tool_servers/verify");

                    httpRequestMessageLocalVar.Content = (toolServerConnection as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(toolServerConnection, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse>();

                        VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/configs/tool_servers/verify", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostDefaultImplementation(apiResponseLocalVar, toolServerConnection);

                        Events.ExecuteOnVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostDefaultImplementation(e, "/api/v1/configs/tool_servers/verify", uriBuilderLocalVar.Path, toolServerConnection);
                Events.ExecuteOnErrorVerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse"/>
        /// </summary>
        public partial class VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse(ILogger<VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
