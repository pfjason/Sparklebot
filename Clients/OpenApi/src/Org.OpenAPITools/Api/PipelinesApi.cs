// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPipelinesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PipelinesApiEvents Events { get; }

        /// <summary>
        /// Add Pipeline
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPipelineForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddPipelineApiV1PipelinesAddPostApiResponse"/>&gt;</returns>
        Task<IAddPipelineApiV1PipelinesAddPostApiResponse> AddPipelineApiV1PipelinesAddPostAsync(AddPipelineForm addPipelineForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Pipeline
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="addPipelineForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddPipelineApiV1PipelinesAddPostApiResponse"/>?&gt;</returns>
        Task<IAddPipelineApiV1PipelinesAddPostApiResponse?> AddPipelineApiV1PipelinesAddPostOrDefaultAsync(AddPipelineForm addPipelineForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Pipeline
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePipelineForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse"/>&gt;</returns>
        Task<IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse> DeletePipelineApiV1PipelinesDeleteDeleteAsync(DeletePipelineForm deletePipelineForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Pipeline
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="deletePipelineForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse"/>?&gt;</returns>
        Task<IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse?> DeletePipelineApiV1PipelinesDeleteDeleteOrDefaultAsync(DeletePipelineForm deletePipelineForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pipeline Valves
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse"/>&gt;</returns>
        Task<IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse> GetPipelineValvesApiV1PipelinesPipelineIdValvesGetAsync(string pipelineId, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pipeline Valves
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse"/>?&gt;</returns>
        Task<IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse?> GetPipelineValvesApiV1PipelinesPipelineIdValvesGetOrDefaultAsync(string pipelineId, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pipeline Valves Spec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse"/>&gt;</returns>
        Task<IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse> GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetAsync(string pipelineId, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pipeline Valves Spec
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse"/>?&gt;</returns>
        Task<IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse?> GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetOrDefaultAsync(string pipelineId, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pipelines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesApiV1PipelinesGetApiResponse"/>&gt;</returns>
        Task<IGetPipelinesApiV1PipelinesGetApiResponse> GetPipelinesApiV1PipelinesGetAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pipelines
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesApiV1PipelinesGetApiResponse"/>?&gt;</returns>
        Task<IGetPipelinesApiV1PipelinesGetApiResponse?> GetPipelinesApiV1PipelinesGetOrDefaultAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pipelines List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesListApiV1PipelinesListGetApiResponse"/>&gt;</returns>
        Task<IGetPipelinesListApiV1PipelinesListGetApiResponse> GetPipelinesListApiV1PipelinesListGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pipelines List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesListApiV1PipelinesListGetApiResponse"/>?&gt;</returns>
        Task<IGetPipelinesListApiV1PipelinesListGetApiResponse?> GetPipelinesListApiV1PipelinesListGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Pipeline Valves
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse> UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostAsync(string pipelineId, Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Pipeline Valves
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse?> UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostOrDefaultAsync(string pipelineId, Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Pipeline
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadPipelineApiV1PipelinesUploadPostApiResponse"/>&gt;</returns>
        Task<IUploadPipelineApiV1PipelinesUploadPostApiResponse> UploadPipelineApiV1PipelinesUploadPostAsync(int urlIdx, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Pipeline
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadPipelineApiV1PipelinesUploadPostApiResponse"/>?&gt;</returns>
        Task<IUploadPipelineApiV1PipelinesUploadPostApiResponse?> UploadPipelineApiV1PipelinesUploadPostOrDefaultAsync(int urlIdx, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddPipelineApiV1PipelinesAddPostApiResponse"/>
    /// </summary>
    public interface IAddPipelineApiV1PipelinesAddPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse"/>
    /// </summary>
    public interface IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse"/>
    /// </summary>
    public interface IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse"/>
    /// </summary>
    public interface IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelinesApiV1PipelinesGetApiResponse"/>
    /// </summary>
    public interface IGetPipelinesApiV1PipelinesGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelinesListApiV1PipelinesListGetApiResponse"/>
    /// </summary>
    public interface IGetPipelinesListApiV1PipelinesListGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUploadPipelineApiV1PipelinesUploadPostApiResponse"/>
    /// </summary>
    public interface IUploadPipelineApiV1PipelinesUploadPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PipelinesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddPipelineApiV1PipelinesAddPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddPipelineApiV1PipelinesAddPost;

        internal void ExecuteOnAddPipelineApiV1PipelinesAddPost(PipelinesApi.AddPipelineApiV1PipelinesAddPostApiResponse apiResponse)
        {
            OnAddPipelineApiV1PipelinesAddPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddPipelineApiV1PipelinesAddPost(Exception exception)
        {
            OnErrorAddPipelineApiV1PipelinesAddPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePipelineApiV1PipelinesDeleteDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePipelineApiV1PipelinesDeleteDelete;

        internal void ExecuteOnDeletePipelineApiV1PipelinesDeleteDelete(PipelinesApi.DeletePipelineApiV1PipelinesDeleteDeleteApiResponse apiResponse)
        {
            OnDeletePipelineApiV1PipelinesDeleteDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePipelineApiV1PipelinesDeleteDelete(Exception exception)
        {
            OnErrorDeletePipelineApiV1PipelinesDeleteDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineValvesApiV1PipelinesPipelineIdValvesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineValvesApiV1PipelinesPipelineIdValvesGet;

        internal void ExecuteOnGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(PipelinesApi.GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse apiResponse)
        {
            OnGetPipelineValvesApiV1PipelinesPipelineIdValvesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(Exception exception)
        {
            OnErrorGetPipelineValvesApiV1PipelinesPipelineIdValvesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet;

        internal void ExecuteOnGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(PipelinesApi.GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse apiResponse)
        {
            OnGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(Exception exception)
        {
            OnErrorGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelinesApiV1PipelinesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelinesApiV1PipelinesGet;

        internal void ExecuteOnGetPipelinesApiV1PipelinesGet(PipelinesApi.GetPipelinesApiV1PipelinesGetApiResponse apiResponse)
        {
            OnGetPipelinesApiV1PipelinesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelinesApiV1PipelinesGet(Exception exception)
        {
            OnErrorGetPipelinesApiV1PipelinesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelinesListApiV1PipelinesListGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelinesListApiV1PipelinesListGet;

        internal void ExecuteOnGetPipelinesListApiV1PipelinesListGet(PipelinesApi.GetPipelinesListApiV1PipelinesListGetApiResponse apiResponse)
        {
            OnGetPipelinesListApiV1PipelinesListGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelinesListApiV1PipelinesListGet(Exception exception)
        {
            OnErrorGetPipelinesListApiV1PipelinesListGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost;

        internal void ExecuteOnUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(PipelinesApi.UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse apiResponse)
        {
            OnUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(Exception exception)
        {
            OnErrorUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadPipelineApiV1PipelinesUploadPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadPipelineApiV1PipelinesUploadPost;

        internal void ExecuteOnUploadPipelineApiV1PipelinesUploadPost(PipelinesApi.UploadPipelineApiV1PipelinesUploadPostApiResponse apiResponse)
        {
            OnUploadPipelineApiV1PipelinesUploadPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadPipelineApiV1PipelinesUploadPost(Exception exception)
        {
            OnErrorUploadPipelineApiV1PipelinesUploadPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PipelinesApi : IPipelinesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PipelinesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PipelinesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PipelinesApi(ILogger<PipelinesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PipelinesApiEvents pipelinesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PipelinesApi>();
            HttpClient = httpClient;
            Events = pipelinesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAddPipelineApiV1PipelinesAddPost(AddPipelineForm addPipelineForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addPipelineForm"></param>
        /// <returns></returns>
        private void ValidateAddPipelineApiV1PipelinesAddPost(AddPipelineForm addPipelineForm)
        {
            if (addPipelineForm == null)
                throw new ArgumentNullException(nameof(addPipelineForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addPipelineForm"></param>
        private void AfterAddPipelineApiV1PipelinesAddPostDefaultImplementation(IAddPipelineApiV1PipelinesAddPostApiResponse apiResponseLocalVar, AddPipelineForm addPipelineForm)
        {
            bool suppressDefaultLog = false;
            AfterAddPipelineApiV1PipelinesAddPost(ref suppressDefaultLog, apiResponseLocalVar, addPipelineForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addPipelineForm"></param>
        partial void AfterAddPipelineApiV1PipelinesAddPost(ref bool suppressDefaultLog, IAddPipelineApiV1PipelinesAddPostApiResponse apiResponseLocalVar, AddPipelineForm addPipelineForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addPipelineForm"></param>
        private void OnErrorAddPipelineApiV1PipelinesAddPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddPipelineForm addPipelineForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddPipelineApiV1PipelinesAddPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addPipelineForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addPipelineForm"></param>
        partial void OnErrorAddPipelineApiV1PipelinesAddPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddPipelineForm addPipelineForm);

        /// <summary>
        /// Add Pipeline 
        /// </summary>
        /// <param name="addPipelineForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddPipelineApiV1PipelinesAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddPipelineApiV1PipelinesAddPostApiResponse?> AddPipelineApiV1PipelinesAddPostOrDefaultAsync(AddPipelineForm addPipelineForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddPipelineApiV1PipelinesAddPostAsync(addPipelineForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Pipeline 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPipelineForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddPipelineApiV1PipelinesAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddPipelineApiV1PipelinesAddPostApiResponse> AddPipelineApiV1PipelinesAddPostAsync(AddPipelineForm addPipelineForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddPipelineApiV1PipelinesAddPost(addPipelineForm);

                FormatAddPipelineApiV1PipelinesAddPost(addPipelineForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pipelines/add"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pipelines/add");

                    httpRequestMessageLocalVar.Content = (addPipelineForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addPipelineForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddPipelineApiV1PipelinesAddPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddPipelineApiV1PipelinesAddPostApiResponse>();

                        AddPipelineApiV1PipelinesAddPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pipelines/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddPipelineApiV1PipelinesAddPostDefaultImplementation(apiResponseLocalVar, addPipelineForm);

                        Events.ExecuteOnAddPipelineApiV1PipelinesAddPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddPipelineApiV1PipelinesAddPostDefaultImplementation(e, "/api/v1/pipelines/add", uriBuilderLocalVar.Path, addPipelineForm);
                Events.ExecuteOnErrorAddPipelineApiV1PipelinesAddPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddPipelineApiV1PipelinesAddPostApiResponse"/>
        /// </summary>
        public partial class AddPipelineApiV1PipelinesAddPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IAddPipelineApiV1PipelinesAddPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddPipelineApiV1PipelinesAddPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddPipelineApiV1PipelinesAddPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddPipelineApiV1PipelinesAddPostApiResponse(ILogger<AddPipelineApiV1PipelinesAddPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePipelineApiV1PipelinesDeleteDelete(DeletePipelineForm deletePipelineForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="deletePipelineForm"></param>
        /// <returns></returns>
        private void ValidateDeletePipelineApiV1PipelinesDeleteDelete(DeletePipelineForm deletePipelineForm)
        {
            if (deletePipelineForm == null)
                throw new ArgumentNullException(nameof(deletePipelineForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deletePipelineForm"></param>
        private void AfterDeletePipelineApiV1PipelinesDeleteDeleteDefaultImplementation(IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse apiResponseLocalVar, DeletePipelineForm deletePipelineForm)
        {
            bool suppressDefaultLog = false;
            AfterDeletePipelineApiV1PipelinesDeleteDelete(ref suppressDefaultLog, apiResponseLocalVar, deletePipelineForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deletePipelineForm"></param>
        partial void AfterDeletePipelineApiV1PipelinesDeleteDelete(ref bool suppressDefaultLog, IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse apiResponseLocalVar, DeletePipelineForm deletePipelineForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="deletePipelineForm"></param>
        private void OnErrorDeletePipelineApiV1PipelinesDeleteDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DeletePipelineForm deletePipelineForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePipelineApiV1PipelinesDeleteDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, deletePipelineForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="deletePipelineForm"></param>
        partial void OnErrorDeletePipelineApiV1PipelinesDeleteDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DeletePipelineForm deletePipelineForm);

        /// <summary>
        /// Delete Pipeline 
        /// </summary>
        /// <param name="deletePipelineForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse?> DeletePipelineApiV1PipelinesDeleteDeleteOrDefaultAsync(DeletePipelineForm deletePipelineForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePipelineApiV1PipelinesDeleteDeleteAsync(deletePipelineForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Pipeline 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePipelineForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse> DeletePipelineApiV1PipelinesDeleteDeleteAsync(DeletePipelineForm deletePipelineForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePipelineApiV1PipelinesDeleteDelete(deletePipelineForm);

                FormatDeletePipelineApiV1PipelinesDeleteDelete(deletePipelineForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pipelines/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pipelines/delete");

                    httpRequestMessageLocalVar.Content = (deletePipelineForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(deletePipelineForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePipelineApiV1PipelinesDeleteDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePipelineApiV1PipelinesDeleteDeleteApiResponse>();

                        DeletePipelineApiV1PipelinesDeleteDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pipelines/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePipelineApiV1PipelinesDeleteDeleteDefaultImplementation(apiResponseLocalVar, deletePipelineForm);

                        Events.ExecuteOnDeletePipelineApiV1PipelinesDeleteDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePipelineApiV1PipelinesDeleteDeleteDefaultImplementation(e, "/api/v1/pipelines/delete", uriBuilderLocalVar.Path, deletePipelineForm);
                Events.ExecuteOnErrorDeletePipelineApiV1PipelinesDeleteDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePipelineApiV1PipelinesDeleteDeleteApiResponse"/>
        /// </summary>
        public partial class DeletePipelineApiV1PipelinesDeleteDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeletePipelineApiV1PipelinesDeleteDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePipelineApiV1PipelinesDeleteDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePipelineApiV1PipelinesDeleteDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePipelineApiV1PipelinesDeleteDeleteApiResponse(ILogger<DeletePipelineApiV1PipelinesDeleteDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(ref string pipelineId, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pipelineId"></param>
        /// <returns></returns>
        private void ValidateGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(string pipelineId)
        {
            if (pipelineId == null)
                throw new ArgumentNullException(nameof(pipelineId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetPipelineValvesApiV1PipelinesPipelineIdValvesGetDefaultImplementation(IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse apiResponseLocalVar, string pipelineId, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(ref suppressDefaultLog, apiResponseLocalVar, pipelineId, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(ref bool suppressDefaultLog, IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse apiResponseLocalVar, string pipelineId, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetPipelineValvesApiV1PipelinesPipelineIdValvesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pipelineId, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pipelineId, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pipelineId, int? urlIdx);

        /// <summary>
        /// Get Pipeline Valves 
        /// </summary>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse?> GetPipelineValvesApiV1PipelinesPipelineIdValvesGetOrDefaultAsync(string pipelineId, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineValvesApiV1PipelinesPipelineIdValvesGetAsync(pipelineId, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Pipeline Valves 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse> GetPipelineValvesApiV1PipelinesPipelineIdValvesGetAsync(string pipelineId, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(pipelineId);

                FormatGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(ref pipelineId, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pipelines/{pipeline_id}/valves"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pipelines/{pipeline_id}/valves");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline_id%7D", Uri.EscapeDataString(pipelineId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["urlIdx"] = ClientUtils.ParameterToString(urlIdx);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse>();

                        GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pipelines/{pipeline_id}/valves", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineValvesApiV1PipelinesPipelineIdValvesGetDefaultImplementation(apiResponseLocalVar, pipelineId, urlIdx);

                        Events.ExecuteOnGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineValvesApiV1PipelinesPipelineIdValvesGetDefaultImplementation(e, "/api/v1/pipelines/{pipeline_id}/valves", uriBuilderLocalVar.Path, pipelineId, urlIdx);
                Events.ExecuteOnErrorGetPipelineValvesApiV1PipelinesPipelineIdValvesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse"/>
        /// </summary>
        public partial class GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse(ILogger<GetPipelineValvesApiV1PipelinesPipelineIdValvesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(ref string pipelineId, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pipelineId"></param>
        /// <returns></returns>
        private void ValidateGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(string pipelineId)
        {
            if (pipelineId == null)
                throw new ArgumentNullException(nameof(pipelineId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetDefaultImplementation(IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse apiResponseLocalVar, string pipelineId, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(ref suppressDefaultLog, apiResponseLocalVar, pipelineId, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(ref bool suppressDefaultLog, IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse apiResponseLocalVar, string pipelineId, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pipelineId, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pipelineId, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pipelineId, int? urlIdx);

        /// <summary>
        /// Get Pipeline Valves Spec 
        /// </summary>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse?> GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetOrDefaultAsync(string pipelineId, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetAsync(pipelineId, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Pipeline Valves Spec 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipelineId"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse> GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetAsync(string pipelineId, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(pipelineId);

                FormatGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(ref pipelineId, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pipelines/{pipeline_id}/valves/spec"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pipelines/{pipeline_id}/valves/spec");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline_id%7D", Uri.EscapeDataString(pipelineId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["urlIdx"] = ClientUtils.ParameterToString(urlIdx);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse>();

                        GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pipelines/{pipeline_id}/valves/spec", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetDefaultImplementation(apiResponseLocalVar, pipelineId, urlIdx);

                        Events.ExecuteOnGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetDefaultImplementation(e, "/api/v1/pipelines/{pipeline_id}/valves/spec", uriBuilderLocalVar.Path, pipelineId, urlIdx);
                Events.ExecuteOnErrorGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse"/>
        /// </summary>
        public partial class GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse(ILogger<GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelinesApiV1PipelinesGet(ref Option<int?> urlIdx);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetPipelinesApiV1PipelinesGetDefaultImplementation(IGetPipelinesApiV1PipelinesGetApiResponse apiResponseLocalVar, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelinesApiV1PipelinesGet(ref suppressDefaultLog, apiResponseLocalVar, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetPipelinesApiV1PipelinesGet(ref bool suppressDefaultLog, IGetPipelinesApiV1PipelinesGetApiResponse apiResponseLocalVar, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetPipelinesApiV1PipelinesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelinesApiV1PipelinesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetPipelinesApiV1PipelinesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> urlIdx);

        /// <summary>
        /// Get Pipelines 
        /// </summary>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesApiV1PipelinesGetApiResponse"/>&gt;</returns>
        public async Task<IGetPipelinesApiV1PipelinesGetApiResponse?> GetPipelinesApiV1PipelinesGetOrDefaultAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelinesApiV1PipelinesGetAsync(urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Pipelines 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesApiV1PipelinesGetApiResponse"/>&gt;</returns>
        public async Task<IGetPipelinesApiV1PipelinesGetApiResponse> GetPipelinesApiV1PipelinesGetAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetPipelinesApiV1PipelinesGet(ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pipelines/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pipelines/");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["urlIdx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelinesApiV1PipelinesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelinesApiV1PipelinesGetApiResponse>();

                        GetPipelinesApiV1PipelinesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pipelines/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelinesApiV1PipelinesGetDefaultImplementation(apiResponseLocalVar, urlIdx);

                        Events.ExecuteOnGetPipelinesApiV1PipelinesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelinesApiV1PipelinesGetDefaultImplementation(e, "/api/v1/pipelines/", uriBuilderLocalVar.Path, urlIdx);
                Events.ExecuteOnErrorGetPipelinesApiV1PipelinesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelinesApiV1PipelinesGetApiResponse"/>
        /// </summary>
        public partial class GetPipelinesApiV1PipelinesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelinesApiV1PipelinesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelinesApiV1PipelinesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelinesApiV1PipelinesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelinesApiV1PipelinesGetApiResponse(ILogger<GetPipelinesApiV1PipelinesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPipelinesListApiV1PipelinesListGetDefaultImplementation(IGetPipelinesListApiV1PipelinesListGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelinesListApiV1PipelinesListGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPipelinesListApiV1PipelinesListGet(ref bool suppressDefaultLog, IGetPipelinesListApiV1PipelinesListGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetPipelinesListApiV1PipelinesListGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelinesListApiV1PipelinesListGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetPipelinesListApiV1PipelinesListGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Pipelines List 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesListApiV1PipelinesListGetApiResponse"/>&gt;</returns>
        public async Task<IGetPipelinesListApiV1PipelinesListGetApiResponse?> GetPipelinesListApiV1PipelinesListGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelinesListApiV1PipelinesListGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Pipelines List 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesListApiV1PipelinesListGetApiResponse"/>&gt;</returns>
        public async Task<IGetPipelinesListApiV1PipelinesListGetApiResponse> GetPipelinesListApiV1PipelinesListGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pipelines/list"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pipelines/list");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelinesListApiV1PipelinesListGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelinesListApiV1PipelinesListGetApiResponse>();

                        GetPipelinesListApiV1PipelinesListGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pipelines/list", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelinesListApiV1PipelinesListGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPipelinesListApiV1PipelinesListGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelinesListApiV1PipelinesListGetDefaultImplementation(e, "/api/v1/pipelines/list", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPipelinesListApiV1PipelinesListGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelinesListApiV1PipelinesListGetApiResponse"/>
        /// </summary>
        public partial class GetPipelinesListApiV1PipelinesListGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelinesListApiV1PipelinesListGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelinesListApiV1PipelinesListGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelinesListApiV1PipelinesListGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelinesListApiV1PipelinesListGetApiResponse(ILogger<GetPipelinesListApiV1PipelinesListGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(ref string pipelineId, ref Object body, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(string pipelineId, Object body)
        {
            if (pipelineId == null)
                throw new ArgumentNullException(nameof(pipelineId));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void AfterUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostDefaultImplementation(IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse apiResponseLocalVar, string pipelineId, Object body, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, pipelineId, body, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void AfterUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(ref bool suppressDefaultLog, IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse apiResponseLocalVar, string pipelineId, Object body, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pipelineId, Object body, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pipelineId, body, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string pipelineId, Object body, int? urlIdx);

        /// <summary>
        /// Update Pipeline Valves 
        /// </summary>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse?> UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostOrDefaultAsync(string pipelineId, Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostAsync(pipelineId, body, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Pipeline Valves 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pipelineId"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse> UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostAsync(string pipelineId, Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(pipelineId, body);

                FormatUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(ref pipelineId, ref body, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pipelines/{pipeline_id}/valves/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pipelines/{pipeline_id}/valves/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline_id%7D", Uri.EscapeDataString(pipelineId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["urlIdx"] = ClientUtils.ParameterToString(urlIdx);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse>();

                        UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pipelines/{pipeline_id}/valves/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostDefaultImplementation(apiResponseLocalVar, pipelineId, body, urlIdx);

                        Events.ExecuteOnUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostDefaultImplementation(e, "/api/v1/pipelines/{pipeline_id}/valves/update", uriBuilderLocalVar.Path, pipelineId, body, urlIdx);
                Events.ExecuteOnErrorUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse(ILogger<UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadPipelineApiV1PipelinesUploadPost(ref int urlIdx, ref System.IO.Stream file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateUploadPipelineApiV1PipelinesUploadPost(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="file"></param>
        private void AfterUploadPipelineApiV1PipelinesUploadPostDefaultImplementation(IUploadPipelineApiV1PipelinesUploadPostApiResponse apiResponseLocalVar, int urlIdx, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            AfterUploadPipelineApiV1PipelinesUploadPost(ref suppressDefaultLog, apiResponseLocalVar, urlIdx, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="file"></param>
        partial void AfterUploadPipelineApiV1PipelinesUploadPost(ref bool suppressDefaultLog, IUploadPipelineApiV1PipelinesUploadPostApiResponse apiResponseLocalVar, int urlIdx, System.IO.Stream file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="file"></param>
        private void OnErrorUploadPipelineApiV1PipelinesUploadPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int urlIdx, System.IO.Stream file)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadPipelineApiV1PipelinesUploadPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx, file);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="file"></param>
        partial void OnErrorUploadPipelineApiV1PipelinesUploadPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int urlIdx, System.IO.Stream file);

        /// <summary>
        /// Upload Pipeline 
        /// </summary>
        /// <param name="urlIdx"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadPipelineApiV1PipelinesUploadPostApiResponse"/>&gt;</returns>
        public async Task<IUploadPipelineApiV1PipelinesUploadPostApiResponse?> UploadPipelineApiV1PipelinesUploadPostOrDefaultAsync(int urlIdx, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadPipelineApiV1PipelinesUploadPostAsync(urlIdx, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload Pipeline 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="file"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadPipelineApiV1PipelinesUploadPostApiResponse"/>&gt;</returns>
        public async Task<IUploadPipelineApiV1PipelinesUploadPostApiResponse> UploadPipelineApiV1PipelinesUploadPostAsync(int urlIdx, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadPipelineApiV1PipelinesUploadPost(file);

                FormatUploadPipelineApiV1PipelinesUploadPost(ref urlIdx, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/pipelines/upload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/pipelines/upload");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("urlIdx", ClientUtils.ParameterToString(urlIdx)));

                    multipartContentLocalVar.Add(new StreamContent(file));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UploadPipelineApiV1PipelinesUploadPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadPipelineApiV1PipelinesUploadPostApiResponse>();

                        UploadPipelineApiV1PipelinesUploadPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/pipelines/upload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUploadPipelineApiV1PipelinesUploadPostDefaultImplementation(apiResponseLocalVar, urlIdx, file);

                        Events.ExecuteOnUploadPipelineApiV1PipelinesUploadPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadPipelineApiV1PipelinesUploadPostDefaultImplementation(e, "/api/v1/pipelines/upload", uriBuilderLocalVar.Path, urlIdx, file);
                Events.ExecuteOnErrorUploadPipelineApiV1PipelinesUploadPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadPipelineApiV1PipelinesUploadPostApiResponse"/>
        /// </summary>
        public partial class UploadPipelineApiV1PipelinesUploadPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUploadPipelineApiV1PipelinesUploadPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadPipelineApiV1PipelinesUploadPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadPipelineApiV1PipelinesUploadPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadPipelineApiV1PipelinesUploadPostApiResponse(ILogger<UploadPipelineApiV1PipelinesUploadPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
