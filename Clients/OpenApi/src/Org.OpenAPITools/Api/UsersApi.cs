// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUsersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UsersApiEvents Events { get; }

        /// <summary>
        /// Delete User By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse> DeleteUserByIdApiV1UsersUserIdDeleteAsync(string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete User By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse?> DeleteUserByIdApiV1UsersUserIdDeleteOrDefaultAsync(string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Active Users
        /// </summary>
        /// <remarks>
        /// Get a list of active users.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetActiveUsersApiV1UsersActiveGetApiResponse"/>&gt;</returns>
        Task<IGetActiveUsersApiV1UsersActiveGetApiResponse> GetActiveUsersApiV1UsersActiveGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Active Users
        /// </summary>
        /// <remarks>
        /// Get a list of active users.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetActiveUsersApiV1UsersActiveGetApiResponse"/>?&gt;</returns>
        Task<IGetActiveUsersApiV1UsersActiveGetApiResponse?> GetActiveUsersApiV1UsersActiveGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUsersApiV1UsersAllGetApiResponse"/>&gt;</returns>
        Task<IGetAllUsersApiV1UsersAllGetApiResponse> GetAllUsersApiV1UsersAllGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUsersApiV1UsersAllGetApiResponse"/>?&gt;</returns>
        Task<IGetAllUsersApiV1UsersAllGetApiResponse?> GetAllUsersApiV1UsersAllGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Default User Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse"/>&gt;</returns>
        Task<IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse> GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Default User Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse"/>?&gt;</returns>
        Task<IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse?> GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Active Status By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse"/>&gt;</returns>
        Task<IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse> GetUserActiveStatusByIdApiV1UsersUserIdActiveGetAsync(string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Active Status By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse"/>?&gt;</returns>
        Task<IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse?> GetUserActiveStatusByIdApiV1UsersUserIdActiveGetOrDefaultAsync(string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserByIdApiV1UsersUserIdGetApiResponse"/>&gt;</returns>
        Task<IGetUserByIdApiV1UsersUserIdGetApiResponse> GetUserByIdApiV1UsersUserIdGetAsync(string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserByIdApiV1UsersUserIdGetApiResponse"/>?&gt;</returns>
        Task<IGetUserByIdApiV1UsersUserIdGetApiResponse?> GetUserByIdApiV1UsersUserIdGetOrDefaultAsync(string userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupsApiV1UsersGroupsGetApiResponse"/>&gt;</returns>
        Task<IGetUserGroupsApiV1UsersGroupsGetApiResponse> GetUserGroupsApiV1UsersGroupsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupsApiV1UsersGroupsGetApiResponse"/>?&gt;</returns>
        Task<IGetUserGroupsApiV1UsersGroupsGetApiResponse?> GetUserGroupsApiV1UsersGroupsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Info By Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse"/>&gt;</returns>
        Task<IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse> GetUserInfoBySessionUserApiV1UsersUserInfoGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Info By Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse"/>?&gt;</returns>
        Task<IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse?> GetUserInfoBySessionUserApiV1UsersUserInfoGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Permissisions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse"/>&gt;</returns>
        Task<IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse> GetUserPermissisionsApiV1UsersPermissionsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Permissisions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse"/>?&gt;</returns>
        Task<IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse?> GetUserPermissisionsApiV1UsersPermissionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Settings By Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse"/>&gt;</returns>
        Task<IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse> GetUserSettingsBySessionUserApiV1UsersUserSettingsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Settings By Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse"/>?&gt;</returns>
        Task<IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse?> GetUserSettingsBySessionUserApiV1UsersUserSettingsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersApiV1UsersGetApiResponse"/>&gt;</returns>
        Task<IGetUsersApiV1UsersGetApiResponse> GetUsersApiV1UsersGetAsync(Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersApiV1UsersGetApiResponse"/>?&gt;</returns>
        Task<IGetUsersApiV1UsersGetApiResponse?> GetUsersApiV1UsersGetOrDefaultAsync(Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Default User Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPermissions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse"/>&gt;</returns>
        Task<IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse> UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostAsync(UserPermissions userPermissions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Default User Permissions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="userPermissions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse"/>?&gt;</returns>
        Task<IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse?> UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostOrDefaultAsync(UserPermissions userPermissions, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update User By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse> UpdateUserByIdApiV1UsersUserIdUpdatePostAsync(string userId, UserUpdateForm userUpdateForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update User By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse?> UpdateUserByIdApiV1UsersUserIdUpdatePostOrDefaultAsync(string userId, UserUpdateForm userUpdateForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update User Info By Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse> UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update User Info By Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse?> UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update User Settings By Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse> UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostAsync(UserSettings userSettings, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update User Settings By Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="userSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse?> UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostOrDefaultAsync(UserSettings userSettings, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetActiveUsersApiV1UsersActiveGetApiResponse"/>
    /// </summary>
    public interface IGetActiveUsersApiV1UsersActiveGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllUsersApiV1UsersAllGetApiResponse"/>
    /// </summary>
    public interface IGetAllUsersApiV1UsersAllGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UserListResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse"/>
    /// </summary>
    public interface IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UserPermissions?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse"/>
    /// </summary>
    public interface IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserByIdApiV1UsersUserIdGetApiResponse"/>
    /// </summary>
    public interface IGetUserByIdApiV1UsersUserIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.OpenWebuiRoutersUsersUserResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserGroupsApiV1UsersGroupsGetApiResponse"/>
    /// </summary>
    public interface IGetUserGroupsApiV1UsersGroupsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse"/>
    /// </summary>
    public interface IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse"/>
    /// </summary>
    public interface IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse"/>
    /// </summary>
    public interface IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UserSettings?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUsersApiV1UsersGetApiResponse"/>
    /// </summary>
    public interface IGetUsersApiV1UsersGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UserListResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse"/>
    /// </summary>
    public interface IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UserModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.UserSettings?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UsersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteUserByIdApiV1UsersUserIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteUserByIdApiV1UsersUserIdDelete;

        internal void ExecuteOnDeleteUserByIdApiV1UsersUserIdDelete(UsersApi.DeleteUserByIdApiV1UsersUserIdDeleteApiResponse apiResponse)
        {
            OnDeleteUserByIdApiV1UsersUserIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteUserByIdApiV1UsersUserIdDelete(Exception exception)
        {
            OnErrorDeleteUserByIdApiV1UsersUserIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetActiveUsersApiV1UsersActiveGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetActiveUsersApiV1UsersActiveGet;

        internal void ExecuteOnGetActiveUsersApiV1UsersActiveGet(UsersApi.GetActiveUsersApiV1UsersActiveGetApiResponse apiResponse)
        {
            OnGetActiveUsersApiV1UsersActiveGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetActiveUsersApiV1UsersActiveGet(Exception exception)
        {
            OnErrorGetActiveUsersApiV1UsersActiveGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllUsersApiV1UsersAllGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllUsersApiV1UsersAllGet;

        internal void ExecuteOnGetAllUsersApiV1UsersAllGet(UsersApi.GetAllUsersApiV1UsersAllGetApiResponse apiResponse)
        {
            OnGetAllUsersApiV1UsersAllGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllUsersApiV1UsersAllGet(Exception exception)
        {
            OnErrorGetAllUsersApiV1UsersAllGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet;

        internal void ExecuteOnGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet(UsersApi.GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse apiResponse)
        {
            OnGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet(Exception exception)
        {
            OnErrorGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserActiveStatusByIdApiV1UsersUserIdActiveGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserActiveStatusByIdApiV1UsersUserIdActiveGet;

        internal void ExecuteOnGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(UsersApi.GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse apiResponse)
        {
            OnGetUserActiveStatusByIdApiV1UsersUserIdActiveGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(Exception exception)
        {
            OnErrorGetUserActiveStatusByIdApiV1UsersUserIdActiveGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserByIdApiV1UsersUserIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserByIdApiV1UsersUserIdGet;

        internal void ExecuteOnGetUserByIdApiV1UsersUserIdGet(UsersApi.GetUserByIdApiV1UsersUserIdGetApiResponse apiResponse)
        {
            OnGetUserByIdApiV1UsersUserIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserByIdApiV1UsersUserIdGet(Exception exception)
        {
            OnErrorGetUserByIdApiV1UsersUserIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserGroupsApiV1UsersGroupsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserGroupsApiV1UsersGroupsGet;

        internal void ExecuteOnGetUserGroupsApiV1UsersGroupsGet(UsersApi.GetUserGroupsApiV1UsersGroupsGetApiResponse apiResponse)
        {
            OnGetUserGroupsApiV1UsersGroupsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserGroupsApiV1UsersGroupsGet(Exception exception)
        {
            OnErrorGetUserGroupsApiV1UsersGroupsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserInfoBySessionUserApiV1UsersUserInfoGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserInfoBySessionUserApiV1UsersUserInfoGet;

        internal void ExecuteOnGetUserInfoBySessionUserApiV1UsersUserInfoGet(UsersApi.GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse apiResponse)
        {
            OnGetUserInfoBySessionUserApiV1UsersUserInfoGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserInfoBySessionUserApiV1UsersUserInfoGet(Exception exception)
        {
            OnErrorGetUserInfoBySessionUserApiV1UsersUserInfoGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserPermissisionsApiV1UsersPermissionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserPermissisionsApiV1UsersPermissionsGet;

        internal void ExecuteOnGetUserPermissisionsApiV1UsersPermissionsGet(UsersApi.GetUserPermissisionsApiV1UsersPermissionsGetApiResponse apiResponse)
        {
            OnGetUserPermissisionsApiV1UsersPermissionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserPermissisionsApiV1UsersPermissionsGet(Exception exception)
        {
            OnErrorGetUserPermissisionsApiV1UsersPermissionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserSettingsBySessionUserApiV1UsersUserSettingsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserSettingsBySessionUserApiV1UsersUserSettingsGet;

        internal void ExecuteOnGetUserSettingsBySessionUserApiV1UsersUserSettingsGet(UsersApi.GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse apiResponse)
        {
            OnGetUserSettingsBySessionUserApiV1UsersUserSettingsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserSettingsBySessionUserApiV1UsersUserSettingsGet(Exception exception)
        {
            OnErrorGetUserSettingsBySessionUserApiV1UsersUserSettingsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUsersApiV1UsersGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUsersApiV1UsersGet;

        internal void ExecuteOnGetUsersApiV1UsersGet(UsersApi.GetUsersApiV1UsersGetApiResponse apiResponse)
        {
            OnGetUsersApiV1UsersGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUsersApiV1UsersGet(Exception exception)
        {
            OnErrorGetUsersApiV1UsersGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost;

        internal void ExecuteOnUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(UsersApi.UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse apiResponse)
        {
            OnUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(Exception exception)
        {
            OnErrorUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateUserByIdApiV1UsersUserIdUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateUserByIdApiV1UsersUserIdUpdatePost;

        internal void ExecuteOnUpdateUserByIdApiV1UsersUserIdUpdatePost(UsersApi.UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse apiResponse)
        {
            OnUpdateUserByIdApiV1UsersUserIdUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateUserByIdApiV1UsersUserIdUpdatePost(Exception exception)
        {
            OnErrorUpdateUserByIdApiV1UsersUserIdUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost;

        internal void ExecuteOnUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(UsersApi.UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse apiResponse)
        {
            OnUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(Exception exception)
        {
            OnErrorUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost;

        internal void ExecuteOnUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(UsersApi.UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse apiResponse)
        {
            OnUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(Exception exception)
        {
            OnErrorUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UsersApi : IUsersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UsersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UsersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(ILogger<UsersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UsersApiEvents usersApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UsersApi>();
            HttpClient = httpClient;
            Events = usersApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatDeleteUserByIdApiV1UsersUserIdDelete(ref string userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateDeleteUserByIdApiV1UsersUserIdDelete(string userId)
        {
            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        private void AfterDeleteUserByIdApiV1UsersUserIdDeleteDefaultImplementation(IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse apiResponseLocalVar, string userId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteUserByIdApiV1UsersUserIdDelete(ref suppressDefaultLog, apiResponseLocalVar, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        partial void AfterDeleteUserByIdApiV1UsersUserIdDelete(ref bool suppressDefaultLog, IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse apiResponseLocalVar, string userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        private void OnErrorDeleteUserByIdApiV1UsersUserIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteUserByIdApiV1UsersUserIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        partial void OnErrorDeleteUserByIdApiV1UsersUserIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId);

        /// <summary>
        /// Delete User By Id 
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse?> DeleteUserByIdApiV1UsersUserIdDeleteOrDefaultAsync(string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteUserByIdApiV1UsersUserIdDeleteAsync(userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete User By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse> DeleteUserByIdApiV1UsersUserIdDeleteAsync(string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteUserByIdApiV1UsersUserIdDelete(userId);

                FormatDeleteUserByIdApiV1UsersUserIdDelete(ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/{user_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/{user_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteUserByIdApiV1UsersUserIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteUserByIdApiV1UsersUserIdDeleteApiResponse>();

                        DeleteUserByIdApiV1UsersUserIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/{user_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteUserByIdApiV1UsersUserIdDeleteDefaultImplementation(apiResponseLocalVar, userId);

                        Events.ExecuteOnDeleteUserByIdApiV1UsersUserIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteUserByIdApiV1UsersUserIdDeleteDefaultImplementation(e, "/api/v1/users/{user_id}", uriBuilderLocalVar.Path, userId);
                Events.ExecuteOnErrorDeleteUserByIdApiV1UsersUserIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteUserByIdApiV1UsersUserIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteUserByIdApiV1UsersUserIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteUserByIdApiV1UsersUserIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteUserByIdApiV1UsersUserIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteUserByIdApiV1UsersUserIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteUserByIdApiV1UsersUserIdDeleteApiResponse(ILogger<DeleteUserByIdApiV1UsersUserIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetActiveUsersApiV1UsersActiveGetDefaultImplementation(IGetActiveUsersApiV1UsersActiveGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetActiveUsersApiV1UsersActiveGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetActiveUsersApiV1UsersActiveGet(ref bool suppressDefaultLog, IGetActiveUsersApiV1UsersActiveGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetActiveUsersApiV1UsersActiveGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetActiveUsersApiV1UsersActiveGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetActiveUsersApiV1UsersActiveGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Active Users Get a list of active users.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetActiveUsersApiV1UsersActiveGetApiResponse"/>&gt;</returns>
        public async Task<IGetActiveUsersApiV1UsersActiveGetApiResponse?> GetActiveUsersApiV1UsersActiveGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetActiveUsersApiV1UsersActiveGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Active Users Get a list of active users.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetActiveUsersApiV1UsersActiveGetApiResponse"/>&gt;</returns>
        public async Task<IGetActiveUsersApiV1UsersActiveGetApiResponse> GetActiveUsersApiV1UsersActiveGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/active"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/active");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetActiveUsersApiV1UsersActiveGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetActiveUsersApiV1UsersActiveGetApiResponse>();

                        GetActiveUsersApiV1UsersActiveGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/active", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetActiveUsersApiV1UsersActiveGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetActiveUsersApiV1UsersActiveGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetActiveUsersApiV1UsersActiveGetDefaultImplementation(e, "/api/v1/users/active", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetActiveUsersApiV1UsersActiveGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetActiveUsersApiV1UsersActiveGetApiResponse"/>
        /// </summary>
        public partial class GetActiveUsersApiV1UsersActiveGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetActiveUsersApiV1UsersActiveGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetActiveUsersApiV1UsersActiveGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetActiveUsersApiV1UsersActiveGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetActiveUsersApiV1UsersActiveGetApiResponse(ILogger<GetActiveUsersApiV1UsersActiveGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAllUsersApiV1UsersAllGetDefaultImplementation(IGetAllUsersApiV1UsersAllGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAllUsersApiV1UsersAllGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAllUsersApiV1UsersAllGet(ref bool suppressDefaultLog, IGetAllUsersApiV1UsersAllGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAllUsersApiV1UsersAllGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllUsersApiV1UsersAllGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAllUsersApiV1UsersAllGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get All Users 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUsersApiV1UsersAllGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllUsersApiV1UsersAllGetApiResponse?> GetAllUsersApiV1UsersAllGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllUsersApiV1UsersAllGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All Users 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUsersApiV1UsersAllGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllUsersApiV1UsersAllGetApiResponse> GetAllUsersApiV1UsersAllGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/all");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllUsersApiV1UsersAllGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllUsersApiV1UsersAllGetApiResponse>();

                        GetAllUsersApiV1UsersAllGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllUsersApiV1UsersAllGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAllUsersApiV1UsersAllGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllUsersApiV1UsersAllGetDefaultImplementation(e, "/api/v1/users/all", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAllUsersApiV1UsersAllGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllUsersApiV1UsersAllGetApiResponse"/>
        /// </summary>
        public partial class GetAllUsersApiV1UsersAllGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAllUsersApiV1UsersAllGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllUsersApiV1UsersAllGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllUsersApiV1UsersAllGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllUsersApiV1UsersAllGetApiResponse(ILogger<GetAllUsersApiV1UsersAllGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UserListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UserListResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UserListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetDefaultImplementation(IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet(ref bool suppressDefaultLog, IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Default User Permissions 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse?> GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Default User Permissions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse> GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/default/permissions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/default/permissions");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse>();

                        GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/default/permissions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetDefaultImplementation(e, "/api/v1/users/default/permissions", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse"/>
        /// </summary>
        public partial class GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse(ILogger<GetDefaultUserPermissionsApiV1UsersDefaultPermissionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UserPermissions? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UserPermissions>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UserPermissions? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(ref string userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(string userId)
        {
            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        private void AfterGetUserActiveStatusByIdApiV1UsersUserIdActiveGetDefaultImplementation(IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse apiResponseLocalVar, string userId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(ref suppressDefaultLog, apiResponseLocalVar, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        partial void AfterGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(ref bool suppressDefaultLog, IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse apiResponseLocalVar, string userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        private void OnErrorGetUserActiveStatusByIdApiV1UsersUserIdActiveGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        partial void OnErrorGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId);

        /// <summary>
        /// Get User Active Status By Id 
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse?> GetUserActiveStatusByIdApiV1UsersUserIdActiveGetOrDefaultAsync(string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserActiveStatusByIdApiV1UsersUserIdActiveGetAsync(userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Active Status By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse> GetUserActiveStatusByIdApiV1UsersUserIdActiveGetAsync(string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(userId);

                FormatGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/{user_id}/active"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/{user_id}/active");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse>();

                        GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/{user_id}/active", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserActiveStatusByIdApiV1UsersUserIdActiveGetDefaultImplementation(apiResponseLocalVar, userId);

                        Events.ExecuteOnGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserActiveStatusByIdApiV1UsersUserIdActiveGetDefaultImplementation(e, "/api/v1/users/{user_id}/active", uriBuilderLocalVar.Path, userId);
                Events.ExecuteOnErrorGetUserActiveStatusByIdApiV1UsersUserIdActiveGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse"/>
        /// </summary>
        public partial class GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse(ILogger<GetUserActiveStatusByIdApiV1UsersUserIdActiveGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserByIdApiV1UsersUserIdGet(ref string userId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateGetUserByIdApiV1UsersUserIdGet(string userId)
        {
            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        private void AfterGetUserByIdApiV1UsersUserIdGetDefaultImplementation(IGetUserByIdApiV1UsersUserIdGetApiResponse apiResponseLocalVar, string userId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserByIdApiV1UsersUserIdGet(ref suppressDefaultLog, apiResponseLocalVar, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        partial void AfterGetUserByIdApiV1UsersUserIdGet(ref bool suppressDefaultLog, IGetUserByIdApiV1UsersUserIdGetApiResponse apiResponseLocalVar, string userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        private void OnErrorGetUserByIdApiV1UsersUserIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserByIdApiV1UsersUserIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        partial void OnErrorGetUserByIdApiV1UsersUserIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId);

        /// <summary>
        /// Get User By Id 
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserByIdApiV1UsersUserIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserByIdApiV1UsersUserIdGetApiResponse?> GetUserByIdApiV1UsersUserIdGetOrDefaultAsync(string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserByIdApiV1UsersUserIdGetAsync(userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserByIdApiV1UsersUserIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserByIdApiV1UsersUserIdGetApiResponse> GetUserByIdApiV1UsersUserIdGetAsync(string userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserByIdApiV1UsersUserIdGet(userId);

                FormatGetUserByIdApiV1UsersUserIdGet(ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/{user_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/{user_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserByIdApiV1UsersUserIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserByIdApiV1UsersUserIdGetApiResponse>();

                        GetUserByIdApiV1UsersUserIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/{user_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserByIdApiV1UsersUserIdGetDefaultImplementation(apiResponseLocalVar, userId);

                        Events.ExecuteOnGetUserByIdApiV1UsersUserIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserByIdApiV1UsersUserIdGetDefaultImplementation(e, "/api/v1/users/{user_id}", uriBuilderLocalVar.Path, userId);
                Events.ExecuteOnErrorGetUserByIdApiV1UsersUserIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserByIdApiV1UsersUserIdGetApiResponse"/>
        /// </summary>
        public partial class GetUserByIdApiV1UsersUserIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserByIdApiV1UsersUserIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserByIdApiV1UsersUserIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserByIdApiV1UsersUserIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserByIdApiV1UsersUserIdGetApiResponse(ILogger<GetUserByIdApiV1UsersUserIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.OpenWebuiRoutersUsersUserResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.OpenWebuiRoutersUsersUserResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.OpenWebuiRoutersUsersUserResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserGroupsApiV1UsersGroupsGetDefaultImplementation(IGetUserGroupsApiV1UsersGroupsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserGroupsApiV1UsersGroupsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserGroupsApiV1UsersGroupsGet(ref bool suppressDefaultLog, IGetUserGroupsApiV1UsersGroupsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserGroupsApiV1UsersGroupsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserGroupsApiV1UsersGroupsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserGroupsApiV1UsersGroupsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get User Groups 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupsApiV1UsersGroupsGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupsApiV1UsersGroupsGetApiResponse?> GetUserGroupsApiV1UsersGroupsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserGroupsApiV1UsersGroupsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupsApiV1UsersGroupsGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupsApiV1UsersGroupsGetApiResponse> GetUserGroupsApiV1UsersGroupsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/groups"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/groups");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserGroupsApiV1UsersGroupsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserGroupsApiV1UsersGroupsGetApiResponse>();

                        GetUserGroupsApiV1UsersGroupsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserGroupsApiV1UsersGroupsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserGroupsApiV1UsersGroupsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserGroupsApiV1UsersGroupsGetDefaultImplementation(e, "/api/v1/users/groups", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserGroupsApiV1UsersGroupsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserGroupsApiV1UsersGroupsGetApiResponse"/>
        /// </summary>
        public partial class GetUserGroupsApiV1UsersGroupsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserGroupsApiV1UsersGroupsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserGroupsApiV1UsersGroupsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserGroupsApiV1UsersGroupsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserGroupsApiV1UsersGroupsGetApiResponse(ILogger<GetUserGroupsApiV1UsersGroupsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserInfoBySessionUserApiV1UsersUserInfoGetDefaultImplementation(IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserInfoBySessionUserApiV1UsersUserInfoGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserInfoBySessionUserApiV1UsersUserInfoGet(ref bool suppressDefaultLog, IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserInfoBySessionUserApiV1UsersUserInfoGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserInfoBySessionUserApiV1UsersUserInfoGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserInfoBySessionUserApiV1UsersUserInfoGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get User Info By Session User 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse?> GetUserInfoBySessionUserApiV1UsersUserInfoGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserInfoBySessionUserApiV1UsersUserInfoGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Info By Session User 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse> GetUserInfoBySessionUserApiV1UsersUserInfoGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/user/info"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/user/info");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse>();

                        GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/user/info", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserInfoBySessionUserApiV1UsersUserInfoGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserInfoBySessionUserApiV1UsersUserInfoGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserInfoBySessionUserApiV1UsersUserInfoGetDefaultImplementation(e, "/api/v1/users/user/info", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserInfoBySessionUserApiV1UsersUserInfoGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse"/>
        /// </summary>
        public partial class GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse(ILogger<GetUserInfoBySessionUserApiV1UsersUserInfoGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserPermissisionsApiV1UsersPermissionsGetDefaultImplementation(IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserPermissisionsApiV1UsersPermissionsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserPermissisionsApiV1UsersPermissionsGet(ref bool suppressDefaultLog, IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserPermissisionsApiV1UsersPermissionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserPermissisionsApiV1UsersPermissionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserPermissisionsApiV1UsersPermissionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get User Permissisions 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse?> GetUserPermissisionsApiV1UsersPermissionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserPermissisionsApiV1UsersPermissionsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Permissisions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse> GetUserPermissisionsApiV1UsersPermissionsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/permissions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/permissions");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserPermissisionsApiV1UsersPermissionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserPermissisionsApiV1UsersPermissionsGetApiResponse>();

                        GetUserPermissisionsApiV1UsersPermissionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/permissions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserPermissisionsApiV1UsersPermissionsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserPermissisionsApiV1UsersPermissionsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserPermissisionsApiV1UsersPermissionsGetDefaultImplementation(e, "/api/v1/users/permissions", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserPermissisionsApiV1UsersPermissionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserPermissisionsApiV1UsersPermissionsGetApiResponse"/>
        /// </summary>
        public partial class GetUserPermissisionsApiV1UsersPermissionsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserPermissisionsApiV1UsersPermissionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserPermissisionsApiV1UsersPermissionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserPermissisionsApiV1UsersPermissionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserPermissisionsApiV1UsersPermissionsGetApiResponse(ILogger<GetUserPermissisionsApiV1UsersPermissionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserSettingsBySessionUserApiV1UsersUserSettingsGetDefaultImplementation(IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserSettingsBySessionUserApiV1UsersUserSettingsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserSettingsBySessionUserApiV1UsersUserSettingsGet(ref bool suppressDefaultLog, IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserSettingsBySessionUserApiV1UsersUserSettingsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserSettingsBySessionUserApiV1UsersUserSettingsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserSettingsBySessionUserApiV1UsersUserSettingsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get User Settings By Session User 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse?> GetUserSettingsBySessionUserApiV1UsersUserSettingsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserSettingsBySessionUserApiV1UsersUserSettingsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Settings By Session User 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse> GetUserSettingsBySessionUserApiV1UsersUserSettingsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/user/settings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/user/settings");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse>();

                        GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/user/settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserSettingsBySessionUserApiV1UsersUserSettingsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserSettingsBySessionUserApiV1UsersUserSettingsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserSettingsBySessionUserApiV1UsersUserSettingsGetDefaultImplementation(e, "/api/v1/users/user/settings", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserSettingsBySessionUserApiV1UsersUserSettingsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse"/>
        /// </summary>
        public partial class GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse(ILogger<GetUserSettingsBySessionUserApiV1UsersUserSettingsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UserSettings? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UserSettings>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UserSettings? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUsersApiV1UsersGet(ref Option<string?> query, ref Option<string?> orderBy, ref Option<string?> direction, ref Option<int?> page);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="page"></param>
        private void AfterGetUsersApiV1UsersGetDefaultImplementation(IGetUsersApiV1UsersGetApiResponse apiResponseLocalVar, Option<string?> query, Option<string?> orderBy, Option<string?> direction, Option<int?> page)
        {
            bool suppressDefaultLog = false;
            AfterGetUsersApiV1UsersGet(ref suppressDefaultLog, apiResponseLocalVar, query, orderBy, direction, page);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="page"></param>
        partial void AfterGetUsersApiV1UsersGet(ref bool suppressDefaultLog, IGetUsersApiV1UsersGetApiResponse apiResponseLocalVar, Option<string?> query, Option<string?> orderBy, Option<string?> direction, Option<int?> page);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="page"></param>
        private void OnErrorGetUsersApiV1UsersGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> query, Option<string?> orderBy, Option<string?> direction, Option<int?> page)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUsersApiV1UsersGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, query, orderBy, direction, page);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="page"></param>
        partial void OnErrorGetUsersApiV1UsersGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string?> query, Option<string?> orderBy, Option<string?> direction, Option<int?> page);

        /// <summary>
        /// Get Users 
        /// </summary>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersApiV1UsersGetApiResponse"/>&gt;</returns>
        public async Task<IGetUsersApiV1UsersGetApiResponse?> GetUsersApiV1UsersGetOrDefaultAsync(Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUsersApiV1UsersGetAsync(query, orderBy, direction, page, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Users 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersApiV1UsersGetApiResponse"/>&gt;</returns>
        public async Task<IGetUsersApiV1UsersGetApiResponse> GetUsersApiV1UsersGetAsync(Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetUsersApiV1UsersGet(ref query, ref orderBy, ref direction, ref page);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (query.IsSet)
                        parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (direction.IsSet)
                        parseQueryStringLocalVar["direction"] = ClientUtils.ParameterToString(direction.Value);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUsersApiV1UsersGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUsersApiV1UsersGetApiResponse>();

                        GetUsersApiV1UsersGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUsersApiV1UsersGetDefaultImplementation(apiResponseLocalVar, query, orderBy, direction, page);

                        Events.ExecuteOnGetUsersApiV1UsersGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUsersApiV1UsersGetDefaultImplementation(e, "/api/v1/users/", uriBuilderLocalVar.Path, query, orderBy, direction, page);
                Events.ExecuteOnErrorGetUsersApiV1UsersGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUsersApiV1UsersGetApiResponse"/>
        /// </summary>
        public partial class GetUsersApiV1UsersGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUsersApiV1UsersGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUsersApiV1UsersGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUsersApiV1UsersGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUsersApiV1UsersGetApiResponse(ILogger<GetUsersApiV1UsersGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UserListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UserListResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UserListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(UserPermissions userPermissions);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userPermissions"></param>
        /// <returns></returns>
        private void ValidateUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(UserPermissions userPermissions)
        {
            if (userPermissions == null)
                throw new ArgumentNullException(nameof(userPermissions));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userPermissions"></param>
        private void AfterUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostDefaultImplementation(IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse apiResponseLocalVar, UserPermissions userPermissions)
        {
            bool suppressDefaultLog = false;
            AfterUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(ref suppressDefaultLog, apiResponseLocalVar, userPermissions);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userPermissions"></param>
        partial void AfterUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(ref bool suppressDefaultLog, IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse apiResponseLocalVar, UserPermissions userPermissions);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userPermissions"></param>
        private void OnErrorUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UserPermissions userPermissions)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userPermissions);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userPermissions"></param>
        partial void OnErrorUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UserPermissions userPermissions);

        /// <summary>
        /// Update Default User Permissions 
        /// </summary>
        /// <param name="userPermissions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse?> UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostOrDefaultAsync(UserPermissions userPermissions, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostAsync(userPermissions, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Default User Permissions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userPermissions"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse> UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostAsync(UserPermissions userPermissions, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(userPermissions);

                FormatUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(userPermissions);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/default/permissions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/default/permissions");

                    httpRequestMessageLocalVar.Content = (userPermissions as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(userPermissions, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse>();

                        UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/default/permissions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostDefaultImplementation(apiResponseLocalVar, userPermissions);

                        Events.ExecuteOnUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostDefaultImplementation(e, "/api/v1/users/default/permissions", uriBuilderLocalVar.Path, userPermissions);
                Events.ExecuteOnErrorUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse"/>
        /// </summary>
        public partial class UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse(ILogger<UpdateDefaultUserPermissionsApiV1UsersDefaultPermissionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateUserByIdApiV1UsersUserIdUpdatePost(ref string userId, UserUpdateForm userUpdateForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        /// <returns></returns>
        private void ValidateUpdateUserByIdApiV1UsersUserIdUpdatePost(string userId, UserUpdateForm userUpdateForm)
        {
            if (userId == null)
                throw new ArgumentNullException(nameof(userId));

            if (userUpdateForm == null)
                throw new ArgumentNullException(nameof(userUpdateForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        private void AfterUpdateUserByIdApiV1UsersUserIdUpdatePostDefaultImplementation(IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse apiResponseLocalVar, string userId, UserUpdateForm userUpdateForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateUserByIdApiV1UsersUserIdUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, userId, userUpdateForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        partial void AfterUpdateUserByIdApiV1UsersUserIdUpdatePost(ref bool suppressDefaultLog, IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse apiResponseLocalVar, string userId, UserUpdateForm userUpdateForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        private void OnErrorUpdateUserByIdApiV1UsersUserIdUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId, UserUpdateForm userUpdateForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateUserByIdApiV1UsersUserIdUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userId, userUpdateForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        partial void OnErrorUpdateUserByIdApiV1UsersUserIdUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId, UserUpdateForm userUpdateForm);

        /// <summary>
        /// Update User By Id 
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse?> UpdateUserByIdApiV1UsersUserIdUpdatePostOrDefaultAsync(string userId, UserUpdateForm userUpdateForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateUserByIdApiV1UsersUserIdUpdatePostAsync(userId, userUpdateForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update User By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse> UpdateUserByIdApiV1UsersUserIdUpdatePostAsync(string userId, UserUpdateForm userUpdateForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateUserByIdApiV1UsersUserIdUpdatePost(userId, userUpdateForm);

                FormatUpdateUserByIdApiV1UsersUserIdUpdatePost(ref userId, userUpdateForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/{user_id}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/{user_id}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    httpRequestMessageLocalVar.Content = (userUpdateForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(userUpdateForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse>();

                        UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/{user_id}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateUserByIdApiV1UsersUserIdUpdatePostDefaultImplementation(apiResponseLocalVar, userId, userUpdateForm);

                        Events.ExecuteOnUpdateUserByIdApiV1UsersUserIdUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateUserByIdApiV1UsersUserIdUpdatePostDefaultImplementation(e, "/api/v1/users/{user_id}/update", uriBuilderLocalVar.Path, userId, userUpdateForm);
                Events.ExecuteOnErrorUpdateUserByIdApiV1UsersUserIdUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse(ILogger<UpdateUserByIdApiV1UsersUserIdUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UserModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UserModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UserModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostDefaultImplementation(IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(ref bool suppressDefaultLog, IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Update User Info By Session User 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse?> UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update User Info By Session User 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse> UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(body);

                FormatUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/user/info/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/user/info/update");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse>();

                        UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/user/info/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostDefaultImplementation(e, "/api/v1/users/user/info/update", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse(ILogger<UpdateUserInfoBySessionUserApiV1UsersUserInfoUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(UserSettings userSettings);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userSettings"></param>
        /// <returns></returns>
        private void ValidateUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(UserSettings userSettings)
        {
            if (userSettings == null)
                throw new ArgumentNullException(nameof(userSettings));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userSettings"></param>
        private void AfterUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostDefaultImplementation(IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse apiResponseLocalVar, UserSettings userSettings)
        {
            bool suppressDefaultLog = false;
            AfterUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, userSettings);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userSettings"></param>
        partial void AfterUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(ref bool suppressDefaultLog, IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse apiResponseLocalVar, UserSettings userSettings);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userSettings"></param>
        private void OnErrorUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UserSettings userSettings)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userSettings);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userSettings"></param>
        partial void OnErrorUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UserSettings userSettings);

        /// <summary>
        /// Update User Settings By Session User 
        /// </summary>
        /// <param name="userSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse?> UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostOrDefaultAsync(UserSettings userSettings, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostAsync(userSettings, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update User Settings By Session User 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSettings"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse> UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostAsync(UserSettings userSettings, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(userSettings);

                FormatUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(userSettings);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/users/user/settings/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/users/user/settings/update");

                    httpRequestMessageLocalVar.Content = (userSettings as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(userSettings, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse>();

                        UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/users/user/settings/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostDefaultImplementation(apiResponseLocalVar, userSettings);

                        Events.ExecuteOnUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostDefaultImplementation(e, "/api/v1/users/user/settings/update", uriBuilderLocalVar.Path, userSettings);
                Events.ExecuteOnErrorUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse(ILogger<UpdateUserSettingsBySessionUserApiV1UsersUserSettingsUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.UserSettings? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.UserSettings>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.UserSettings? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
