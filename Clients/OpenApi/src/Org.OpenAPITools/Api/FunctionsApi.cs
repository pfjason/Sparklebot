// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFunctionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FunctionsApiEvents Events { get; }

        /// <summary>
        /// Create New Function
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewFunctionApiV1FunctionsCreatePostApiResponse"/>&gt;</returns>
        Task<ICreateNewFunctionApiV1FunctionsCreatePostApiResponse> CreateNewFunctionApiV1FunctionsCreatePostAsync(FunctionForm functionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Function
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="functionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewFunctionApiV1FunctionsCreatePostApiResponse"/>?&gt;</returns>
        Task<ICreateNewFunctionApiV1FunctionsCreatePostApiResponse?> CreateNewFunctionApiV1FunctionsCreatePostOrDefaultAsync(FunctionForm functionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Function By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse> DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Function By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse?> DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse"/>&gt;</returns>
        Task<IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse> GetFunctionByIdApiV1FunctionsIdIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse"/>?&gt;</returns>
        Task<IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse?> GetFunctionByIdApiV1FunctionsIdIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function User Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse"/>&gt;</returns>
        Task<IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse> GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function User Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse"/>?&gt;</returns>
        Task<IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse?> GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function User Valves Spec By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse"/>&gt;</returns>
        Task<IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse> GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function User Valves Spec By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse"/>?&gt;</returns>
        Task<IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse?> GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse"/>&gt;</returns>
        Task<IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse> GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse"/>?&gt;</returns>
        Task<IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse?> GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function Valves Spec By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse"/>&gt;</returns>
        Task<IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse> GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Function Valves Spec By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse"/>?&gt;</returns>
        Task<IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse?> GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionsApiV1FunctionsExportGetApiResponse"/>&gt;</returns>
        Task<IGetFunctionsApiV1FunctionsExportGetApiResponse> GetFunctionsApiV1FunctionsExportGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionsApiV1FunctionsExportGetApiResponse"/>?&gt;</returns>
        Task<IGetFunctionsApiV1FunctionsExportGetApiResponse?> GetFunctionsApiV1FunctionsExportGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionsApiV1FunctionsGetApiResponse"/>&gt;</returns>
        Task<IGetFunctionsApiV1FunctionsGetApiResponse> GetFunctionsApiV1FunctionsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionsApiV1FunctionsGetApiResponse"/>?&gt;</returns>
        Task<IGetFunctionsApiV1FunctionsGetApiResponse?> GetFunctionsApiV1FunctionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Load Function From Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse"/>&gt;</returns>
        Task<ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse> LoadFunctionFromUrlApiV1FunctionsLoadUrlPostAsync(LoadUrlForm loadUrlForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Load Function From Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="loadUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse"/>?&gt;</returns>
        Task<ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse?> LoadFunctionFromUrlApiV1FunctionsLoadUrlPostOrDefaultAsync(LoadUrlForm loadUrlForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sync Functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncFunctionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncFunctionsApiV1FunctionsSyncPostApiResponse"/>&gt;</returns>
        Task<ISyncFunctionsApiV1FunctionsSyncPostApiResponse> SyncFunctionsApiV1FunctionsSyncPostAsync(SyncFunctionsForm syncFunctionsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Sync Functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="syncFunctionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncFunctionsApiV1FunctionsSyncPostApiResponse"/>?&gt;</returns>
        Task<ISyncFunctionsApiV1FunctionsSyncPostApiResponse?> SyncFunctionsApiV1FunctionsSyncPostOrDefaultAsync(SyncFunctionsForm syncFunctionsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Toggle Function By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse"/>&gt;</returns>
        Task<IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse> ToggleFunctionByIdApiV1FunctionsIdIdTogglePostAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Toggle Function By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse"/>?&gt;</returns>
        Task<IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse?> ToggleFunctionByIdApiV1FunctionsIdIdTogglePostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Toggle Global By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse"/>&gt;</returns>
        Task<IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse> ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Toggle Global By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse"/>?&gt;</returns>
        Task<IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse?> ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Function By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse> UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostAsync(string id, FunctionForm functionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Function By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse?> UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostOrDefaultAsync(string id, FunctionForm functionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Function User Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse> UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Function User Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse?> UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostOrDefaultAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Function Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse> UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Function Valves By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse?> UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostOrDefaultAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateNewFunctionApiV1FunctionsCreatePostApiResponse"/>
    /// </summary>
    public interface ICreateNewFunctionApiV1FunctionsCreatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FunctionResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse"/>
    /// </summary>
    public interface IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FunctionModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse"/>
    /// </summary>
    public interface IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse"/>
    /// </summary>
    public interface IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse"/>
    /// </summary>
    public interface IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse"/>
    /// </summary>
    public interface IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFunctionsApiV1FunctionsExportGetApiResponse"/>
    /// </summary>
    public interface IGetFunctionsApiV1FunctionsExportGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<FunctionModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetFunctionsApiV1FunctionsGetApiResponse"/>
    /// </summary>
    public interface IGetFunctionsApiV1FunctionsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<FunctionResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse"/>
    /// </summary>
    public interface ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISyncFunctionsApiV1FunctionsSyncPostApiResponse"/>
    /// </summary>
    public interface ISyncFunctionsApiV1FunctionsSyncPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FunctionModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse"/>
    /// </summary>
    public interface IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FunctionModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse"/>
    /// </summary>
    public interface IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FunctionModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FunctionModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FunctionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNewFunctionApiV1FunctionsCreatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNewFunctionApiV1FunctionsCreatePost;

        internal void ExecuteOnCreateNewFunctionApiV1FunctionsCreatePost(FunctionsApi.CreateNewFunctionApiV1FunctionsCreatePostApiResponse apiResponse)
        {
            OnCreateNewFunctionApiV1FunctionsCreatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewFunctionApiV1FunctionsCreatePost(Exception exception)
        {
            OnErrorCreateNewFunctionApiV1FunctionsCreatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete;

        internal void ExecuteOnDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(FunctionsApi.DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse apiResponse)
        {
            OnDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(Exception exception)
        {
            OnErrorDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFunctionByIdApiV1FunctionsIdIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFunctionByIdApiV1FunctionsIdIdGet;

        internal void ExecuteOnGetFunctionByIdApiV1FunctionsIdIdGet(FunctionsApi.GetFunctionByIdApiV1FunctionsIdIdGetApiResponse apiResponse)
        {
            OnGetFunctionByIdApiV1FunctionsIdIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFunctionByIdApiV1FunctionsIdIdGet(Exception exception)
        {
            OnErrorGetFunctionByIdApiV1FunctionsIdIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet;

        internal void ExecuteOnGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(FunctionsApi.GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse apiResponse)
        {
            OnGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(Exception exception)
        {
            OnErrorGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet;

        internal void ExecuteOnGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(FunctionsApi.GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse apiResponse)
        {
            OnGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(Exception exception)
        {
            OnErrorGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet;

        internal void ExecuteOnGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(FunctionsApi.GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse apiResponse)
        {
            OnGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(Exception exception)
        {
            OnErrorGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet;

        internal void ExecuteOnGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(FunctionsApi.GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse apiResponse)
        {
            OnGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(Exception exception)
        {
            OnErrorGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFunctionsApiV1FunctionsExportGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFunctionsApiV1FunctionsExportGet;

        internal void ExecuteOnGetFunctionsApiV1FunctionsExportGet(FunctionsApi.GetFunctionsApiV1FunctionsExportGetApiResponse apiResponse)
        {
            OnGetFunctionsApiV1FunctionsExportGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFunctionsApiV1FunctionsExportGet(Exception exception)
        {
            OnErrorGetFunctionsApiV1FunctionsExportGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFunctionsApiV1FunctionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFunctionsApiV1FunctionsGet;

        internal void ExecuteOnGetFunctionsApiV1FunctionsGet(FunctionsApi.GetFunctionsApiV1FunctionsGetApiResponse apiResponse)
        {
            OnGetFunctionsApiV1FunctionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFunctionsApiV1FunctionsGet(Exception exception)
        {
            OnErrorGetFunctionsApiV1FunctionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLoadFunctionFromUrlApiV1FunctionsLoadUrlPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLoadFunctionFromUrlApiV1FunctionsLoadUrlPost;

        internal void ExecuteOnLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(FunctionsApi.LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse apiResponse)
        {
            OnLoadFunctionFromUrlApiV1FunctionsLoadUrlPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(Exception exception)
        {
            OnErrorLoadFunctionFromUrlApiV1FunctionsLoadUrlPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSyncFunctionsApiV1FunctionsSyncPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSyncFunctionsApiV1FunctionsSyncPost;

        internal void ExecuteOnSyncFunctionsApiV1FunctionsSyncPost(FunctionsApi.SyncFunctionsApiV1FunctionsSyncPostApiResponse apiResponse)
        {
            OnSyncFunctionsApiV1FunctionsSyncPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSyncFunctionsApiV1FunctionsSyncPost(Exception exception)
        {
            OnErrorSyncFunctionsApiV1FunctionsSyncPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnToggleFunctionByIdApiV1FunctionsIdIdTogglePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorToggleFunctionByIdApiV1FunctionsIdIdTogglePost;

        internal void ExecuteOnToggleFunctionByIdApiV1FunctionsIdIdTogglePost(FunctionsApi.ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse apiResponse)
        {
            OnToggleFunctionByIdApiV1FunctionsIdIdTogglePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorToggleFunctionByIdApiV1FunctionsIdIdTogglePost(Exception exception)
        {
            OnErrorToggleFunctionByIdApiV1FunctionsIdIdTogglePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost;

        internal void ExecuteOnToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(FunctionsApi.ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse apiResponse)
        {
            OnToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(Exception exception)
        {
            OnErrorToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost;

        internal void ExecuteOnUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(FunctionsApi.UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse apiResponse)
        {
            OnUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(Exception exception)
        {
            OnErrorUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost;

        internal void ExecuteOnUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(FunctionsApi.UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse apiResponse)
        {
            OnUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(Exception exception)
        {
            OnErrorUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost;

        internal void ExecuteOnUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(FunctionsApi.UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse apiResponse)
        {
            OnUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(Exception exception)
        {
            OnErrorUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FunctionsApi : IFunctionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FunctionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FunctionsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FunctionsApi(ILogger<FunctionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FunctionsApiEvents functionsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FunctionsApi>();
            HttpClient = httpClient;
            Events = functionsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateNewFunctionApiV1FunctionsCreatePost(FunctionForm functionForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="functionForm"></param>
        /// <returns></returns>
        private void ValidateCreateNewFunctionApiV1FunctionsCreatePost(FunctionForm functionForm)
        {
            if (functionForm == null)
                throw new ArgumentNullException(nameof(functionForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="functionForm"></param>
        private void AfterCreateNewFunctionApiV1FunctionsCreatePostDefaultImplementation(ICreateNewFunctionApiV1FunctionsCreatePostApiResponse apiResponseLocalVar, FunctionForm functionForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewFunctionApiV1FunctionsCreatePost(ref suppressDefaultLog, apiResponseLocalVar, functionForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="functionForm"></param>
        partial void AfterCreateNewFunctionApiV1FunctionsCreatePost(ref bool suppressDefaultLog, ICreateNewFunctionApiV1FunctionsCreatePostApiResponse apiResponseLocalVar, FunctionForm functionForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="functionForm"></param>
        private void OnErrorCreateNewFunctionApiV1FunctionsCreatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FunctionForm functionForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewFunctionApiV1FunctionsCreatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, functionForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="functionForm"></param>
        partial void OnErrorCreateNewFunctionApiV1FunctionsCreatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FunctionForm functionForm);

        /// <summary>
        /// Create New Function 
        /// </summary>
        /// <param name="functionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewFunctionApiV1FunctionsCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewFunctionApiV1FunctionsCreatePostApiResponse?> CreateNewFunctionApiV1FunctionsCreatePostOrDefaultAsync(FunctionForm functionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewFunctionApiV1FunctionsCreatePostAsync(functionForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create New Function 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewFunctionApiV1FunctionsCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewFunctionApiV1FunctionsCreatePostApiResponse> CreateNewFunctionApiV1FunctionsCreatePostAsync(FunctionForm functionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewFunctionApiV1FunctionsCreatePost(functionForm);

                FormatCreateNewFunctionApiV1FunctionsCreatePost(functionForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/create");

                    httpRequestMessageLocalVar.Content = (functionForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(functionForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNewFunctionApiV1FunctionsCreatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewFunctionApiV1FunctionsCreatePostApiResponse>();

                        CreateNewFunctionApiV1FunctionsCreatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewFunctionApiV1FunctionsCreatePostDefaultImplementation(apiResponseLocalVar, functionForm);

                        Events.ExecuteOnCreateNewFunctionApiV1FunctionsCreatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewFunctionApiV1FunctionsCreatePostDefaultImplementation(e, "/api/v1/functions/create", uriBuilderLocalVar.Path, functionForm);
                Events.ExecuteOnErrorCreateNewFunctionApiV1FunctionsCreatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewFunctionApiV1FunctionsCreatePostApiResponse"/>
        /// </summary>
        public partial class CreateNewFunctionApiV1FunctionsCreatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateNewFunctionApiV1FunctionsCreatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewFunctionApiV1FunctionsCreatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewFunctionApiV1FunctionsCreatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewFunctionApiV1FunctionsCreatePostApiResponse(ILogger<CreateNewFunctionApiV1FunctionsCreatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FunctionResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FunctionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FunctionResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteDefaultImplementation(IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(ref bool suppressDefaultLog, IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete Function By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse?> DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Function By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse> DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(id);

                FormatDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/delete");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse>();

                        DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteDefaultImplementation(e, "/api/v1/functions/id/{id}/delete", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteFunctionByIdApiV1FunctionsIdIdDeleteDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse(ILogger<DeleteFunctionByIdApiV1FunctionsIdIdDeleteDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFunctionByIdApiV1FunctionsIdIdGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetFunctionByIdApiV1FunctionsIdIdGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFunctionByIdApiV1FunctionsIdIdGetDefaultImplementation(IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetFunctionByIdApiV1FunctionsIdIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFunctionByIdApiV1FunctionsIdIdGet(ref bool suppressDefaultLog, IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFunctionByIdApiV1FunctionsIdIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFunctionByIdApiV1FunctionsIdIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFunctionByIdApiV1FunctionsIdIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Function By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse?> GetFunctionByIdApiV1FunctionsIdIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFunctionByIdApiV1FunctionsIdIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Function By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse> GetFunctionByIdApiV1FunctionsIdIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFunctionByIdApiV1FunctionsIdIdGet(id);

                FormatGetFunctionByIdApiV1FunctionsIdIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFunctionByIdApiV1FunctionsIdIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFunctionByIdApiV1FunctionsIdIdGetApiResponse>();

                        GetFunctionByIdApiV1FunctionsIdIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFunctionByIdApiV1FunctionsIdIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFunctionByIdApiV1FunctionsIdIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFunctionByIdApiV1FunctionsIdIdGetDefaultImplementation(e, "/api/v1/functions/id/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFunctionByIdApiV1FunctionsIdIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFunctionByIdApiV1FunctionsIdIdGetApiResponse"/>
        /// </summary>
        public partial class GetFunctionByIdApiV1FunctionsIdIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFunctionByIdApiV1FunctionsIdIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFunctionByIdApiV1FunctionsIdIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFunctionByIdApiV1FunctionsIdIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFunctionByIdApiV1FunctionsIdIdGetApiResponse(ILogger<GetFunctionByIdApiV1FunctionsIdIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FunctionModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FunctionModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FunctionModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetDefaultImplementation(IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(ref bool suppressDefaultLog, IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Function User Valves By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse?> GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Function User Valves By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse> GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(id);

                FormatGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/valves/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/valves/user");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse>();

                        GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/valves/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetDefaultImplementation(e, "/api/v1/functions/id/{id}/valves/user", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse"/>
        /// </summary>
        public partial class GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse(ILogger<GetFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetDefaultImplementation(IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(ref bool suppressDefaultLog, IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Function User Valves Spec By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse?> GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Function User Valves Spec By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse> GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(id);

                FormatGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/valves/user/spec"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/valves/user/spec");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse>();

                        GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/valves/user/spec", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetDefaultImplementation(e, "/api/v1/functions/id/{id}/valves/user/spec", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse"/>
        /// </summary>
        public partial class GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse(ILogger<GetFunctionUserValvesSpecByIdApiV1FunctionsIdIdValvesUserSpecGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetDefaultImplementation(IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(ref bool suppressDefaultLog, IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Function Valves By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse?> GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Function Valves By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse> GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(id);

                FormatGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/valves"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/valves");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse>();

                        GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/valves", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetDefaultImplementation(e, "/api/v1/functions/id/{id}/valves", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFunctionValvesByIdApiV1FunctionsIdIdValvesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse"/>
        /// </summary>
        public partial class GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse(ILogger<GetFunctionValvesByIdApiV1FunctionsIdIdValvesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetDefaultImplementation(IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(ref bool suppressDefaultLog, IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Function Valves Spec By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse?> GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Function Valves Spec By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse> GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(id);

                FormatGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/valves/spec"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/valves/spec");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse>();

                        GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/valves/spec", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetDefaultImplementation(e, "/api/v1/functions/id/{id}/valves/spec", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse"/>
        /// </summary>
        public partial class GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse(ILogger<GetFunctionValvesSpecByIdApiV1FunctionsIdIdValvesSpecGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetFunctionsApiV1FunctionsExportGetDefaultImplementation(IGetFunctionsApiV1FunctionsExportGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetFunctionsApiV1FunctionsExportGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetFunctionsApiV1FunctionsExportGet(ref bool suppressDefaultLog, IGetFunctionsApiV1FunctionsExportGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetFunctionsApiV1FunctionsExportGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFunctionsApiV1FunctionsExportGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetFunctionsApiV1FunctionsExportGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Functions 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionsApiV1FunctionsExportGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionsApiV1FunctionsExportGetApiResponse?> GetFunctionsApiV1FunctionsExportGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFunctionsApiV1FunctionsExportGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Functions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionsApiV1FunctionsExportGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionsApiV1FunctionsExportGetApiResponse> GetFunctionsApiV1FunctionsExportGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/export"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/export");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFunctionsApiV1FunctionsExportGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFunctionsApiV1FunctionsExportGetApiResponse>();

                        GetFunctionsApiV1FunctionsExportGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/export", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFunctionsApiV1FunctionsExportGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetFunctionsApiV1FunctionsExportGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFunctionsApiV1FunctionsExportGetDefaultImplementation(e, "/api/v1/functions/export", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetFunctionsApiV1FunctionsExportGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFunctionsApiV1FunctionsExportGetApiResponse"/>
        /// </summary>
        public partial class GetFunctionsApiV1FunctionsExportGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFunctionsApiV1FunctionsExportGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFunctionsApiV1FunctionsExportGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFunctionsApiV1FunctionsExportGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFunctionsApiV1FunctionsExportGetApiResponse(ILogger<GetFunctionsApiV1FunctionsExportGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FunctionModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FunctionModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FunctionModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetFunctionsApiV1FunctionsGetDefaultImplementation(IGetFunctionsApiV1FunctionsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetFunctionsApiV1FunctionsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetFunctionsApiV1FunctionsGet(ref bool suppressDefaultLog, IGetFunctionsApiV1FunctionsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetFunctionsApiV1FunctionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFunctionsApiV1FunctionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetFunctionsApiV1FunctionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Functions 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionsApiV1FunctionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionsApiV1FunctionsGetApiResponse?> GetFunctionsApiV1FunctionsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFunctionsApiV1FunctionsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Functions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFunctionsApiV1FunctionsGetApiResponse"/>&gt;</returns>
        public async Task<IGetFunctionsApiV1FunctionsGetApiResponse> GetFunctionsApiV1FunctionsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFunctionsApiV1FunctionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFunctionsApiV1FunctionsGetApiResponse>();

                        GetFunctionsApiV1FunctionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFunctionsApiV1FunctionsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetFunctionsApiV1FunctionsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFunctionsApiV1FunctionsGetDefaultImplementation(e, "/api/v1/functions/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetFunctionsApiV1FunctionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFunctionsApiV1FunctionsGetApiResponse"/>
        /// </summary>
        public partial class GetFunctionsApiV1FunctionsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFunctionsApiV1FunctionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFunctionsApiV1FunctionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFunctionsApiV1FunctionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFunctionsApiV1FunctionsGetApiResponse(ILogger<GetFunctionsApiV1FunctionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FunctionResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FunctionResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FunctionResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(LoadUrlForm loadUrlForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="loadUrlForm"></param>
        /// <returns></returns>
        private void ValidateLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(LoadUrlForm loadUrlForm)
        {
            if (loadUrlForm == null)
                throw new ArgumentNullException(nameof(loadUrlForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="loadUrlForm"></param>
        private void AfterLoadFunctionFromUrlApiV1FunctionsLoadUrlPostDefaultImplementation(ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse apiResponseLocalVar, LoadUrlForm loadUrlForm)
        {
            bool suppressDefaultLog = false;
            AfterLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(ref suppressDefaultLog, apiResponseLocalVar, loadUrlForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="loadUrlForm"></param>
        partial void AfterLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(ref bool suppressDefaultLog, ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse apiResponseLocalVar, LoadUrlForm loadUrlForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="loadUrlForm"></param>
        private void OnErrorLoadFunctionFromUrlApiV1FunctionsLoadUrlPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LoadUrlForm loadUrlForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, loadUrlForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="loadUrlForm"></param>
        partial void OnErrorLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LoadUrlForm loadUrlForm);

        /// <summary>
        /// Load Function From Url 
        /// </summary>
        /// <param name="loadUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse"/>&gt;</returns>
        public async Task<ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse?> LoadFunctionFromUrlApiV1FunctionsLoadUrlPostOrDefaultAsync(LoadUrlForm loadUrlForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LoadFunctionFromUrlApiV1FunctionsLoadUrlPostAsync(loadUrlForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Load Function From Url 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loadUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse"/>&gt;</returns>
        public async Task<ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse> LoadFunctionFromUrlApiV1FunctionsLoadUrlPostAsync(LoadUrlForm loadUrlForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(loadUrlForm);

                FormatLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(loadUrlForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/load/url"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/load/url");

                    httpRequestMessageLocalVar.Content = (loadUrlForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(loadUrlForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse>();

                        LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/load/url", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLoadFunctionFromUrlApiV1FunctionsLoadUrlPostDefaultImplementation(apiResponseLocalVar, loadUrlForm);

                        Events.ExecuteOnLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLoadFunctionFromUrlApiV1FunctionsLoadUrlPostDefaultImplementation(e, "/api/v1/functions/load/url", uriBuilderLocalVar.Path, loadUrlForm);
                Events.ExecuteOnErrorLoadFunctionFromUrlApiV1FunctionsLoadUrlPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse"/>
        /// </summary>
        public partial class LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ILoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse(ILogger<LoadFunctionFromUrlApiV1FunctionsLoadUrlPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSyncFunctionsApiV1FunctionsSyncPost(SyncFunctionsForm syncFunctionsForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="syncFunctionsForm"></param>
        /// <returns></returns>
        private void ValidateSyncFunctionsApiV1FunctionsSyncPost(SyncFunctionsForm syncFunctionsForm)
        {
            if (syncFunctionsForm == null)
                throw new ArgumentNullException(nameof(syncFunctionsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="syncFunctionsForm"></param>
        private void AfterSyncFunctionsApiV1FunctionsSyncPostDefaultImplementation(ISyncFunctionsApiV1FunctionsSyncPostApiResponse apiResponseLocalVar, SyncFunctionsForm syncFunctionsForm)
        {
            bool suppressDefaultLog = false;
            AfterSyncFunctionsApiV1FunctionsSyncPost(ref suppressDefaultLog, apiResponseLocalVar, syncFunctionsForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="syncFunctionsForm"></param>
        partial void AfterSyncFunctionsApiV1FunctionsSyncPost(ref bool suppressDefaultLog, ISyncFunctionsApiV1FunctionsSyncPostApiResponse apiResponseLocalVar, SyncFunctionsForm syncFunctionsForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="syncFunctionsForm"></param>
        private void OnErrorSyncFunctionsApiV1FunctionsSyncPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SyncFunctionsForm syncFunctionsForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSyncFunctionsApiV1FunctionsSyncPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, syncFunctionsForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="syncFunctionsForm"></param>
        partial void OnErrorSyncFunctionsApiV1FunctionsSyncPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SyncFunctionsForm syncFunctionsForm);

        /// <summary>
        /// Sync Functions 
        /// </summary>
        /// <param name="syncFunctionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncFunctionsApiV1FunctionsSyncPostApiResponse"/>&gt;</returns>
        public async Task<ISyncFunctionsApiV1FunctionsSyncPostApiResponse?> SyncFunctionsApiV1FunctionsSyncPostOrDefaultAsync(SyncFunctionsForm syncFunctionsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SyncFunctionsApiV1FunctionsSyncPostAsync(syncFunctionsForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Sync Functions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncFunctionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISyncFunctionsApiV1FunctionsSyncPostApiResponse"/>&gt;</returns>
        public async Task<ISyncFunctionsApiV1FunctionsSyncPostApiResponse> SyncFunctionsApiV1FunctionsSyncPostAsync(SyncFunctionsForm syncFunctionsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSyncFunctionsApiV1FunctionsSyncPost(syncFunctionsForm);

                FormatSyncFunctionsApiV1FunctionsSyncPost(syncFunctionsForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/sync"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/sync");

                    httpRequestMessageLocalVar.Content = (syncFunctionsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(syncFunctionsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SyncFunctionsApiV1FunctionsSyncPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SyncFunctionsApiV1FunctionsSyncPostApiResponse>();

                        SyncFunctionsApiV1FunctionsSyncPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/sync", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSyncFunctionsApiV1FunctionsSyncPostDefaultImplementation(apiResponseLocalVar, syncFunctionsForm);

                        Events.ExecuteOnSyncFunctionsApiV1FunctionsSyncPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSyncFunctionsApiV1FunctionsSyncPostDefaultImplementation(e, "/api/v1/functions/sync", uriBuilderLocalVar.Path, syncFunctionsForm);
                Events.ExecuteOnErrorSyncFunctionsApiV1FunctionsSyncPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SyncFunctionsApiV1FunctionsSyncPostApiResponse"/>
        /// </summary>
        public partial class SyncFunctionsApiV1FunctionsSyncPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISyncFunctionsApiV1FunctionsSyncPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SyncFunctionsApiV1FunctionsSyncPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SyncFunctionsApiV1FunctionsSyncPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SyncFunctionsApiV1FunctionsSyncPostApiResponse(ILogger<SyncFunctionsApiV1FunctionsSyncPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FunctionModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FunctionModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FunctionModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatToggleFunctionByIdApiV1FunctionsIdIdTogglePost(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateToggleFunctionByIdApiV1FunctionsIdIdTogglePost(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterToggleFunctionByIdApiV1FunctionsIdIdTogglePostDefaultImplementation(IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterToggleFunctionByIdApiV1FunctionsIdIdTogglePost(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterToggleFunctionByIdApiV1FunctionsIdIdTogglePost(ref bool suppressDefaultLog, IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorToggleFunctionByIdApiV1FunctionsIdIdTogglePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorToggleFunctionByIdApiV1FunctionsIdIdTogglePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorToggleFunctionByIdApiV1FunctionsIdIdTogglePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Toggle Function By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse"/>&gt;</returns>
        public async Task<IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse?> ToggleFunctionByIdApiV1FunctionsIdIdTogglePostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ToggleFunctionByIdApiV1FunctionsIdIdTogglePostAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Toggle Function By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse"/>&gt;</returns>
        public async Task<IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse> ToggleFunctionByIdApiV1FunctionsIdIdTogglePostAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateToggleFunctionByIdApiV1FunctionsIdIdTogglePost(id);

                FormatToggleFunctionByIdApiV1FunctionsIdIdTogglePost(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/toggle"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/toggle");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse>();

                        ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/toggle", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterToggleFunctionByIdApiV1FunctionsIdIdTogglePostDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnToggleFunctionByIdApiV1FunctionsIdIdTogglePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorToggleFunctionByIdApiV1FunctionsIdIdTogglePostDefaultImplementation(e, "/api/v1/functions/id/{id}/toggle", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorToggleFunctionByIdApiV1FunctionsIdIdTogglePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse"/>
        /// </summary>
        public partial class ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse(ILogger<ToggleFunctionByIdApiV1FunctionsIdIdTogglePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FunctionModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FunctionModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FunctionModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostDefaultImplementation(IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(ref bool suppressDefaultLog, IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Toggle Global By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse"/>&gt;</returns>
        public async Task<IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse?> ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Toggle Global By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse"/>&gt;</returns>
        public async Task<IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse> ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(id);

                FormatToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/toggle/global"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/toggle/global");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse>();

                        ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/toggle/global", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostDefaultImplementation(e, "/api/v1/functions/id/{id}/toggle/global", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse"/>
        /// </summary>
        public partial class ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse(ILogger<ToggleGlobalByIdApiV1FunctionsIdIdToggleGlobalPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FunctionModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FunctionModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FunctionModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(ref string id, FunctionForm functionForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        /// <returns></returns>
        private void ValidateUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(string id, FunctionForm functionForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (functionForm == null)
                throw new ArgumentNullException(nameof(functionForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        private void AfterUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostDefaultImplementation(IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse apiResponseLocalVar, string id, FunctionForm functionForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, functionForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        partial void AfterUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(ref bool suppressDefaultLog, IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse apiResponseLocalVar, string id, FunctionForm functionForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        private void OnErrorUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FunctionForm functionForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, functionForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        partial void OnErrorUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FunctionForm functionForm);

        /// <summary>
        /// Update Function By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse?> UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostOrDefaultAsync(string id, FunctionForm functionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostAsync(id, functionForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Function By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="functionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse> UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostAsync(string id, FunctionForm functionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(id, functionForm);

                FormatUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(ref id, functionForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (functionForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(functionForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse>();

                        UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostDefaultImplementation(apiResponseLocalVar, id, functionForm);

                        Events.ExecuteOnUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostDefaultImplementation(e, "/api/v1/functions/id/{id}/update", uriBuilderLocalVar.Path, id, functionForm);
                Events.ExecuteOnErrorUpdateFunctionByIdApiV1FunctionsIdIdUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse(ILogger<UpdateFunctionByIdApiV1FunctionsIdIdUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FunctionModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FunctionModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FunctionModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(ref string id, ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(string id, Object body)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void AfterUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostDefaultImplementation(IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse apiResponseLocalVar, string id, Object body)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void AfterUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(ref bool suppressDefaultLog, IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse apiResponseLocalVar, string id, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void OnErrorUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void OnErrorUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Object body);

        /// <summary>
        /// Update Function User Valves By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse?> UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostOrDefaultAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Function User Valves By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse> UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(id, body);

                FormatUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(ref id, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/valves/user/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/valves/user/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse>();

                        UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/valves/user/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostDefaultImplementation(apiResponseLocalVar, id, body);

                        Events.ExecuteOnUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostDefaultImplementation(e, "/api/v1/functions/id/{id}/valves/user/update", uriBuilderLocalVar.Path, id, body);
                Events.ExecuteOnErrorUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse(ILogger<UpdateFunctionUserValvesByIdApiV1FunctionsIdIdValvesUserUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(ref string id, ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(string id, Object body)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void AfterUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostDefaultImplementation(IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse apiResponseLocalVar, string id, Object body)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void AfterUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(ref bool suppressDefaultLog, IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse apiResponseLocalVar, string id, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        private void OnErrorUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="body"></param>
        partial void OnErrorUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Object body);

        /// <summary>
        /// Update Function Valves By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse?> UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostOrDefaultAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostAsync(id, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Function Valves By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse> UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostAsync(string id, Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(id, body);

                FormatUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(ref id, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/functions/id/{id}/valves/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/functions/id/{id}/valves/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse>();

                        UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/functions/id/{id}/valves/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostDefaultImplementation(apiResponseLocalVar, id, body);

                        Events.ExecuteOnUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostDefaultImplementation(e, "/api/v1/functions/id/{id}/valves/update", uriBuilderLocalVar.Path, id, body);
                Events.ExecuteOnErrorUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse(ILogger<UpdateFunctionValvesByIdApiV1FunctionsIdIdValvesUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
