// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAudioApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AudioApiEvents Events { get; }

        /// <summary>
        /// Get Audio Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAudioConfigApiV1AudioConfigGetApiResponse"/>&gt;</returns>
        Task<IGetAudioConfigApiV1AudioConfigGetApiResponse> GetAudioConfigApiV1AudioConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Audio Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAudioConfigApiV1AudioConfigGetApiResponse"/>?&gt;</returns>
        Task<IGetAudioConfigApiV1AudioConfigGetApiResponse?> GetAudioConfigApiV1AudioConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsApiV1AudioModelsGetApiResponse"/>&gt;</returns>
        Task<IGetModelsApiV1AudioModelsGetApiResponse> GetModelsApiV1AudioModelsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsApiV1AudioModelsGetApiResponse"/>?&gt;</returns>
        Task<IGetModelsApiV1AudioModelsGetApiResponse?> GetModelsApiV1AudioModelsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Voices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVoicesApiV1AudioVoicesGetApiResponse"/>&gt;</returns>
        Task<IGetVoicesApiV1AudioVoicesGetApiResponse> GetVoicesApiV1AudioVoicesGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Voices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVoicesApiV1AudioVoicesGetApiResponse"/>?&gt;</returns>
        Task<IGetVoicesApiV1AudioVoicesGetApiResponse?> GetVoicesApiV1AudioVoicesGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Speech
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpeechApiV1AudioSpeechPostApiResponse"/>&gt;</returns>
        Task<ISpeechApiV1AudioSpeechPostApiResponse> SpeechApiV1AudioSpeechPostAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Speech
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpeechApiV1AudioSpeechPostApiResponse"/>?&gt;</returns>
        Task<ISpeechApiV1AudioSpeechPostApiResponse?> SpeechApiV1AudioSpeechPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transcription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITranscriptionApiV1AudioTranscriptionsPostApiResponse"/>&gt;</returns>
        Task<ITranscriptionApiV1AudioTranscriptionsPostApiResponse> TranscriptionApiV1AudioTranscriptionsPostAsync(System.IO.Stream file, Option<string?> language = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transcription
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="file"></param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITranscriptionApiV1AudioTranscriptionsPostApiResponse"/>?&gt;</returns>
        Task<ITranscriptionApiV1AudioTranscriptionsPostApiResponse?> TranscriptionApiV1AudioTranscriptionsPostOrDefaultAsync(System.IO.Stream file, Option<string?> language = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Audio Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioConfigUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse> UpdateAudioConfigApiV1AudioConfigUpdatePostAsync(AudioConfigUpdateForm audioConfigUpdateForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Audio Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="audioConfigUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse?> UpdateAudioConfigApiV1AudioConfigUpdatePostOrDefaultAsync(AudioConfigUpdateForm audioConfigUpdateForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAudioConfigApiV1AudioConfigGetApiResponse"/>
    /// </summary>
    public interface IGetAudioConfigApiV1AudioConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetModelsApiV1AudioModelsGetApiResponse"/>
    /// </summary>
    public interface IGetModelsApiV1AudioModelsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetVoicesApiV1AudioVoicesGetApiResponse"/>
    /// </summary>
    public interface IGetVoicesApiV1AudioVoicesGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISpeechApiV1AudioSpeechPostApiResponse"/>
    /// </summary>
    public interface ISpeechApiV1AudioSpeechPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITranscriptionApiV1AudioTranscriptionsPostApiResponse"/>
    /// </summary>
    public interface ITranscriptionApiV1AudioTranscriptionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AudioApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAudioConfigApiV1AudioConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAudioConfigApiV1AudioConfigGet;

        internal void ExecuteOnGetAudioConfigApiV1AudioConfigGet(AudioApi.GetAudioConfigApiV1AudioConfigGetApiResponse apiResponse)
        {
            OnGetAudioConfigApiV1AudioConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAudioConfigApiV1AudioConfigGet(Exception exception)
        {
            OnErrorGetAudioConfigApiV1AudioConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetModelsApiV1AudioModelsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetModelsApiV1AudioModelsGet;

        internal void ExecuteOnGetModelsApiV1AudioModelsGet(AudioApi.GetModelsApiV1AudioModelsGetApiResponse apiResponse)
        {
            OnGetModelsApiV1AudioModelsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetModelsApiV1AudioModelsGet(Exception exception)
        {
            OnErrorGetModelsApiV1AudioModelsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetVoicesApiV1AudioVoicesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetVoicesApiV1AudioVoicesGet;

        internal void ExecuteOnGetVoicesApiV1AudioVoicesGet(AudioApi.GetVoicesApiV1AudioVoicesGetApiResponse apiResponse)
        {
            OnGetVoicesApiV1AudioVoicesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetVoicesApiV1AudioVoicesGet(Exception exception)
        {
            OnErrorGetVoicesApiV1AudioVoicesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSpeechApiV1AudioSpeechPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSpeechApiV1AudioSpeechPost;

        internal void ExecuteOnSpeechApiV1AudioSpeechPost(AudioApi.SpeechApiV1AudioSpeechPostApiResponse apiResponse)
        {
            OnSpeechApiV1AudioSpeechPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSpeechApiV1AudioSpeechPost(Exception exception)
        {
            OnErrorSpeechApiV1AudioSpeechPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTranscriptionApiV1AudioTranscriptionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTranscriptionApiV1AudioTranscriptionsPost;

        internal void ExecuteOnTranscriptionApiV1AudioTranscriptionsPost(AudioApi.TranscriptionApiV1AudioTranscriptionsPostApiResponse apiResponse)
        {
            OnTranscriptionApiV1AudioTranscriptionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTranscriptionApiV1AudioTranscriptionsPost(Exception exception)
        {
            OnErrorTranscriptionApiV1AudioTranscriptionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAudioConfigApiV1AudioConfigUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAudioConfigApiV1AudioConfigUpdatePost;

        internal void ExecuteOnUpdateAudioConfigApiV1AudioConfigUpdatePost(AudioApi.UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse apiResponse)
        {
            OnUpdateAudioConfigApiV1AudioConfigUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAudioConfigApiV1AudioConfigUpdatePost(Exception exception)
        {
            OnErrorUpdateAudioConfigApiV1AudioConfigUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AudioApi : IAudioApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AudioApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AudioApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AudioApi(ILogger<AudioApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AudioApiEvents audioApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AudioApi>();
            HttpClient = httpClient;
            Events = audioApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAudioConfigApiV1AudioConfigGetDefaultImplementation(IGetAudioConfigApiV1AudioConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAudioConfigApiV1AudioConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAudioConfigApiV1AudioConfigGet(ref bool suppressDefaultLog, IGetAudioConfigApiV1AudioConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAudioConfigApiV1AudioConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAudioConfigApiV1AudioConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAudioConfigApiV1AudioConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Audio Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAudioConfigApiV1AudioConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetAudioConfigApiV1AudioConfigGetApiResponse?> GetAudioConfigApiV1AudioConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAudioConfigApiV1AudioConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Audio Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAudioConfigApiV1AudioConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetAudioConfigApiV1AudioConfigGetApiResponse> GetAudioConfigApiV1AudioConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/audio/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/audio/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAudioConfigApiV1AudioConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAudioConfigApiV1AudioConfigGetApiResponse>();

                        GetAudioConfigApiV1AudioConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/audio/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAudioConfigApiV1AudioConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAudioConfigApiV1AudioConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAudioConfigApiV1AudioConfigGetDefaultImplementation(e, "/api/v1/audio/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAudioConfigApiV1AudioConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAudioConfigApiV1AudioConfigGetApiResponse"/>
        /// </summary>
        public partial class GetAudioConfigApiV1AudioConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAudioConfigApiV1AudioConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAudioConfigApiV1AudioConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAudioConfigApiV1AudioConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAudioConfigApiV1AudioConfigGetApiResponse(ILogger<GetAudioConfigApiV1AudioConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetModelsApiV1AudioModelsGetDefaultImplementation(IGetModelsApiV1AudioModelsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetModelsApiV1AudioModelsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetModelsApiV1AudioModelsGet(ref bool suppressDefaultLog, IGetModelsApiV1AudioModelsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetModelsApiV1AudioModelsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetModelsApiV1AudioModelsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetModelsApiV1AudioModelsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Models 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsApiV1AudioModelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetModelsApiV1AudioModelsGetApiResponse?> GetModelsApiV1AudioModelsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetModelsApiV1AudioModelsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Models 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsApiV1AudioModelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetModelsApiV1AudioModelsGetApiResponse> GetModelsApiV1AudioModelsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/audio/models"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/audio/models");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetModelsApiV1AudioModelsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetModelsApiV1AudioModelsGetApiResponse>();

                        GetModelsApiV1AudioModelsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/audio/models", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetModelsApiV1AudioModelsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetModelsApiV1AudioModelsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetModelsApiV1AudioModelsGetDefaultImplementation(e, "/api/v1/audio/models", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetModelsApiV1AudioModelsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetModelsApiV1AudioModelsGetApiResponse"/>
        /// </summary>
        public partial class GetModelsApiV1AudioModelsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetModelsApiV1AudioModelsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetModelsApiV1AudioModelsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetModelsApiV1AudioModelsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetModelsApiV1AudioModelsGetApiResponse(ILogger<GetModelsApiV1AudioModelsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetVoicesApiV1AudioVoicesGetDefaultImplementation(IGetVoicesApiV1AudioVoicesGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetVoicesApiV1AudioVoicesGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetVoicesApiV1AudioVoicesGet(ref bool suppressDefaultLog, IGetVoicesApiV1AudioVoicesGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetVoicesApiV1AudioVoicesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetVoicesApiV1AudioVoicesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetVoicesApiV1AudioVoicesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Voices 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVoicesApiV1AudioVoicesGetApiResponse"/>&gt;</returns>
        public async Task<IGetVoicesApiV1AudioVoicesGetApiResponse?> GetVoicesApiV1AudioVoicesGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetVoicesApiV1AudioVoicesGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Voices 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVoicesApiV1AudioVoicesGetApiResponse"/>&gt;</returns>
        public async Task<IGetVoicesApiV1AudioVoicesGetApiResponse> GetVoicesApiV1AudioVoicesGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/audio/voices"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/audio/voices");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetVoicesApiV1AudioVoicesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetVoicesApiV1AudioVoicesGetApiResponse>();

                        GetVoicesApiV1AudioVoicesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/audio/voices", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetVoicesApiV1AudioVoicesGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetVoicesApiV1AudioVoicesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetVoicesApiV1AudioVoicesGetDefaultImplementation(e, "/api/v1/audio/voices", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetVoicesApiV1AudioVoicesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetVoicesApiV1AudioVoicesGetApiResponse"/>
        /// </summary>
        public partial class GetVoicesApiV1AudioVoicesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetVoicesApiV1AudioVoicesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetVoicesApiV1AudioVoicesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetVoicesApiV1AudioVoicesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetVoicesApiV1AudioVoicesGetApiResponse(ILogger<GetVoicesApiV1AudioVoicesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterSpeechApiV1AudioSpeechPostDefaultImplementation(ISpeechApiV1AudioSpeechPostApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterSpeechApiV1AudioSpeechPost(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterSpeechApiV1AudioSpeechPost(ref bool suppressDefaultLog, ISpeechApiV1AudioSpeechPostApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorSpeechApiV1AudioSpeechPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSpeechApiV1AudioSpeechPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorSpeechApiV1AudioSpeechPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Speech 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpeechApiV1AudioSpeechPostApiResponse"/>&gt;</returns>
        public async Task<ISpeechApiV1AudioSpeechPostApiResponse?> SpeechApiV1AudioSpeechPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SpeechApiV1AudioSpeechPostAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Speech 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISpeechApiV1AudioSpeechPostApiResponse"/>&gt;</returns>
        public async Task<ISpeechApiV1AudioSpeechPostApiResponse> SpeechApiV1AudioSpeechPostAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/audio/speech"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/audio/speech");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SpeechApiV1AudioSpeechPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SpeechApiV1AudioSpeechPostApiResponse>();

                        SpeechApiV1AudioSpeechPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/audio/speech", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSpeechApiV1AudioSpeechPostDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnSpeechApiV1AudioSpeechPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSpeechApiV1AudioSpeechPostDefaultImplementation(e, "/api/v1/audio/speech", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorSpeechApiV1AudioSpeechPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SpeechApiV1AudioSpeechPostApiResponse"/>
        /// </summary>
        public partial class SpeechApiV1AudioSpeechPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISpeechApiV1AudioSpeechPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SpeechApiV1AudioSpeechPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SpeechApiV1AudioSpeechPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SpeechApiV1AudioSpeechPostApiResponse(ILogger<SpeechApiV1AudioSpeechPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTranscriptionApiV1AudioTranscriptionsPost(ref System.IO.Stream file, ref Option<string?> language);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateTranscriptionApiV1AudioTranscriptionsPost(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="language"></param>
        private void AfterTranscriptionApiV1AudioTranscriptionsPostDefaultImplementation(ITranscriptionApiV1AudioTranscriptionsPostApiResponse apiResponseLocalVar, System.IO.Stream file, Option<string?> language)
        {
            bool suppressDefaultLog = false;
            AfterTranscriptionApiV1AudioTranscriptionsPost(ref suppressDefaultLog, apiResponseLocalVar, file, language);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="language"></param>
        partial void AfterTranscriptionApiV1AudioTranscriptionsPost(ref bool suppressDefaultLog, ITranscriptionApiV1AudioTranscriptionsPostApiResponse apiResponseLocalVar, System.IO.Stream file, Option<string?> language);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="language"></param>
        private void OnErrorTranscriptionApiV1AudioTranscriptionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file, Option<string?> language)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTranscriptionApiV1AudioTranscriptionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, file, language);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="language"></param>
        partial void OnErrorTranscriptionApiV1AudioTranscriptionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file, Option<string?> language);

        /// <summary>
        /// Transcription 
        /// </summary>
        /// <param name="file"></param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITranscriptionApiV1AudioTranscriptionsPostApiResponse"/>&gt;</returns>
        public async Task<ITranscriptionApiV1AudioTranscriptionsPostApiResponse?> TranscriptionApiV1AudioTranscriptionsPostOrDefaultAsync(System.IO.Stream file, Option<string?> language = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TranscriptionApiV1AudioTranscriptionsPostAsync(file, language, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transcription 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="language"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITranscriptionApiV1AudioTranscriptionsPostApiResponse"/>&gt;</returns>
        public async Task<ITranscriptionApiV1AudioTranscriptionsPostApiResponse> TranscriptionApiV1AudioTranscriptionsPostAsync(System.IO.Stream file, Option<string?> language = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTranscriptionApiV1AudioTranscriptionsPost(file);

                FormatTranscriptionApiV1AudioTranscriptionsPost(ref file, ref language);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/audio/transcriptions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/audio/transcriptions");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    if (language.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("language", ClientUtils.ParameterToString(language.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TranscriptionApiV1AudioTranscriptionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TranscriptionApiV1AudioTranscriptionsPostApiResponse>();

                        TranscriptionApiV1AudioTranscriptionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/audio/transcriptions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTranscriptionApiV1AudioTranscriptionsPostDefaultImplementation(apiResponseLocalVar, file, language);

                        Events.ExecuteOnTranscriptionApiV1AudioTranscriptionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTranscriptionApiV1AudioTranscriptionsPostDefaultImplementation(e, "/api/v1/audio/transcriptions", uriBuilderLocalVar.Path, file, language);
                Events.ExecuteOnErrorTranscriptionApiV1AudioTranscriptionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TranscriptionApiV1AudioTranscriptionsPostApiResponse"/>
        /// </summary>
        public partial class TranscriptionApiV1AudioTranscriptionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ITranscriptionApiV1AudioTranscriptionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TranscriptionApiV1AudioTranscriptionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TranscriptionApiV1AudioTranscriptionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TranscriptionApiV1AudioTranscriptionsPostApiResponse(ILogger<TranscriptionApiV1AudioTranscriptionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAudioConfigApiV1AudioConfigUpdatePost(AudioConfigUpdateForm audioConfigUpdateForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="audioConfigUpdateForm"></param>
        /// <returns></returns>
        private void ValidateUpdateAudioConfigApiV1AudioConfigUpdatePost(AudioConfigUpdateForm audioConfigUpdateForm)
        {
            if (audioConfigUpdateForm == null)
                throw new ArgumentNullException(nameof(audioConfigUpdateForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="audioConfigUpdateForm"></param>
        private void AfterUpdateAudioConfigApiV1AudioConfigUpdatePostDefaultImplementation(IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse apiResponseLocalVar, AudioConfigUpdateForm audioConfigUpdateForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAudioConfigApiV1AudioConfigUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, audioConfigUpdateForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="audioConfigUpdateForm"></param>
        partial void AfterUpdateAudioConfigApiV1AudioConfigUpdatePost(ref bool suppressDefaultLog, IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse apiResponseLocalVar, AudioConfigUpdateForm audioConfigUpdateForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="audioConfigUpdateForm"></param>
        private void OnErrorUpdateAudioConfigApiV1AudioConfigUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AudioConfigUpdateForm audioConfigUpdateForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAudioConfigApiV1AudioConfigUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, audioConfigUpdateForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="audioConfigUpdateForm"></param>
        partial void OnErrorUpdateAudioConfigApiV1AudioConfigUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AudioConfigUpdateForm audioConfigUpdateForm);

        /// <summary>
        /// Update Audio Config 
        /// </summary>
        /// <param name="audioConfigUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse?> UpdateAudioConfigApiV1AudioConfigUpdatePostOrDefaultAsync(AudioConfigUpdateForm audioConfigUpdateForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAudioConfigApiV1AudioConfigUpdatePostAsync(audioConfigUpdateForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Audio Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="audioConfigUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse> UpdateAudioConfigApiV1AudioConfigUpdatePostAsync(AudioConfigUpdateForm audioConfigUpdateForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAudioConfigApiV1AudioConfigUpdatePost(audioConfigUpdateForm);

                FormatUpdateAudioConfigApiV1AudioConfigUpdatePost(audioConfigUpdateForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/audio/config/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/audio/config/update");

                    httpRequestMessageLocalVar.Content = (audioConfigUpdateForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(audioConfigUpdateForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse>();

                        UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/audio/config/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateAudioConfigApiV1AudioConfigUpdatePostDefaultImplementation(apiResponseLocalVar, audioConfigUpdateForm);

                        Events.ExecuteOnUpdateAudioConfigApiV1AudioConfigUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAudioConfigApiV1AudioConfigUpdatePostDefaultImplementation(e, "/api/v1/audio/config/update", uriBuilderLocalVar.Path, audioConfigUpdateForm);
                Events.ExecuteOnErrorUpdateAudioConfigApiV1AudioConfigUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse(ILogger<UpdateAudioConfigApiV1AudioConfigUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
