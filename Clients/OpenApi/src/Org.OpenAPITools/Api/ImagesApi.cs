// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IImagesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ImagesApiEvents Events { get; }

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigApiV1ImagesConfigGetApiResponse"/>&gt;</returns>
        Task<IGetConfigApiV1ImagesConfigGetApiResponse> GetConfigApiV1ImagesConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigApiV1ImagesConfigGetApiResponse"/>?&gt;</returns>
        Task<IGetConfigApiV1ImagesConfigGetApiResponse?> GetConfigApiV1ImagesConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Image Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetImageConfigApiV1ImagesImageConfigGetApiResponse"/>&gt;</returns>
        Task<IGetImageConfigApiV1ImagesImageConfigGetApiResponse> GetImageConfigApiV1ImagesImageConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Image Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetImageConfigApiV1ImagesImageConfigGetApiResponse"/>?&gt;</returns>
        Task<IGetImageConfigApiV1ImagesImageConfigGetApiResponse?> GetImageConfigApiV1ImagesImageConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsApiV1ImagesModelsGetApiResponse"/>&gt;</returns>
        Task<IGetModelsApiV1ImagesModelsGetApiResponse> GetModelsApiV1ImagesModelsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsApiV1ImagesModelsGetApiResponse"/>?&gt;</returns>
        Task<IGetModelsApiV1ImagesModelsGetApiResponse?> GetModelsApiV1ImagesModelsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Image Generations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateImageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImageGenerationsApiV1ImagesGenerationsPostApiResponse"/>&gt;</returns>
        Task<IImageGenerationsApiV1ImagesGenerationsPostApiResponse> ImageGenerationsApiV1ImagesGenerationsPostAsync(GenerateImageForm generateImageForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Image Generations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateImageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImageGenerationsApiV1ImagesGenerationsPostApiResponse"/>?&gt;</returns>
        Task<IImageGenerationsApiV1ImagesGenerationsPostApiResponse?> ImageGenerationsApiV1ImagesGenerationsPostOrDefaultAsync(GenerateImageForm generateImageForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse> UpdateConfigApiV1ImagesConfigUpdatePostAsync(OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse?> UpdateConfigApiV1ImagesConfigUpdatePostOrDefaultAsync(OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Image Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse> UpdateImageConfigApiV1ImagesImageConfigUpdatePostAsync(ImageConfigForm imageConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Image Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="imageConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse?> UpdateImageConfigApiV1ImagesImageConfigUpdatePostOrDefaultAsync(ImageConfigForm imageConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse"/>&gt;</returns>
        Task<IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse> VerifyUrlApiV1ImagesConfigUrlVerifyGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Url
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse"/>?&gt;</returns>
        Task<IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse?> VerifyUrlApiV1ImagesConfigUrlVerifyGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetConfigApiV1ImagesConfigGetApiResponse"/>
    /// </summary>
    public interface IGetConfigApiV1ImagesConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetImageConfigApiV1ImagesImageConfigGetApiResponse"/>
    /// </summary>
    public interface IGetImageConfigApiV1ImagesImageConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetModelsApiV1ImagesModelsGetApiResponse"/>
    /// </summary>
    public interface IGetModelsApiV1ImagesModelsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IImageGenerationsApiV1ImagesGenerationsPostApiResponse"/>
    /// </summary>
    public interface IImageGenerationsApiV1ImagesGenerationsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse"/>
    /// </summary>
    public interface IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ImagesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetConfigApiV1ImagesConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetConfigApiV1ImagesConfigGet;

        internal void ExecuteOnGetConfigApiV1ImagesConfigGet(ImagesApi.GetConfigApiV1ImagesConfigGetApiResponse apiResponse)
        {
            OnGetConfigApiV1ImagesConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConfigApiV1ImagesConfigGet(Exception exception)
        {
            OnErrorGetConfigApiV1ImagesConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetImageConfigApiV1ImagesImageConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetImageConfigApiV1ImagesImageConfigGet;

        internal void ExecuteOnGetImageConfigApiV1ImagesImageConfigGet(ImagesApi.GetImageConfigApiV1ImagesImageConfigGetApiResponse apiResponse)
        {
            OnGetImageConfigApiV1ImagesImageConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetImageConfigApiV1ImagesImageConfigGet(Exception exception)
        {
            OnErrorGetImageConfigApiV1ImagesImageConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetModelsApiV1ImagesModelsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetModelsApiV1ImagesModelsGet;

        internal void ExecuteOnGetModelsApiV1ImagesModelsGet(ImagesApi.GetModelsApiV1ImagesModelsGetApiResponse apiResponse)
        {
            OnGetModelsApiV1ImagesModelsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetModelsApiV1ImagesModelsGet(Exception exception)
        {
            OnErrorGetModelsApiV1ImagesModelsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnImageGenerationsApiV1ImagesGenerationsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorImageGenerationsApiV1ImagesGenerationsPost;

        internal void ExecuteOnImageGenerationsApiV1ImagesGenerationsPost(ImagesApi.ImageGenerationsApiV1ImagesGenerationsPostApiResponse apiResponse)
        {
            OnImageGenerationsApiV1ImagesGenerationsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorImageGenerationsApiV1ImagesGenerationsPost(Exception exception)
        {
            OnErrorImageGenerationsApiV1ImagesGenerationsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateConfigApiV1ImagesConfigUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateConfigApiV1ImagesConfigUpdatePost;

        internal void ExecuteOnUpdateConfigApiV1ImagesConfigUpdatePost(ImagesApi.UpdateConfigApiV1ImagesConfigUpdatePostApiResponse apiResponse)
        {
            OnUpdateConfigApiV1ImagesConfigUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateConfigApiV1ImagesConfigUpdatePost(Exception exception)
        {
            OnErrorUpdateConfigApiV1ImagesConfigUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateImageConfigApiV1ImagesImageConfigUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateImageConfigApiV1ImagesImageConfigUpdatePost;

        internal void ExecuteOnUpdateImageConfigApiV1ImagesImageConfigUpdatePost(ImagesApi.UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse apiResponse)
        {
            OnUpdateImageConfigApiV1ImagesImageConfigUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateImageConfigApiV1ImagesImageConfigUpdatePost(Exception exception)
        {
            OnErrorUpdateImageConfigApiV1ImagesImageConfigUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnVerifyUrlApiV1ImagesConfigUrlVerifyGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorVerifyUrlApiV1ImagesConfigUrlVerifyGet;

        internal void ExecuteOnVerifyUrlApiV1ImagesConfigUrlVerifyGet(ImagesApi.VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse apiResponse)
        {
            OnVerifyUrlApiV1ImagesConfigUrlVerifyGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyUrlApiV1ImagesConfigUrlVerifyGet(Exception exception)
        {
            OnErrorVerifyUrlApiV1ImagesConfigUrlVerifyGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ImagesApi : IImagesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ImagesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ImagesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImagesApi(ILogger<ImagesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ImagesApiEvents imagesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ImagesApi>();
            HttpClient = httpClient;
            Events = imagesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetConfigApiV1ImagesConfigGetDefaultImplementation(IGetConfigApiV1ImagesConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetConfigApiV1ImagesConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetConfigApiV1ImagesConfigGet(ref bool suppressDefaultLog, IGetConfigApiV1ImagesConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetConfigApiV1ImagesConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConfigApiV1ImagesConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetConfigApiV1ImagesConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigApiV1ImagesConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetConfigApiV1ImagesConfigGetApiResponse?> GetConfigApiV1ImagesConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConfigApiV1ImagesConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigApiV1ImagesConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetConfigApiV1ImagesConfigGetApiResponse> GetConfigApiV1ImagesConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/images/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/images/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetConfigApiV1ImagesConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConfigApiV1ImagesConfigGetApiResponse>();

                        GetConfigApiV1ImagesConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/images/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConfigApiV1ImagesConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetConfigApiV1ImagesConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConfigApiV1ImagesConfigGetDefaultImplementation(e, "/api/v1/images/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetConfigApiV1ImagesConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConfigApiV1ImagesConfigGetApiResponse"/>
        /// </summary>
        public partial class GetConfigApiV1ImagesConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetConfigApiV1ImagesConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConfigApiV1ImagesConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConfigApiV1ImagesConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConfigApiV1ImagesConfigGetApiResponse(ILogger<GetConfigApiV1ImagesConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetImageConfigApiV1ImagesImageConfigGetDefaultImplementation(IGetImageConfigApiV1ImagesImageConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetImageConfigApiV1ImagesImageConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetImageConfigApiV1ImagesImageConfigGet(ref bool suppressDefaultLog, IGetImageConfigApiV1ImagesImageConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetImageConfigApiV1ImagesImageConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetImageConfigApiV1ImagesImageConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetImageConfigApiV1ImagesImageConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Image Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetImageConfigApiV1ImagesImageConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetImageConfigApiV1ImagesImageConfigGetApiResponse?> GetImageConfigApiV1ImagesImageConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetImageConfigApiV1ImagesImageConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Image Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetImageConfigApiV1ImagesImageConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetImageConfigApiV1ImagesImageConfigGetApiResponse> GetImageConfigApiV1ImagesImageConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/images/image/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/images/image/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetImageConfigApiV1ImagesImageConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetImageConfigApiV1ImagesImageConfigGetApiResponse>();

                        GetImageConfigApiV1ImagesImageConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/images/image/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetImageConfigApiV1ImagesImageConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetImageConfigApiV1ImagesImageConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetImageConfigApiV1ImagesImageConfigGetDefaultImplementation(e, "/api/v1/images/image/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetImageConfigApiV1ImagesImageConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetImageConfigApiV1ImagesImageConfigGetApiResponse"/>
        /// </summary>
        public partial class GetImageConfigApiV1ImagesImageConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetImageConfigApiV1ImagesImageConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetImageConfigApiV1ImagesImageConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetImageConfigApiV1ImagesImageConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetImageConfigApiV1ImagesImageConfigGetApiResponse(ILogger<GetImageConfigApiV1ImagesImageConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetModelsApiV1ImagesModelsGetDefaultImplementation(IGetModelsApiV1ImagesModelsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetModelsApiV1ImagesModelsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetModelsApiV1ImagesModelsGet(ref bool suppressDefaultLog, IGetModelsApiV1ImagesModelsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetModelsApiV1ImagesModelsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetModelsApiV1ImagesModelsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetModelsApiV1ImagesModelsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Models 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsApiV1ImagesModelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetModelsApiV1ImagesModelsGetApiResponse?> GetModelsApiV1ImagesModelsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetModelsApiV1ImagesModelsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Models 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetModelsApiV1ImagesModelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetModelsApiV1ImagesModelsGetApiResponse> GetModelsApiV1ImagesModelsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/images/models"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/images/models");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetModelsApiV1ImagesModelsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetModelsApiV1ImagesModelsGetApiResponse>();

                        GetModelsApiV1ImagesModelsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/images/models", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetModelsApiV1ImagesModelsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetModelsApiV1ImagesModelsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetModelsApiV1ImagesModelsGetDefaultImplementation(e, "/api/v1/images/models", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetModelsApiV1ImagesModelsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetModelsApiV1ImagesModelsGetApiResponse"/>
        /// </summary>
        public partial class GetModelsApiV1ImagesModelsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetModelsApiV1ImagesModelsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetModelsApiV1ImagesModelsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetModelsApiV1ImagesModelsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetModelsApiV1ImagesModelsGetApiResponse(ILogger<GetModelsApiV1ImagesModelsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatImageGenerationsApiV1ImagesGenerationsPost(GenerateImageForm generateImageForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateImageForm"></param>
        /// <returns></returns>
        private void ValidateImageGenerationsApiV1ImagesGenerationsPost(GenerateImageForm generateImageForm)
        {
            if (generateImageForm == null)
                throw new ArgumentNullException(nameof(generateImageForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateImageForm"></param>
        private void AfterImageGenerationsApiV1ImagesGenerationsPostDefaultImplementation(IImageGenerationsApiV1ImagesGenerationsPostApiResponse apiResponseLocalVar, GenerateImageForm generateImageForm)
        {
            bool suppressDefaultLog = false;
            AfterImageGenerationsApiV1ImagesGenerationsPost(ref suppressDefaultLog, apiResponseLocalVar, generateImageForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateImageForm"></param>
        partial void AfterImageGenerationsApiV1ImagesGenerationsPost(ref bool suppressDefaultLog, IImageGenerationsApiV1ImagesGenerationsPostApiResponse apiResponseLocalVar, GenerateImageForm generateImageForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateImageForm"></param>
        private void OnErrorImageGenerationsApiV1ImagesGenerationsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateImageForm generateImageForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorImageGenerationsApiV1ImagesGenerationsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateImageForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateImageForm"></param>
        partial void OnErrorImageGenerationsApiV1ImagesGenerationsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateImageForm generateImageForm);

        /// <summary>
        /// Image Generations 
        /// </summary>
        /// <param name="generateImageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImageGenerationsApiV1ImagesGenerationsPostApiResponse"/>&gt;</returns>
        public async Task<IImageGenerationsApiV1ImagesGenerationsPostApiResponse?> ImageGenerationsApiV1ImagesGenerationsPostOrDefaultAsync(GenerateImageForm generateImageForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ImageGenerationsApiV1ImagesGenerationsPostAsync(generateImageForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Image Generations 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateImageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImageGenerationsApiV1ImagesGenerationsPostApiResponse"/>&gt;</returns>
        public async Task<IImageGenerationsApiV1ImagesGenerationsPostApiResponse> ImageGenerationsApiV1ImagesGenerationsPostAsync(GenerateImageForm generateImageForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateImageGenerationsApiV1ImagesGenerationsPost(generateImageForm);

                FormatImageGenerationsApiV1ImagesGenerationsPost(generateImageForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/images/generations"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/images/generations");

                    httpRequestMessageLocalVar.Content = (generateImageForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateImageForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ImageGenerationsApiV1ImagesGenerationsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ImageGenerationsApiV1ImagesGenerationsPostApiResponse>();

                        ImageGenerationsApiV1ImagesGenerationsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/images/generations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterImageGenerationsApiV1ImagesGenerationsPostDefaultImplementation(apiResponseLocalVar, generateImageForm);

                        Events.ExecuteOnImageGenerationsApiV1ImagesGenerationsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorImageGenerationsApiV1ImagesGenerationsPostDefaultImplementation(e, "/api/v1/images/generations", uriBuilderLocalVar.Path, generateImageForm);
                Events.ExecuteOnErrorImageGenerationsApiV1ImagesGenerationsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ImageGenerationsApiV1ImagesGenerationsPostApiResponse"/>
        /// </summary>
        public partial class ImageGenerationsApiV1ImagesGenerationsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IImageGenerationsApiV1ImagesGenerationsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ImageGenerationsApiV1ImagesGenerationsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ImageGenerationsApiV1ImagesGenerationsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ImageGenerationsApiV1ImagesGenerationsPostApiResponse(ILogger<ImageGenerationsApiV1ImagesGenerationsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateConfigApiV1ImagesConfigUpdatePost(OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        /// <returns></returns>
        private void ValidateUpdateConfigApiV1ImagesConfigUpdatePost(OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm)
        {
            if (openWebuiRoutersImagesConfigForm == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersImagesConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        private void AfterUpdateConfigApiV1ImagesConfigUpdatePostDefaultImplementation(IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse apiResponseLocalVar, OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateConfigApiV1ImagesConfigUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, openWebuiRoutersImagesConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        partial void AfterUpdateConfigApiV1ImagesConfigUpdatePost(ref bool suppressDefaultLog, IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse apiResponseLocalVar, OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        private void OnErrorUpdateConfigApiV1ImagesConfigUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateConfigApiV1ImagesConfigUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, openWebuiRoutersImagesConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        partial void OnErrorUpdateConfigApiV1ImagesConfigUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm);

        /// <summary>
        /// Update Config 
        /// </summary>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse?> UpdateConfigApiV1ImagesConfigUpdatePostOrDefaultAsync(OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateConfigApiV1ImagesConfigUpdatePostAsync(openWebuiRoutersImagesConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse> UpdateConfigApiV1ImagesConfigUpdatePostAsync(OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateConfigApiV1ImagesConfigUpdatePost(openWebuiRoutersImagesConfigForm);

                FormatUpdateConfigApiV1ImagesConfigUpdatePost(openWebuiRoutersImagesConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/images/config/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/images/config/update");

                    httpRequestMessageLocalVar.Content = (openWebuiRoutersImagesConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(openWebuiRoutersImagesConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateConfigApiV1ImagesConfigUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateConfigApiV1ImagesConfigUpdatePostApiResponse>();

                        UpdateConfigApiV1ImagesConfigUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/images/config/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateConfigApiV1ImagesConfigUpdatePostDefaultImplementation(apiResponseLocalVar, openWebuiRoutersImagesConfigForm);

                        Events.ExecuteOnUpdateConfigApiV1ImagesConfigUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateConfigApiV1ImagesConfigUpdatePostDefaultImplementation(e, "/api/v1/images/config/update", uriBuilderLocalVar.Path, openWebuiRoutersImagesConfigForm);
                Events.ExecuteOnErrorUpdateConfigApiV1ImagesConfigUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateConfigApiV1ImagesConfigUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateConfigApiV1ImagesConfigUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateConfigApiV1ImagesConfigUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateConfigApiV1ImagesConfigUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateConfigApiV1ImagesConfigUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateConfigApiV1ImagesConfigUpdatePostApiResponse(ILogger<UpdateConfigApiV1ImagesConfigUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateImageConfigApiV1ImagesImageConfigUpdatePost(ImageConfigForm imageConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="imageConfigForm"></param>
        /// <returns></returns>
        private void ValidateUpdateImageConfigApiV1ImagesImageConfigUpdatePost(ImageConfigForm imageConfigForm)
        {
            if (imageConfigForm == null)
                throw new ArgumentNullException(nameof(imageConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="imageConfigForm"></param>
        private void AfterUpdateImageConfigApiV1ImagesImageConfigUpdatePostDefaultImplementation(IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse apiResponseLocalVar, ImageConfigForm imageConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateImageConfigApiV1ImagesImageConfigUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, imageConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="imageConfigForm"></param>
        partial void AfterUpdateImageConfigApiV1ImagesImageConfigUpdatePost(ref bool suppressDefaultLog, IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse apiResponseLocalVar, ImageConfigForm imageConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="imageConfigForm"></param>
        private void OnErrorUpdateImageConfigApiV1ImagesImageConfigUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ImageConfigForm imageConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateImageConfigApiV1ImagesImageConfigUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, imageConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="imageConfigForm"></param>
        partial void OnErrorUpdateImageConfigApiV1ImagesImageConfigUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ImageConfigForm imageConfigForm);

        /// <summary>
        /// Update Image Config 
        /// </summary>
        /// <param name="imageConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse?> UpdateImageConfigApiV1ImagesImageConfigUpdatePostOrDefaultAsync(ImageConfigForm imageConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateImageConfigApiV1ImagesImageConfigUpdatePostAsync(imageConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Image Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse> UpdateImageConfigApiV1ImagesImageConfigUpdatePostAsync(ImageConfigForm imageConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateImageConfigApiV1ImagesImageConfigUpdatePost(imageConfigForm);

                FormatUpdateImageConfigApiV1ImagesImageConfigUpdatePost(imageConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/images/image/config/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/images/image/config/update");

                    httpRequestMessageLocalVar.Content = (imageConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(imageConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse>();

                        UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/images/image/config/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateImageConfigApiV1ImagesImageConfigUpdatePostDefaultImplementation(apiResponseLocalVar, imageConfigForm);

                        Events.ExecuteOnUpdateImageConfigApiV1ImagesImageConfigUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateImageConfigApiV1ImagesImageConfigUpdatePostDefaultImplementation(e, "/api/v1/images/image/config/update", uriBuilderLocalVar.Path, imageConfigForm);
                Events.ExecuteOnErrorUpdateImageConfigApiV1ImagesImageConfigUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse(ILogger<UpdateImageConfigApiV1ImagesImageConfigUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterVerifyUrlApiV1ImagesConfigUrlVerifyGetDefaultImplementation(IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterVerifyUrlApiV1ImagesConfigUrlVerifyGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterVerifyUrlApiV1ImagesConfigUrlVerifyGet(ref bool suppressDefaultLog, IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorVerifyUrlApiV1ImagesConfigUrlVerifyGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyUrlApiV1ImagesConfigUrlVerifyGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorVerifyUrlApiV1ImagesConfigUrlVerifyGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Verify Url 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse"/>&gt;</returns>
        public async Task<IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse?> VerifyUrlApiV1ImagesConfigUrlVerifyGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyUrlApiV1ImagesConfigUrlVerifyGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verify Url 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse"/>&gt;</returns>
        public async Task<IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse> VerifyUrlApiV1ImagesConfigUrlVerifyGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/images/config/url/verify"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/images/config/url/verify");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse>();

                        VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/images/config/url/verify", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifyUrlApiV1ImagesConfigUrlVerifyGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnVerifyUrlApiV1ImagesConfigUrlVerifyGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyUrlApiV1ImagesConfigUrlVerifyGetDefaultImplementation(e, "/api/v1/images/config/url/verify", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorVerifyUrlApiV1ImagesConfigUrlVerifyGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse"/>
        /// </summary>
        public partial class VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IVerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse(ILogger<VerifyUrlApiV1ImagesConfigUrlVerifyGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
