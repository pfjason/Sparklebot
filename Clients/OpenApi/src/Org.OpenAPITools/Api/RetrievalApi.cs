// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IRetrievalApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        RetrievalApiEvents Events { get; }

        /// <summary>
        /// Delete Entries From Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse"/>&gt;</returns>
        Task<IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse> DeleteEntriesFromCollectionApiV1RetrievalDeletePostAsync(DeleteForm deleteForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Entries From Collection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="deleteForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse"/>?&gt;</returns>
        Task<IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse?> DeleteEntriesFromCollectionApiV1RetrievalDeletePostOrDefaultAsync(DeleteForm deleteForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Embedding Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse"/>&gt;</returns>
        Task<IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse> GetEmbeddingConfigApiV1RetrievalEmbeddingGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Embedding Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse"/>?&gt;</returns>
        Task<IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse?> GetEmbeddingConfigApiV1RetrievalEmbeddingGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse"/>&gt;</returns>
        Task<IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse> GetEmbeddingsApiV1RetrievalEfTextGetAsync(string? text = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="text"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse"/>?&gt;</returns>
        Task<IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse?> GetEmbeddingsApiV1RetrievalEfTextGetOrDefaultAsync(string? text = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Rag Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRagConfigApiV1RetrievalConfigGetApiResponse"/>&gt;</returns>
        Task<IGetRagConfigApiV1RetrievalConfigGetApiResponse> GetRagConfigApiV1RetrievalConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Rag Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRagConfigApiV1RetrievalConfigGetApiResponse"/>?&gt;</returns>
        Task<IGetRagConfigApiV1RetrievalConfigGetApiResponse?> GetRagConfigApiV1RetrievalConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusApiV1RetrievalGetApiResponse"/>&gt;</returns>
        Task<IGetStatusApiV1RetrievalGetApiResponse> GetStatusApiV1RetrievalGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusApiV1RetrievalGetApiResponse"/>?&gt;</returns>
        Task<IGetStatusApiV1RetrievalGetApiResponse?> GetStatusApiV1RetrievalGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processFileForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessFileApiV1RetrievalProcessFilePostApiResponse"/>&gt;</returns>
        Task<IProcessFileApiV1RetrievalProcessFilePostApiResponse> ProcessFileApiV1RetrievalProcessFilePostAsync(ProcessFileForm processFileForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process File
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="processFileForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessFileApiV1RetrievalProcessFilePostApiResponse"/>?&gt;</returns>
        Task<IProcessFileApiV1RetrievalProcessFilePostApiResponse?> ProcessFileApiV1RetrievalProcessFilePostOrDefaultAsync(ProcessFileForm processFileForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Files Batch
        /// </summary>
        /// <remarks>
        /// Process a batch of files and save them to the vector database.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchProcessFilesForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse"/>&gt;</returns>
        Task<IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse> ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostAsync(BatchProcessFilesForm batchProcessFilesForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Files Batch
        /// </summary>
        /// <remarks>
        /// Process a batch of files and save them to the vector database.
        /// </remarks>
        /// <param name="batchProcessFilesForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse"/>?&gt;</returns>
        Task<IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse?> ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostOrDefaultAsync(BatchProcessFilesForm batchProcessFilesForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processTextForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessTextApiV1RetrievalProcessTextPostApiResponse"/>&gt;</returns>
        Task<IProcessTextApiV1RetrievalProcessTextPostApiResponse> ProcessTextApiV1RetrievalProcessTextPostAsync(ProcessTextForm processTextForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="processTextForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessTextApiV1RetrievalProcessTextPostApiResponse"/>?&gt;</returns>
        Task<IProcessTextApiV1RetrievalProcessTextPostApiResponse?> ProcessTextApiV1RetrievalProcessTextPostOrDefaultAsync(ProcessTextForm processTextForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Web
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessWebApiV1RetrievalProcessWebPostApiResponse"/>&gt;</returns>
        Task<IProcessWebApiV1RetrievalProcessWebPostApiResponse> ProcessWebApiV1RetrievalProcessWebPostAsync(ProcessUrlForm processUrlForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Web
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="processUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessWebApiV1RetrievalProcessWebPostApiResponse"/>?&gt;</returns>
        Task<IProcessWebApiV1RetrievalProcessWebPostApiResponse?> ProcessWebApiV1RetrievalProcessWebPostOrDefaultAsync(ProcessUrlForm processUrlForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Web Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse"/>&gt;</returns>
        Task<IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse> ProcessWebSearchApiV1RetrievalProcessWebSearchPostAsync(SearchForm searchForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Web Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="searchForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse"/>?&gt;</returns>
        Task<IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse?> ProcessWebSearchApiV1RetrievalProcessWebSearchPostOrDefaultAsync(SearchForm searchForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Youtube Video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse"/>&gt;</returns>
        Task<IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse> ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostAsync(ProcessUrlForm processUrlForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Process Youtube Video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="processUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse"/>?&gt;</returns>
        Task<IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse?> ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostOrDefaultAsync(ProcessUrlForm processUrlForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Query Collection Handler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryCollectionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse"/>&gt;</returns>
        Task<IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse> QueryCollectionHandlerApiV1RetrievalQueryCollectionPostAsync(QueryCollectionsForm queryCollectionsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Query Collection Handler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="queryCollectionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse"/>?&gt;</returns>
        Task<IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse?> QueryCollectionHandlerApiV1RetrievalQueryCollectionPostOrDefaultAsync(QueryCollectionsForm queryCollectionsForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Query Doc Handler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDocForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse"/>&gt;</returns>
        Task<IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse> QueryDocHandlerApiV1RetrievalQueryDocPostAsync(QueryDocForm queryDocForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Query Doc Handler
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="queryDocForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse"/>?&gt;</returns>
        Task<IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse?> QueryDocHandlerApiV1RetrievalQueryDocPostOrDefaultAsync(QueryDocForm queryDocForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset Upload Dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse"/>&gt;</returns>
        Task<IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse> ResetUploadDirApiV1RetrievalResetUploadsPostAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset Upload Dir
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse"/>?&gt;</returns>
        Task<IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse?> ResetUploadDirApiV1RetrievalResetUploadsPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset Vector Db
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetVectorDbApiV1RetrievalResetDbPostApiResponse"/>&gt;</returns>
        Task<IResetVectorDbApiV1RetrievalResetDbPostApiResponse> ResetVectorDbApiV1RetrievalResetDbPostAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset Vector Db
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetVectorDbApiV1RetrievalResetDbPostApiResponse"/>?&gt;</returns>
        Task<IResetVectorDbApiV1RetrievalResetDbPostApiResponse?> ResetVectorDbApiV1RetrievalResetDbPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Embedding Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="embeddingModelUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse> UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostAsync(EmbeddingModelUpdateForm embeddingModelUpdateForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Embedding Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="embeddingModelUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse?> UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostOrDefaultAsync(EmbeddingModelUpdateForm embeddingModelUpdateForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Rag Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse> UpdateRagConfigApiV1RetrievalConfigUpdatePostAsync(OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Rag Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse?> UpdateRagConfigApiV1RetrievalConfigUpdatePostOrDefaultAsync(OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse"/>
    /// </summary>
    public interface IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse"/>
    /// </summary>
    public interface IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse"/>
    /// </summary>
    public interface IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetRagConfigApiV1RetrievalConfigGetApiResponse"/>
    /// </summary>
    public interface IGetRagConfigApiV1RetrievalConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetStatusApiV1RetrievalGetApiResponse"/>
    /// </summary>
    public interface IGetStatusApiV1RetrievalGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IProcessFileApiV1RetrievalProcessFilePostApiResponse"/>
    /// </summary>
    public interface IProcessFileApiV1RetrievalProcessFilePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse"/>
    /// </summary>
    public interface IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.BatchProcessFilesResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IProcessTextApiV1RetrievalProcessTextPostApiResponse"/>
    /// </summary>
    public interface IProcessTextApiV1RetrievalProcessTextPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IProcessWebApiV1RetrievalProcessWebPostApiResponse"/>
    /// </summary>
    public interface IProcessWebApiV1RetrievalProcessWebPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse"/>
    /// </summary>
    public interface IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse"/>
    /// </summary>
    public interface IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse"/>
    /// </summary>
    public interface IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse"/>
    /// </summary>
    public interface IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse"/>
    /// </summary>
    public interface IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IResetVectorDbApiV1RetrievalResetDbPostApiResponse"/>
    /// </summary>
    public interface IResetVectorDbApiV1RetrievalResetDbPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class RetrievalApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteEntriesFromCollectionApiV1RetrievalDeletePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteEntriesFromCollectionApiV1RetrievalDeletePost;

        internal void ExecuteOnDeleteEntriesFromCollectionApiV1RetrievalDeletePost(RetrievalApi.DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse apiResponse)
        {
            OnDeleteEntriesFromCollectionApiV1RetrievalDeletePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteEntriesFromCollectionApiV1RetrievalDeletePost(Exception exception)
        {
            OnErrorDeleteEntriesFromCollectionApiV1RetrievalDeletePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEmbeddingConfigApiV1RetrievalEmbeddingGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEmbeddingConfigApiV1RetrievalEmbeddingGet;

        internal void ExecuteOnGetEmbeddingConfigApiV1RetrievalEmbeddingGet(RetrievalApi.GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse apiResponse)
        {
            OnGetEmbeddingConfigApiV1RetrievalEmbeddingGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmbeddingConfigApiV1RetrievalEmbeddingGet(Exception exception)
        {
            OnErrorGetEmbeddingConfigApiV1RetrievalEmbeddingGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEmbeddingsApiV1RetrievalEfTextGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEmbeddingsApiV1RetrievalEfTextGet;

        internal void ExecuteOnGetEmbeddingsApiV1RetrievalEfTextGet(RetrievalApi.GetEmbeddingsApiV1RetrievalEfTextGetApiResponse apiResponse)
        {
            OnGetEmbeddingsApiV1RetrievalEfTextGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmbeddingsApiV1RetrievalEfTextGet(Exception exception)
        {
            OnErrorGetEmbeddingsApiV1RetrievalEfTextGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRagConfigApiV1RetrievalConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRagConfigApiV1RetrievalConfigGet;

        internal void ExecuteOnGetRagConfigApiV1RetrievalConfigGet(RetrievalApi.GetRagConfigApiV1RetrievalConfigGetApiResponse apiResponse)
        {
            OnGetRagConfigApiV1RetrievalConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRagConfigApiV1RetrievalConfigGet(Exception exception)
        {
            OnErrorGetRagConfigApiV1RetrievalConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStatusApiV1RetrievalGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStatusApiV1RetrievalGet;

        internal void ExecuteOnGetStatusApiV1RetrievalGet(RetrievalApi.GetStatusApiV1RetrievalGetApiResponse apiResponse)
        {
            OnGetStatusApiV1RetrievalGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStatusApiV1RetrievalGet(Exception exception)
        {
            OnErrorGetStatusApiV1RetrievalGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessFileApiV1RetrievalProcessFilePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessFileApiV1RetrievalProcessFilePost;

        internal void ExecuteOnProcessFileApiV1RetrievalProcessFilePost(RetrievalApi.ProcessFileApiV1RetrievalProcessFilePostApiResponse apiResponse)
        {
            OnProcessFileApiV1RetrievalProcessFilePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessFileApiV1RetrievalProcessFilePost(Exception exception)
        {
            OnErrorProcessFileApiV1RetrievalProcessFilePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessFilesBatchApiV1RetrievalProcessFilesBatchPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessFilesBatchApiV1RetrievalProcessFilesBatchPost;

        internal void ExecuteOnProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(RetrievalApi.ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse apiResponse)
        {
            OnProcessFilesBatchApiV1RetrievalProcessFilesBatchPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(Exception exception)
        {
            OnErrorProcessFilesBatchApiV1RetrievalProcessFilesBatchPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessTextApiV1RetrievalProcessTextPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessTextApiV1RetrievalProcessTextPost;

        internal void ExecuteOnProcessTextApiV1RetrievalProcessTextPost(RetrievalApi.ProcessTextApiV1RetrievalProcessTextPostApiResponse apiResponse)
        {
            OnProcessTextApiV1RetrievalProcessTextPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessTextApiV1RetrievalProcessTextPost(Exception exception)
        {
            OnErrorProcessTextApiV1RetrievalProcessTextPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessWebApiV1RetrievalProcessWebPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessWebApiV1RetrievalProcessWebPost;

        internal void ExecuteOnProcessWebApiV1RetrievalProcessWebPost(RetrievalApi.ProcessWebApiV1RetrievalProcessWebPostApiResponse apiResponse)
        {
            OnProcessWebApiV1RetrievalProcessWebPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessWebApiV1RetrievalProcessWebPost(Exception exception)
        {
            OnErrorProcessWebApiV1RetrievalProcessWebPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessWebSearchApiV1RetrievalProcessWebSearchPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessWebSearchApiV1RetrievalProcessWebSearchPost;

        internal void ExecuteOnProcessWebSearchApiV1RetrievalProcessWebSearchPost(RetrievalApi.ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse apiResponse)
        {
            OnProcessWebSearchApiV1RetrievalProcessWebSearchPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessWebSearchApiV1RetrievalProcessWebSearchPost(Exception exception)
        {
            OnErrorProcessWebSearchApiV1RetrievalProcessWebSearchPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessYoutubeVideoApiV1RetrievalProcessYoutubePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessYoutubeVideoApiV1RetrievalProcessYoutubePost;

        internal void ExecuteOnProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(RetrievalApi.ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse apiResponse)
        {
            OnProcessYoutubeVideoApiV1RetrievalProcessYoutubePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(Exception exception)
        {
            OnErrorProcessYoutubeVideoApiV1RetrievalProcessYoutubePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnQueryCollectionHandlerApiV1RetrievalQueryCollectionPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorQueryCollectionHandlerApiV1RetrievalQueryCollectionPost;

        internal void ExecuteOnQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(RetrievalApi.QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse apiResponse)
        {
            OnQueryCollectionHandlerApiV1RetrievalQueryCollectionPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(Exception exception)
        {
            OnErrorQueryCollectionHandlerApiV1RetrievalQueryCollectionPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnQueryDocHandlerApiV1RetrievalQueryDocPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorQueryDocHandlerApiV1RetrievalQueryDocPost;

        internal void ExecuteOnQueryDocHandlerApiV1RetrievalQueryDocPost(RetrievalApi.QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse apiResponse)
        {
            OnQueryDocHandlerApiV1RetrievalQueryDocPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorQueryDocHandlerApiV1RetrievalQueryDocPost(Exception exception)
        {
            OnErrorQueryDocHandlerApiV1RetrievalQueryDocPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResetUploadDirApiV1RetrievalResetUploadsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResetUploadDirApiV1RetrievalResetUploadsPost;

        internal void ExecuteOnResetUploadDirApiV1RetrievalResetUploadsPost(RetrievalApi.ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse apiResponse)
        {
            OnResetUploadDirApiV1RetrievalResetUploadsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResetUploadDirApiV1RetrievalResetUploadsPost(Exception exception)
        {
            OnErrorResetUploadDirApiV1RetrievalResetUploadsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResetVectorDbApiV1RetrievalResetDbPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResetVectorDbApiV1RetrievalResetDbPost;

        internal void ExecuteOnResetVectorDbApiV1RetrievalResetDbPost(RetrievalApi.ResetVectorDbApiV1RetrievalResetDbPostApiResponse apiResponse)
        {
            OnResetVectorDbApiV1RetrievalResetDbPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResetVectorDbApiV1RetrievalResetDbPost(Exception exception)
        {
            OnErrorResetVectorDbApiV1RetrievalResetDbPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost;

        internal void ExecuteOnUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(RetrievalApi.UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse apiResponse)
        {
            OnUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(Exception exception)
        {
            OnErrorUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateRagConfigApiV1RetrievalConfigUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateRagConfigApiV1RetrievalConfigUpdatePost;

        internal void ExecuteOnUpdateRagConfigApiV1RetrievalConfigUpdatePost(RetrievalApi.UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse apiResponse)
        {
            OnUpdateRagConfigApiV1RetrievalConfigUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateRagConfigApiV1RetrievalConfigUpdatePost(Exception exception)
        {
            OnErrorUpdateRagConfigApiV1RetrievalConfigUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class RetrievalApi : IRetrievalApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<RetrievalApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public RetrievalApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetrievalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetrievalApi(ILogger<RetrievalApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, RetrievalApiEvents retrievalApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<RetrievalApi>();
            HttpClient = httpClient;
            Events = retrievalApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatDeleteEntriesFromCollectionApiV1RetrievalDeletePost(DeleteForm deleteForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="deleteForm"></param>
        /// <returns></returns>
        private void ValidateDeleteEntriesFromCollectionApiV1RetrievalDeletePost(DeleteForm deleteForm)
        {
            if (deleteForm == null)
                throw new ArgumentNullException(nameof(deleteForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deleteForm"></param>
        private void AfterDeleteEntriesFromCollectionApiV1RetrievalDeletePostDefaultImplementation(IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse apiResponseLocalVar, DeleteForm deleteForm)
        {
            bool suppressDefaultLog = false;
            AfterDeleteEntriesFromCollectionApiV1RetrievalDeletePost(ref suppressDefaultLog, apiResponseLocalVar, deleteForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="deleteForm"></param>
        partial void AfterDeleteEntriesFromCollectionApiV1RetrievalDeletePost(ref bool suppressDefaultLog, IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse apiResponseLocalVar, DeleteForm deleteForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="deleteForm"></param>
        private void OnErrorDeleteEntriesFromCollectionApiV1RetrievalDeletePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DeleteForm deleteForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteEntriesFromCollectionApiV1RetrievalDeletePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, deleteForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="deleteForm"></param>
        partial void OnErrorDeleteEntriesFromCollectionApiV1RetrievalDeletePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DeleteForm deleteForm);

        /// <summary>
        /// Delete Entries From Collection 
        /// </summary>
        /// <param name="deleteForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse"/>&gt;</returns>
        public async Task<IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse?> DeleteEntriesFromCollectionApiV1RetrievalDeletePostOrDefaultAsync(DeleteForm deleteForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteEntriesFromCollectionApiV1RetrievalDeletePostAsync(deleteForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Entries From Collection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse"/>&gt;</returns>
        public async Task<IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse> DeleteEntriesFromCollectionApiV1RetrievalDeletePostAsync(DeleteForm deleteForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteEntriesFromCollectionApiV1RetrievalDeletePost(deleteForm);

                FormatDeleteEntriesFromCollectionApiV1RetrievalDeletePost(deleteForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/delete");

                    httpRequestMessageLocalVar.Content = (deleteForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(deleteForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse>();

                        DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteEntriesFromCollectionApiV1RetrievalDeletePostDefaultImplementation(apiResponseLocalVar, deleteForm);

                        Events.ExecuteOnDeleteEntriesFromCollectionApiV1RetrievalDeletePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteEntriesFromCollectionApiV1RetrievalDeletePostDefaultImplementation(e, "/api/v1/retrieval/delete", uriBuilderLocalVar.Path, deleteForm);
                Events.ExecuteOnErrorDeleteEntriesFromCollectionApiV1RetrievalDeletePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse"/>
        /// </summary>
        public partial class DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse(ILogger<DeleteEntriesFromCollectionApiV1RetrievalDeletePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetEmbeddingConfigApiV1RetrievalEmbeddingGetDefaultImplementation(IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetEmbeddingConfigApiV1RetrievalEmbeddingGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetEmbeddingConfigApiV1RetrievalEmbeddingGet(ref bool suppressDefaultLog, IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetEmbeddingConfigApiV1RetrievalEmbeddingGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmbeddingConfigApiV1RetrievalEmbeddingGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetEmbeddingConfigApiV1RetrievalEmbeddingGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Embedding Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse"/>&gt;</returns>
        public async Task<IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse?> GetEmbeddingConfigApiV1RetrievalEmbeddingGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmbeddingConfigApiV1RetrievalEmbeddingGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Embedding Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse"/>&gt;</returns>
        public async Task<IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse> GetEmbeddingConfigApiV1RetrievalEmbeddingGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/embedding"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/embedding");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse>();

                        GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/embedding", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmbeddingConfigApiV1RetrievalEmbeddingGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetEmbeddingConfigApiV1RetrievalEmbeddingGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmbeddingConfigApiV1RetrievalEmbeddingGetDefaultImplementation(e, "/api/v1/retrieval/embedding", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetEmbeddingConfigApiV1RetrievalEmbeddingGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse"/>
        /// </summary>
        public partial class GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse(ILogger<GetEmbeddingConfigApiV1RetrievalEmbeddingGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEmbeddingsApiV1RetrievalEfTextGet(ref string? text);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="text"></param>
        private void AfterGetEmbeddingsApiV1RetrievalEfTextGetDefaultImplementation(IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse apiResponseLocalVar, string? text)
        {
            bool suppressDefaultLog = false;
            AfterGetEmbeddingsApiV1RetrievalEfTextGet(ref suppressDefaultLog, apiResponseLocalVar, text);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="text"></param>
        partial void AfterGetEmbeddingsApiV1RetrievalEfTextGet(ref bool suppressDefaultLog, IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse apiResponseLocalVar, string? text);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="text"></param>
        private void OnErrorGetEmbeddingsApiV1RetrievalEfTextGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string? text)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmbeddingsApiV1RetrievalEfTextGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, text);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="text"></param>
        partial void OnErrorGetEmbeddingsApiV1RetrievalEfTextGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string? text);

        /// <summary>
        /// Get Embeddings 
        /// </summary>
        /// <param name="text"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse"/>&gt;</returns>
        public async Task<IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse?> GetEmbeddingsApiV1RetrievalEfTextGetOrDefaultAsync(string? text = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmbeddingsApiV1RetrievalEfTextGetAsync(text, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Embeddings 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse"/>&gt;</returns>
        public async Task<IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse> GetEmbeddingsApiV1RetrievalEfTextGetAsync(string? text = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetEmbeddingsApiV1RetrievalEfTextGet(ref text);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/ef/{text}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/ef/{text}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btext%7D", Uri.EscapeDataString(text.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEmbeddingsApiV1RetrievalEfTextGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmbeddingsApiV1RetrievalEfTextGetApiResponse>();

                        GetEmbeddingsApiV1RetrievalEfTextGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/ef/{text}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmbeddingsApiV1RetrievalEfTextGetDefaultImplementation(apiResponseLocalVar, text);

                        Events.ExecuteOnGetEmbeddingsApiV1RetrievalEfTextGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmbeddingsApiV1RetrievalEfTextGetDefaultImplementation(e, "/api/v1/retrieval/ef/{text}", uriBuilderLocalVar.Path, text);
                Events.ExecuteOnErrorGetEmbeddingsApiV1RetrievalEfTextGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmbeddingsApiV1RetrievalEfTextGetApiResponse"/>
        /// </summary>
        public partial class GetEmbeddingsApiV1RetrievalEfTextGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetEmbeddingsApiV1RetrievalEfTextGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmbeddingsApiV1RetrievalEfTextGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmbeddingsApiV1RetrievalEfTextGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmbeddingsApiV1RetrievalEfTextGetApiResponse(ILogger<GetEmbeddingsApiV1RetrievalEfTextGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetRagConfigApiV1RetrievalConfigGetDefaultImplementation(IGetRagConfigApiV1RetrievalConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetRagConfigApiV1RetrievalConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetRagConfigApiV1RetrievalConfigGet(ref bool suppressDefaultLog, IGetRagConfigApiV1RetrievalConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetRagConfigApiV1RetrievalConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetRagConfigApiV1RetrievalConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetRagConfigApiV1RetrievalConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Rag Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRagConfigApiV1RetrievalConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetRagConfigApiV1RetrievalConfigGetApiResponse?> GetRagConfigApiV1RetrievalConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRagConfigApiV1RetrievalConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Rag Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRagConfigApiV1RetrievalConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetRagConfigApiV1RetrievalConfigGetApiResponse> GetRagConfigApiV1RetrievalConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRagConfigApiV1RetrievalConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRagConfigApiV1RetrievalConfigGetApiResponse>();

                        GetRagConfigApiV1RetrievalConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRagConfigApiV1RetrievalConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetRagConfigApiV1RetrievalConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRagConfigApiV1RetrievalConfigGetDefaultImplementation(e, "/api/v1/retrieval/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetRagConfigApiV1RetrievalConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRagConfigApiV1RetrievalConfigGetApiResponse"/>
        /// </summary>
        public partial class GetRagConfigApiV1RetrievalConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetRagConfigApiV1RetrievalConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRagConfigApiV1RetrievalConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRagConfigApiV1RetrievalConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRagConfigApiV1RetrievalConfigGetApiResponse(ILogger<GetRagConfigApiV1RetrievalConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetStatusApiV1RetrievalGetDefaultImplementation(IGetStatusApiV1RetrievalGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetStatusApiV1RetrievalGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetStatusApiV1RetrievalGet(ref bool suppressDefaultLog, IGetStatusApiV1RetrievalGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetStatusApiV1RetrievalGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStatusApiV1RetrievalGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetStatusApiV1RetrievalGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Status 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusApiV1RetrievalGetApiResponse"/>&gt;</returns>
        public async Task<IGetStatusApiV1RetrievalGetApiResponse?> GetStatusApiV1RetrievalGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStatusApiV1RetrievalGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusApiV1RetrievalGetApiResponse"/>&gt;</returns>
        public async Task<IGetStatusApiV1RetrievalGetApiResponse> GetStatusApiV1RetrievalGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStatusApiV1RetrievalGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStatusApiV1RetrievalGetApiResponse>();

                        GetStatusApiV1RetrievalGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStatusApiV1RetrievalGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetStatusApiV1RetrievalGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStatusApiV1RetrievalGetDefaultImplementation(e, "/api/v1/retrieval/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetStatusApiV1RetrievalGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStatusApiV1RetrievalGetApiResponse"/>
        /// </summary>
        public partial class GetStatusApiV1RetrievalGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetStatusApiV1RetrievalGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStatusApiV1RetrievalGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStatusApiV1RetrievalGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStatusApiV1RetrievalGetApiResponse(ILogger<GetStatusApiV1RetrievalGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessFileApiV1RetrievalProcessFilePost(ProcessFileForm processFileForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="processFileForm"></param>
        /// <returns></returns>
        private void ValidateProcessFileApiV1RetrievalProcessFilePost(ProcessFileForm processFileForm)
        {
            if (processFileForm == null)
                throw new ArgumentNullException(nameof(processFileForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processFileForm"></param>
        private void AfterProcessFileApiV1RetrievalProcessFilePostDefaultImplementation(IProcessFileApiV1RetrievalProcessFilePostApiResponse apiResponseLocalVar, ProcessFileForm processFileForm)
        {
            bool suppressDefaultLog = false;
            AfterProcessFileApiV1RetrievalProcessFilePost(ref suppressDefaultLog, apiResponseLocalVar, processFileForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processFileForm"></param>
        partial void AfterProcessFileApiV1RetrievalProcessFilePost(ref bool suppressDefaultLog, IProcessFileApiV1RetrievalProcessFilePostApiResponse apiResponseLocalVar, ProcessFileForm processFileForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processFileForm"></param>
        private void OnErrorProcessFileApiV1RetrievalProcessFilePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessFileForm processFileForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProcessFileApiV1RetrievalProcessFilePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, processFileForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processFileForm"></param>
        partial void OnErrorProcessFileApiV1RetrievalProcessFilePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessFileForm processFileForm);

        /// <summary>
        /// Process File 
        /// </summary>
        /// <param name="processFileForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessFileApiV1RetrievalProcessFilePostApiResponse"/>&gt;</returns>
        public async Task<IProcessFileApiV1RetrievalProcessFilePostApiResponse?> ProcessFileApiV1RetrievalProcessFilePostOrDefaultAsync(ProcessFileForm processFileForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessFileApiV1RetrievalProcessFilePostAsync(processFileForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process File 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processFileForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessFileApiV1RetrievalProcessFilePostApiResponse"/>&gt;</returns>
        public async Task<IProcessFileApiV1RetrievalProcessFilePostApiResponse> ProcessFileApiV1RetrievalProcessFilePostAsync(ProcessFileForm processFileForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessFileApiV1RetrievalProcessFilePost(processFileForm);

                FormatProcessFileApiV1RetrievalProcessFilePost(processFileForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/process/file"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/process/file");

                    httpRequestMessageLocalVar.Content = (processFileForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(processFileForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessFileApiV1RetrievalProcessFilePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessFileApiV1RetrievalProcessFilePostApiResponse>();

                        ProcessFileApiV1RetrievalProcessFilePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/process/file", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessFileApiV1RetrievalProcessFilePostDefaultImplementation(apiResponseLocalVar, processFileForm);

                        Events.ExecuteOnProcessFileApiV1RetrievalProcessFilePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessFileApiV1RetrievalProcessFilePostDefaultImplementation(e, "/api/v1/retrieval/process/file", uriBuilderLocalVar.Path, processFileForm);
                Events.ExecuteOnErrorProcessFileApiV1RetrievalProcessFilePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessFileApiV1RetrievalProcessFilePostApiResponse"/>
        /// </summary>
        public partial class ProcessFileApiV1RetrievalProcessFilePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IProcessFileApiV1RetrievalProcessFilePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessFileApiV1RetrievalProcessFilePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessFileApiV1RetrievalProcessFilePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessFileApiV1RetrievalProcessFilePostApiResponse(ILogger<ProcessFileApiV1RetrievalProcessFilePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(BatchProcessFilesForm batchProcessFilesForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="batchProcessFilesForm"></param>
        /// <returns></returns>
        private void ValidateProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(BatchProcessFilesForm batchProcessFilesForm)
        {
            if (batchProcessFilesForm == null)
                throw new ArgumentNullException(nameof(batchProcessFilesForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="batchProcessFilesForm"></param>
        private void AfterProcessFilesBatchApiV1RetrievalProcessFilesBatchPostDefaultImplementation(IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse apiResponseLocalVar, BatchProcessFilesForm batchProcessFilesForm)
        {
            bool suppressDefaultLog = false;
            AfterProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(ref suppressDefaultLog, apiResponseLocalVar, batchProcessFilesForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="batchProcessFilesForm"></param>
        partial void AfterProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(ref bool suppressDefaultLog, IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse apiResponseLocalVar, BatchProcessFilesForm batchProcessFilesForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="batchProcessFilesForm"></param>
        private void OnErrorProcessFilesBatchApiV1RetrievalProcessFilesBatchPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, BatchProcessFilesForm batchProcessFilesForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, batchProcessFilesForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="batchProcessFilesForm"></param>
        partial void OnErrorProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, BatchProcessFilesForm batchProcessFilesForm);

        /// <summary>
        /// Process Files Batch Process a batch of files and save them to the vector database.
        /// </summary>
        /// <param name="batchProcessFilesForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse"/>&gt;</returns>
        public async Task<IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse?> ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostOrDefaultAsync(BatchProcessFilesForm batchProcessFilesForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostAsync(batchProcessFilesForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process Files Batch Process a batch of files and save them to the vector database.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchProcessFilesForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse"/>&gt;</returns>
        public async Task<IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse> ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostAsync(BatchProcessFilesForm batchProcessFilesForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(batchProcessFilesForm);

                FormatProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(batchProcessFilesForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/process/files/batch"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/process/files/batch");

                    httpRequestMessageLocalVar.Content = (batchProcessFilesForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(batchProcessFilesForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse>();

                        ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/process/files/batch", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessFilesBatchApiV1RetrievalProcessFilesBatchPostDefaultImplementation(apiResponseLocalVar, batchProcessFilesForm);

                        Events.ExecuteOnProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessFilesBatchApiV1RetrievalProcessFilesBatchPostDefaultImplementation(e, "/api/v1/retrieval/process/files/batch", uriBuilderLocalVar.Path, batchProcessFilesForm);
                Events.ExecuteOnErrorProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse"/>
        /// </summary>
        public partial class ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse(ILogger<ProcessFilesBatchApiV1RetrievalProcessFilesBatchPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.BatchProcessFilesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.BatchProcessFilesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.BatchProcessFilesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessTextApiV1RetrievalProcessTextPost(ProcessTextForm processTextForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="processTextForm"></param>
        /// <returns></returns>
        private void ValidateProcessTextApiV1RetrievalProcessTextPost(ProcessTextForm processTextForm)
        {
            if (processTextForm == null)
                throw new ArgumentNullException(nameof(processTextForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processTextForm"></param>
        private void AfterProcessTextApiV1RetrievalProcessTextPostDefaultImplementation(IProcessTextApiV1RetrievalProcessTextPostApiResponse apiResponseLocalVar, ProcessTextForm processTextForm)
        {
            bool suppressDefaultLog = false;
            AfterProcessTextApiV1RetrievalProcessTextPost(ref suppressDefaultLog, apiResponseLocalVar, processTextForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processTextForm"></param>
        partial void AfterProcessTextApiV1RetrievalProcessTextPost(ref bool suppressDefaultLog, IProcessTextApiV1RetrievalProcessTextPostApiResponse apiResponseLocalVar, ProcessTextForm processTextForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processTextForm"></param>
        private void OnErrorProcessTextApiV1RetrievalProcessTextPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessTextForm processTextForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProcessTextApiV1RetrievalProcessTextPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, processTextForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processTextForm"></param>
        partial void OnErrorProcessTextApiV1RetrievalProcessTextPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessTextForm processTextForm);

        /// <summary>
        /// Process Text 
        /// </summary>
        /// <param name="processTextForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessTextApiV1RetrievalProcessTextPostApiResponse"/>&gt;</returns>
        public async Task<IProcessTextApiV1RetrievalProcessTextPostApiResponse?> ProcessTextApiV1RetrievalProcessTextPostOrDefaultAsync(ProcessTextForm processTextForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessTextApiV1RetrievalProcessTextPostAsync(processTextForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process Text 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processTextForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessTextApiV1RetrievalProcessTextPostApiResponse"/>&gt;</returns>
        public async Task<IProcessTextApiV1RetrievalProcessTextPostApiResponse> ProcessTextApiV1RetrievalProcessTextPostAsync(ProcessTextForm processTextForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessTextApiV1RetrievalProcessTextPost(processTextForm);

                FormatProcessTextApiV1RetrievalProcessTextPost(processTextForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/process/text"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/process/text");

                    httpRequestMessageLocalVar.Content = (processTextForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(processTextForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessTextApiV1RetrievalProcessTextPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessTextApiV1RetrievalProcessTextPostApiResponse>();

                        ProcessTextApiV1RetrievalProcessTextPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/process/text", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessTextApiV1RetrievalProcessTextPostDefaultImplementation(apiResponseLocalVar, processTextForm);

                        Events.ExecuteOnProcessTextApiV1RetrievalProcessTextPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessTextApiV1RetrievalProcessTextPostDefaultImplementation(e, "/api/v1/retrieval/process/text", uriBuilderLocalVar.Path, processTextForm);
                Events.ExecuteOnErrorProcessTextApiV1RetrievalProcessTextPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessTextApiV1RetrievalProcessTextPostApiResponse"/>
        /// </summary>
        public partial class ProcessTextApiV1RetrievalProcessTextPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IProcessTextApiV1RetrievalProcessTextPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessTextApiV1RetrievalProcessTextPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessTextApiV1RetrievalProcessTextPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessTextApiV1RetrievalProcessTextPostApiResponse(ILogger<ProcessTextApiV1RetrievalProcessTextPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessWebApiV1RetrievalProcessWebPost(ProcessUrlForm processUrlForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="processUrlForm"></param>
        /// <returns></returns>
        private void ValidateProcessWebApiV1RetrievalProcessWebPost(ProcessUrlForm processUrlForm)
        {
            if (processUrlForm == null)
                throw new ArgumentNullException(nameof(processUrlForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processUrlForm"></param>
        private void AfterProcessWebApiV1RetrievalProcessWebPostDefaultImplementation(IProcessWebApiV1RetrievalProcessWebPostApiResponse apiResponseLocalVar, ProcessUrlForm processUrlForm)
        {
            bool suppressDefaultLog = false;
            AfterProcessWebApiV1RetrievalProcessWebPost(ref suppressDefaultLog, apiResponseLocalVar, processUrlForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processUrlForm"></param>
        partial void AfterProcessWebApiV1RetrievalProcessWebPost(ref bool suppressDefaultLog, IProcessWebApiV1RetrievalProcessWebPostApiResponse apiResponseLocalVar, ProcessUrlForm processUrlForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processUrlForm"></param>
        private void OnErrorProcessWebApiV1RetrievalProcessWebPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessUrlForm processUrlForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProcessWebApiV1RetrievalProcessWebPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, processUrlForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processUrlForm"></param>
        partial void OnErrorProcessWebApiV1RetrievalProcessWebPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessUrlForm processUrlForm);

        /// <summary>
        /// Process Web 
        /// </summary>
        /// <param name="processUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessWebApiV1RetrievalProcessWebPostApiResponse"/>&gt;</returns>
        public async Task<IProcessWebApiV1RetrievalProcessWebPostApiResponse?> ProcessWebApiV1RetrievalProcessWebPostOrDefaultAsync(ProcessUrlForm processUrlForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessWebApiV1RetrievalProcessWebPostAsync(processUrlForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process Web 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessWebApiV1RetrievalProcessWebPostApiResponse"/>&gt;</returns>
        public async Task<IProcessWebApiV1RetrievalProcessWebPostApiResponse> ProcessWebApiV1RetrievalProcessWebPostAsync(ProcessUrlForm processUrlForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessWebApiV1RetrievalProcessWebPost(processUrlForm);

                FormatProcessWebApiV1RetrievalProcessWebPost(processUrlForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/process/web"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/process/web");

                    httpRequestMessageLocalVar.Content = (processUrlForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(processUrlForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessWebApiV1RetrievalProcessWebPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessWebApiV1RetrievalProcessWebPostApiResponse>();

                        ProcessWebApiV1RetrievalProcessWebPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/process/web", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessWebApiV1RetrievalProcessWebPostDefaultImplementation(apiResponseLocalVar, processUrlForm);

                        Events.ExecuteOnProcessWebApiV1RetrievalProcessWebPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessWebApiV1RetrievalProcessWebPostDefaultImplementation(e, "/api/v1/retrieval/process/web", uriBuilderLocalVar.Path, processUrlForm);
                Events.ExecuteOnErrorProcessWebApiV1RetrievalProcessWebPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessWebApiV1RetrievalProcessWebPostApiResponse"/>
        /// </summary>
        public partial class ProcessWebApiV1RetrievalProcessWebPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IProcessWebApiV1RetrievalProcessWebPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessWebApiV1RetrievalProcessWebPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessWebApiV1RetrievalProcessWebPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessWebApiV1RetrievalProcessWebPostApiResponse(ILogger<ProcessWebApiV1RetrievalProcessWebPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessWebSearchApiV1RetrievalProcessWebSearchPost(SearchForm searchForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="searchForm"></param>
        /// <returns></returns>
        private void ValidateProcessWebSearchApiV1RetrievalProcessWebSearchPost(SearchForm searchForm)
        {
            if (searchForm == null)
                throw new ArgumentNullException(nameof(searchForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="searchForm"></param>
        private void AfterProcessWebSearchApiV1RetrievalProcessWebSearchPostDefaultImplementation(IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse apiResponseLocalVar, SearchForm searchForm)
        {
            bool suppressDefaultLog = false;
            AfterProcessWebSearchApiV1RetrievalProcessWebSearchPost(ref suppressDefaultLog, apiResponseLocalVar, searchForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="searchForm"></param>
        partial void AfterProcessWebSearchApiV1RetrievalProcessWebSearchPost(ref bool suppressDefaultLog, IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse apiResponseLocalVar, SearchForm searchForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="searchForm"></param>
        private void OnErrorProcessWebSearchApiV1RetrievalProcessWebSearchPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchForm searchForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProcessWebSearchApiV1RetrievalProcessWebSearchPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, searchForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="searchForm"></param>
        partial void OnErrorProcessWebSearchApiV1RetrievalProcessWebSearchPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchForm searchForm);

        /// <summary>
        /// Process Web Search 
        /// </summary>
        /// <param name="searchForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse"/>&gt;</returns>
        public async Task<IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse?> ProcessWebSearchApiV1RetrievalProcessWebSearchPostOrDefaultAsync(SearchForm searchForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessWebSearchApiV1RetrievalProcessWebSearchPostAsync(searchForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process Web Search 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse"/>&gt;</returns>
        public async Task<IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse> ProcessWebSearchApiV1RetrievalProcessWebSearchPostAsync(SearchForm searchForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessWebSearchApiV1RetrievalProcessWebSearchPost(searchForm);

                FormatProcessWebSearchApiV1RetrievalProcessWebSearchPost(searchForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/process/web/search"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/process/web/search");

                    httpRequestMessageLocalVar.Content = (searchForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(searchForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse>();

                        ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/process/web/search", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessWebSearchApiV1RetrievalProcessWebSearchPostDefaultImplementation(apiResponseLocalVar, searchForm);

                        Events.ExecuteOnProcessWebSearchApiV1RetrievalProcessWebSearchPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessWebSearchApiV1RetrievalProcessWebSearchPostDefaultImplementation(e, "/api/v1/retrieval/process/web/search", uriBuilderLocalVar.Path, searchForm);
                Events.ExecuteOnErrorProcessWebSearchApiV1RetrievalProcessWebSearchPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse"/>
        /// </summary>
        public partial class ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse(ILogger<ProcessWebSearchApiV1RetrievalProcessWebSearchPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(ProcessUrlForm processUrlForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="processUrlForm"></param>
        /// <returns></returns>
        private void ValidateProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(ProcessUrlForm processUrlForm)
        {
            if (processUrlForm == null)
                throw new ArgumentNullException(nameof(processUrlForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processUrlForm"></param>
        private void AfterProcessYoutubeVideoApiV1RetrievalProcessYoutubePostDefaultImplementation(IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse apiResponseLocalVar, ProcessUrlForm processUrlForm)
        {
            bool suppressDefaultLog = false;
            AfterProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(ref suppressDefaultLog, apiResponseLocalVar, processUrlForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="processUrlForm"></param>
        partial void AfterProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(ref bool suppressDefaultLog, IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse apiResponseLocalVar, ProcessUrlForm processUrlForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processUrlForm"></param>
        private void OnErrorProcessYoutubeVideoApiV1RetrievalProcessYoutubePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessUrlForm processUrlForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, processUrlForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="processUrlForm"></param>
        partial void OnErrorProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ProcessUrlForm processUrlForm);

        /// <summary>
        /// Process Youtube Video 
        /// </summary>
        /// <param name="processUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse"/>&gt;</returns>
        public async Task<IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse?> ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostOrDefaultAsync(ProcessUrlForm processUrlForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostAsync(processUrlForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Process Youtube Video 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="processUrlForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse"/>&gt;</returns>
        public async Task<IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse> ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostAsync(ProcessUrlForm processUrlForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(processUrlForm);

                FormatProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(processUrlForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/process/youtube"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/process/youtube");

                    httpRequestMessageLocalVar.Content = (processUrlForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(processUrlForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse>();

                        ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/process/youtube", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessYoutubeVideoApiV1RetrievalProcessYoutubePostDefaultImplementation(apiResponseLocalVar, processUrlForm);

                        Events.ExecuteOnProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessYoutubeVideoApiV1RetrievalProcessYoutubePostDefaultImplementation(e, "/api/v1/retrieval/process/youtube", uriBuilderLocalVar.Path, processUrlForm);
                Events.ExecuteOnErrorProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse"/>
        /// </summary>
        public partial class ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse(ILogger<ProcessYoutubeVideoApiV1RetrievalProcessYoutubePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(QueryCollectionsForm queryCollectionsForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="queryCollectionsForm"></param>
        /// <returns></returns>
        private void ValidateQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(QueryCollectionsForm queryCollectionsForm)
        {
            if (queryCollectionsForm == null)
                throw new ArgumentNullException(nameof(queryCollectionsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="queryCollectionsForm"></param>
        private void AfterQueryCollectionHandlerApiV1RetrievalQueryCollectionPostDefaultImplementation(IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse apiResponseLocalVar, QueryCollectionsForm queryCollectionsForm)
        {
            bool suppressDefaultLog = false;
            AfterQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(ref suppressDefaultLog, apiResponseLocalVar, queryCollectionsForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="queryCollectionsForm"></param>
        partial void AfterQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(ref bool suppressDefaultLog, IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse apiResponseLocalVar, QueryCollectionsForm queryCollectionsForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="queryCollectionsForm"></param>
        private void OnErrorQueryCollectionHandlerApiV1RetrievalQueryCollectionPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, QueryCollectionsForm queryCollectionsForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, queryCollectionsForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="queryCollectionsForm"></param>
        partial void OnErrorQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, QueryCollectionsForm queryCollectionsForm);

        /// <summary>
        /// Query Collection Handler 
        /// </summary>
        /// <param name="queryCollectionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse"/>&gt;</returns>
        public async Task<IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse?> QueryCollectionHandlerApiV1RetrievalQueryCollectionPostOrDefaultAsync(QueryCollectionsForm queryCollectionsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await QueryCollectionHandlerApiV1RetrievalQueryCollectionPostAsync(queryCollectionsForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Query Collection Handler 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryCollectionsForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse"/>&gt;</returns>
        public async Task<IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse> QueryCollectionHandlerApiV1RetrievalQueryCollectionPostAsync(QueryCollectionsForm queryCollectionsForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(queryCollectionsForm);

                FormatQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(queryCollectionsForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/query/collection"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/query/collection");

                    httpRequestMessageLocalVar.Content = (queryCollectionsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(queryCollectionsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse>();

                        QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/query/collection", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterQueryCollectionHandlerApiV1RetrievalQueryCollectionPostDefaultImplementation(apiResponseLocalVar, queryCollectionsForm);

                        Events.ExecuteOnQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorQueryCollectionHandlerApiV1RetrievalQueryCollectionPostDefaultImplementation(e, "/api/v1/retrieval/query/collection", uriBuilderLocalVar.Path, queryCollectionsForm);
                Events.ExecuteOnErrorQueryCollectionHandlerApiV1RetrievalQueryCollectionPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse"/>
        /// </summary>
        public partial class QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IQueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse(ILogger<QueryCollectionHandlerApiV1RetrievalQueryCollectionPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatQueryDocHandlerApiV1RetrievalQueryDocPost(QueryDocForm queryDocForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="queryDocForm"></param>
        /// <returns></returns>
        private void ValidateQueryDocHandlerApiV1RetrievalQueryDocPost(QueryDocForm queryDocForm)
        {
            if (queryDocForm == null)
                throw new ArgumentNullException(nameof(queryDocForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="queryDocForm"></param>
        private void AfterQueryDocHandlerApiV1RetrievalQueryDocPostDefaultImplementation(IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse apiResponseLocalVar, QueryDocForm queryDocForm)
        {
            bool suppressDefaultLog = false;
            AfterQueryDocHandlerApiV1RetrievalQueryDocPost(ref suppressDefaultLog, apiResponseLocalVar, queryDocForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="queryDocForm"></param>
        partial void AfterQueryDocHandlerApiV1RetrievalQueryDocPost(ref bool suppressDefaultLog, IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse apiResponseLocalVar, QueryDocForm queryDocForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="queryDocForm"></param>
        private void OnErrorQueryDocHandlerApiV1RetrievalQueryDocPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, QueryDocForm queryDocForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorQueryDocHandlerApiV1RetrievalQueryDocPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, queryDocForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="queryDocForm"></param>
        partial void OnErrorQueryDocHandlerApiV1RetrievalQueryDocPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, QueryDocForm queryDocForm);

        /// <summary>
        /// Query Doc Handler 
        /// </summary>
        /// <param name="queryDocForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse"/>&gt;</returns>
        public async Task<IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse?> QueryDocHandlerApiV1RetrievalQueryDocPostOrDefaultAsync(QueryDocForm queryDocForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await QueryDocHandlerApiV1RetrievalQueryDocPostAsync(queryDocForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Query Doc Handler 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryDocForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse"/>&gt;</returns>
        public async Task<IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse> QueryDocHandlerApiV1RetrievalQueryDocPostAsync(QueryDocForm queryDocForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateQueryDocHandlerApiV1RetrievalQueryDocPost(queryDocForm);

                FormatQueryDocHandlerApiV1RetrievalQueryDocPost(queryDocForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/query/doc"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/query/doc");

                    httpRequestMessageLocalVar.Content = (queryDocForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(queryDocForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse>();

                        QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/query/doc", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterQueryDocHandlerApiV1RetrievalQueryDocPostDefaultImplementation(apiResponseLocalVar, queryDocForm);

                        Events.ExecuteOnQueryDocHandlerApiV1RetrievalQueryDocPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorQueryDocHandlerApiV1RetrievalQueryDocPostDefaultImplementation(e, "/api/v1/retrieval/query/doc", uriBuilderLocalVar.Path, queryDocForm);
                Events.ExecuteOnErrorQueryDocHandlerApiV1RetrievalQueryDocPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse"/>
        /// </summary>
        public partial class QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IQueryDocHandlerApiV1RetrievalQueryDocPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse(ILogger<QueryDocHandlerApiV1RetrievalQueryDocPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterResetUploadDirApiV1RetrievalResetUploadsPostDefaultImplementation(IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterResetUploadDirApiV1RetrievalResetUploadsPost(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterResetUploadDirApiV1RetrievalResetUploadsPost(ref bool suppressDefaultLog, IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorResetUploadDirApiV1RetrievalResetUploadsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorResetUploadDirApiV1RetrievalResetUploadsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorResetUploadDirApiV1RetrievalResetUploadsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Reset Upload Dir 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse"/>&gt;</returns>
        public async Task<IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse?> ResetUploadDirApiV1RetrievalResetUploadsPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ResetUploadDirApiV1RetrievalResetUploadsPostAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reset Upload Dir 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse"/>&gt;</returns>
        public async Task<IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse> ResetUploadDirApiV1RetrievalResetUploadsPostAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/reset/uploads"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/reset/uploads");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse>();

                        ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/reset/uploads", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResetUploadDirApiV1RetrievalResetUploadsPostDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnResetUploadDirApiV1RetrievalResetUploadsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResetUploadDirApiV1RetrievalResetUploadsPostDefaultImplementation(e, "/api/v1/retrieval/reset/uploads", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorResetUploadDirApiV1RetrievalResetUploadsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse"/>
        /// </summary>
        public partial class ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IResetUploadDirApiV1RetrievalResetUploadsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse(ILogger<ResetUploadDirApiV1RetrievalResetUploadsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterResetVectorDbApiV1RetrievalResetDbPostDefaultImplementation(IResetVectorDbApiV1RetrievalResetDbPostApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterResetVectorDbApiV1RetrievalResetDbPost(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterResetVectorDbApiV1RetrievalResetDbPost(ref bool suppressDefaultLog, IResetVectorDbApiV1RetrievalResetDbPostApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorResetVectorDbApiV1RetrievalResetDbPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorResetVectorDbApiV1RetrievalResetDbPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorResetVectorDbApiV1RetrievalResetDbPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Reset Vector Db 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetVectorDbApiV1RetrievalResetDbPostApiResponse"/>&gt;</returns>
        public async Task<IResetVectorDbApiV1RetrievalResetDbPostApiResponse?> ResetVectorDbApiV1RetrievalResetDbPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ResetVectorDbApiV1RetrievalResetDbPostAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reset Vector Db 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetVectorDbApiV1RetrievalResetDbPostApiResponse"/>&gt;</returns>
        public async Task<IResetVectorDbApiV1RetrievalResetDbPostApiResponse> ResetVectorDbApiV1RetrievalResetDbPostAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/reset/db"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/reset/db");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ResetVectorDbApiV1RetrievalResetDbPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ResetVectorDbApiV1RetrievalResetDbPostApiResponse>();

                        ResetVectorDbApiV1RetrievalResetDbPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/reset/db", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResetVectorDbApiV1RetrievalResetDbPostDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnResetVectorDbApiV1RetrievalResetDbPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResetVectorDbApiV1RetrievalResetDbPostDefaultImplementation(e, "/api/v1/retrieval/reset/db", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorResetVectorDbApiV1RetrievalResetDbPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ResetVectorDbApiV1RetrievalResetDbPostApiResponse"/>
        /// </summary>
        public partial class ResetVectorDbApiV1RetrievalResetDbPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IResetVectorDbApiV1RetrievalResetDbPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ResetVectorDbApiV1RetrievalResetDbPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ResetVectorDbApiV1RetrievalResetDbPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetVectorDbApiV1RetrievalResetDbPostApiResponse(ILogger<ResetVectorDbApiV1RetrievalResetDbPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(EmbeddingModelUpdateForm embeddingModelUpdateForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="embeddingModelUpdateForm"></param>
        /// <returns></returns>
        private void ValidateUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(EmbeddingModelUpdateForm embeddingModelUpdateForm)
        {
            if (embeddingModelUpdateForm == null)
                throw new ArgumentNullException(nameof(embeddingModelUpdateForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="embeddingModelUpdateForm"></param>
        private void AfterUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostDefaultImplementation(IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse apiResponseLocalVar, EmbeddingModelUpdateForm embeddingModelUpdateForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, embeddingModelUpdateForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="embeddingModelUpdateForm"></param>
        partial void AfterUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(ref bool suppressDefaultLog, IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse apiResponseLocalVar, EmbeddingModelUpdateForm embeddingModelUpdateForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="embeddingModelUpdateForm"></param>
        private void OnErrorUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EmbeddingModelUpdateForm embeddingModelUpdateForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, embeddingModelUpdateForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="embeddingModelUpdateForm"></param>
        partial void OnErrorUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, EmbeddingModelUpdateForm embeddingModelUpdateForm);

        /// <summary>
        /// Update Embedding Config 
        /// </summary>
        /// <param name="embeddingModelUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse?> UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostOrDefaultAsync(EmbeddingModelUpdateForm embeddingModelUpdateForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostAsync(embeddingModelUpdateForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Embedding Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="embeddingModelUpdateForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse> UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostAsync(EmbeddingModelUpdateForm embeddingModelUpdateForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(embeddingModelUpdateForm);

                FormatUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(embeddingModelUpdateForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/embedding/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/embedding/update");

                    httpRequestMessageLocalVar.Content = (embeddingModelUpdateForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(embeddingModelUpdateForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse>();

                        UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/embedding/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostDefaultImplementation(apiResponseLocalVar, embeddingModelUpdateForm);

                        Events.ExecuteOnUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostDefaultImplementation(e, "/api/v1/retrieval/embedding/update", uriBuilderLocalVar.Path, embeddingModelUpdateForm);
                Events.ExecuteOnErrorUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse(ILogger<UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateRagConfigApiV1RetrievalConfigUpdatePost(OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        /// <returns></returns>
        private void ValidateUpdateRagConfigApiV1RetrievalConfigUpdatePost(OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm)
        {
            if (openWebuiRoutersRetrievalConfigForm == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersRetrievalConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        private void AfterUpdateRagConfigApiV1RetrievalConfigUpdatePostDefaultImplementation(IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse apiResponseLocalVar, OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateRagConfigApiV1RetrievalConfigUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, openWebuiRoutersRetrievalConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        partial void AfterUpdateRagConfigApiV1RetrievalConfigUpdatePost(ref bool suppressDefaultLog, IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse apiResponseLocalVar, OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        private void OnErrorUpdateRagConfigApiV1RetrievalConfigUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateRagConfigApiV1RetrievalConfigUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, openWebuiRoutersRetrievalConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        partial void OnErrorUpdateRagConfigApiV1RetrievalConfigUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm);

        /// <summary>
        /// Update Rag Config 
        /// </summary>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse?> UpdateRagConfigApiV1RetrievalConfigUpdatePostOrDefaultAsync(OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateRagConfigApiV1RetrievalConfigUpdatePostAsync(openWebuiRoutersRetrievalConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Rag Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse> UpdateRagConfigApiV1RetrievalConfigUpdatePostAsync(OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateRagConfigApiV1RetrievalConfigUpdatePost(openWebuiRoutersRetrievalConfigForm);

                FormatUpdateRagConfigApiV1RetrievalConfigUpdatePost(openWebuiRoutersRetrievalConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/retrieval/config/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/retrieval/config/update");

                    httpRequestMessageLocalVar.Content = (openWebuiRoutersRetrievalConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(openWebuiRoutersRetrievalConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse>();

                        UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/retrieval/config/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateRagConfigApiV1RetrievalConfigUpdatePostDefaultImplementation(apiResponseLocalVar, openWebuiRoutersRetrievalConfigForm);

                        Events.ExecuteOnUpdateRagConfigApiV1RetrievalConfigUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateRagConfigApiV1RetrievalConfigUpdatePostDefaultImplementation(e, "/api/v1/retrieval/config/update", uriBuilderLocalVar.Path, openWebuiRoutersRetrievalConfigForm);
                Events.ExecuteOnErrorUpdateRagConfigApiV1RetrievalConfigUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse(ILogger<UpdateRagConfigApiV1RetrievalConfigUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
