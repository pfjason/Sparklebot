// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOllamaApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OllamaApiEvents Events { get; }

        /// <summary>
        /// Copy Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICopyModelOllamaApiCopyPostApiResponse"/>&gt;</returns>
        Task<ICopyModelOllamaApiCopyPostApiResponse> CopyModelOllamaApiCopyPostAsync(CopyModelForm copyModelForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Copy Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICopyModelOllamaApiCopyPostApiResponse"/>?&gt;</returns>
        Task<ICopyModelOllamaApiCopyPostApiResponse?> CopyModelOllamaApiCopyPostOrDefaultAsync(CopyModelForm copyModelForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Copy Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICopyModelOllamaApiCopyUrlIdxPostApiResponse"/>&gt;</returns>
        Task<ICopyModelOllamaApiCopyUrlIdxPostApiResponse> CopyModelOllamaApiCopyUrlIdxPostAsync(CopyModelForm copyModelForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Copy Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICopyModelOllamaApiCopyUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<ICopyModelOllamaApiCopyUrlIdxPostApiResponse?> CopyModelOllamaApiCopyUrlIdxPostOrDefaultAsync(CopyModelForm copyModelForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createModelForm"></param>
        /// <param name="urlIdx"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateModelOllamaApiCreatePostApiResponse"/>&gt;</returns>
        Task<ICreateModelOllamaApiCreatePostApiResponse> CreateModelOllamaApiCreatePostAsync(CreateModelForm createModelForm, Option<int> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createModelForm"></param>
        /// <param name="urlIdx"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateModelOllamaApiCreatePostApiResponse"/>?&gt;</returns>
        Task<ICreateModelOllamaApiCreatePostApiResponse?> CreateModelOllamaApiCreatePostOrDefaultAsync(CreateModelForm createModelForm, Option<int> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="createModelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateModelOllamaApiCreateUrlIdxPostApiResponse"/>&gt;</returns>
        Task<ICreateModelOllamaApiCreateUrlIdxPostApiResponse> CreateModelOllamaApiCreateUrlIdxPostAsync(int urlIdx, CreateModelForm createModelForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"></param>
        /// <param name="createModelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateModelOllamaApiCreateUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<ICreateModelOllamaApiCreateUrlIdxPostApiResponse?> CreateModelOllamaApiCreateUrlIdxPostOrDefaultAsync(int urlIdx, CreateModelForm createModelForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteModelOllamaApiDeleteDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteModelOllamaApiDeleteDeleteApiResponse> DeleteModelOllamaApiDeleteDeleteAsync(ModelNameForm modelNameForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteModelOllamaApiDeleteDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteModelOllamaApiDeleteDeleteApiResponse?> DeleteModelOllamaApiDeleteDeleteOrDefaultAsync(ModelNameForm modelNameForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse> DeleteModelOllamaApiDeleteUrlIdxDeleteAsync(ModelNameForm modelNameForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse?> DeleteModelOllamaApiDeleteUrlIdxDeleteOrDefaultAsync(ModelNameForm modelNameForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadModelOllamaModelsDownloadPostApiResponse"/>&gt;</returns>
        Task<IDownloadModelOllamaModelsDownloadPostApiResponse> DownloadModelOllamaModelsDownloadPostAsync(UrlForm urlForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadModelOllamaModelsDownloadPostApiResponse"/>?&gt;</returns>
        Task<IDownloadModelOllamaModelsDownloadPostApiResponse?> DownloadModelOllamaModelsDownloadPostOrDefaultAsync(UrlForm urlForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse> DownloadModelOllamaModelsDownloadUrlIdxPostAsync(UrlForm urlForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse?> DownloadModelOllamaModelsDownloadUrlIdxPostOrDefaultAsync(UrlForm urlForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbedOllamaApiEmbedPostApiResponse"/>&gt;</returns>
        Task<IEmbedOllamaApiEmbedPostApiResponse> EmbedOllamaApiEmbedPostAsync(GenerateEmbedForm generateEmbedForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbedOllamaApiEmbedPostApiResponse"/>?&gt;</returns>
        Task<IEmbedOllamaApiEmbedPostApiResponse?> EmbedOllamaApiEmbedPostOrDefaultAsync(GenerateEmbedForm generateEmbedForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbedOllamaApiEmbedUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IEmbedOllamaApiEmbedUrlIdxPostApiResponse> EmbedOllamaApiEmbedUrlIdxPostAsync(GenerateEmbedForm generateEmbedForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbedOllamaApiEmbedUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IEmbedOllamaApiEmbedUrlIdxPostApiResponse?> EmbedOllamaApiEmbedUrlIdxPostOrDefaultAsync(GenerateEmbedForm generateEmbedForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbeddingsOllamaApiEmbeddingsPostApiResponse"/>&gt;</returns>
        Task<IEmbeddingsOllamaApiEmbeddingsPostApiResponse> EmbeddingsOllamaApiEmbeddingsPostAsync(GenerateEmbeddingsForm generateEmbeddingsForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbeddingsOllamaApiEmbeddingsPostApiResponse"/>?&gt;</returns>
        Task<IEmbeddingsOllamaApiEmbeddingsPostApiResponse?> EmbeddingsOllamaApiEmbeddingsPostOrDefaultAsync(GenerateEmbeddingsForm generateEmbeddingsForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse> EmbeddingsOllamaApiEmbeddingsUrlIdxPostAsync(GenerateEmbeddingsForm generateEmbeddingsForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse?> EmbeddingsOllamaApiEmbeddingsUrlIdxPostOrDefaultAsync(GenerateEmbeddingsForm generateEmbeddingsForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Chat Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="bypassFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatCompletionOllamaApiChatPostApiResponse"/>&gt;</returns>
        Task<IGenerateChatCompletionOllamaApiChatPostApiResponse> GenerateChatCompletionOllamaApiChatPostAsync(Object body, Option<int?> urlIdx = default, Option<bool?> bypassFilter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Chat Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="bypassFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatCompletionOllamaApiChatPostApiResponse"/>?&gt;</returns>
        Task<IGenerateChatCompletionOllamaApiChatPostApiResponse?> GenerateChatCompletionOllamaApiChatPostOrDefaultAsync(Object body, Option<int?> urlIdx = default, Option<bool?> bypassFilter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Chat Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse> GenerateChatCompletionOllamaApiChatUrlIdxPostAsync(Object body, int? urlIdx = default, Option<bool?> bypassFilter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Chat Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse?> GenerateChatCompletionOllamaApiChatUrlIdxPostOrDefaultAsync(Object body, int? urlIdx = default, Option<bool?> bypassFilter = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateCompletionOllamaApiGeneratePostApiResponse"/>&gt;</returns>
        Task<IGenerateCompletionOllamaApiGeneratePostApiResponse> GenerateCompletionOllamaApiGeneratePostAsync(GenerateCompletionForm generateCompletionForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateCompletionOllamaApiGeneratePostApiResponse"/>?&gt;</returns>
        Task<IGenerateCompletionOllamaApiGeneratePostApiResponse?> GenerateCompletionOllamaApiGeneratePostOrDefaultAsync(GenerateCompletionForm generateCompletionForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse> GenerateCompletionOllamaApiGenerateUrlIdxPostAsync(GenerateCompletionForm generateCompletionForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse?> GenerateCompletionOllamaApiGenerateUrlIdxPostOrDefaultAsync(GenerateCompletionForm generateCompletionForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Openai Chat Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse> GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostAsync(Object body, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Openai Chat Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse?> GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostOrDefaultAsync(Object body, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Openai Chat Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse> GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostAsync(Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Openai Chat Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse?> GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostOrDefaultAsync(Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Openai Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse> GenerateOpenaiCompletionOllamaV1CompletionsPostAsync(Object body, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Openai Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse?> GenerateOpenaiCompletionOllamaV1CompletionsPostOrDefaultAsync(Object body, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Openai Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse> GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostAsync(Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Openai Completion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse?> GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostOrDefaultAsync(Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigOllamaConfigGetApiResponse"/>&gt;</returns>
        Task<IGetConfigOllamaConfigGetApiResponse> GetConfigOllamaConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigOllamaConfigGetApiResponse"/>?&gt;</returns>
        Task<IGetConfigOllamaConfigGetApiResponse?> GetConfigOllamaConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Loaded Models
        /// </summary>
        /// <remarks>
        /// List models that are currently loaded into Ollama memory, and which node they are loaded on.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaLoadedModelsOllamaApiPsGetApiResponse"/>&gt;</returns>
        Task<IGetOllamaLoadedModelsOllamaApiPsGetApiResponse> GetOllamaLoadedModelsOllamaApiPsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Loaded Models
        /// </summary>
        /// <remarks>
        /// List models that are currently loaded into Ollama memory, and which node they are loaded on.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaLoadedModelsOllamaApiPsGetApiResponse"/>?&gt;</returns>
        Task<IGetOllamaLoadedModelsOllamaApiPsGetApiResponse?> GetOllamaLoadedModelsOllamaApiPsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaTagsOllamaApiTagsGetApiResponse"/>&gt;</returns>
        Task<IGetOllamaTagsOllamaApiTagsGetApiResponse> GetOllamaTagsOllamaApiTagsGetAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaTagsOllamaApiTagsGetApiResponse"/>?&gt;</returns>
        Task<IGetOllamaTagsOllamaApiTagsGetApiResponse?> GetOllamaTagsOllamaApiTagsGetOrDefaultAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse"/>&gt;</returns>
        Task<IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse> GetOllamaTagsOllamaApiTagsUrlIdxGetAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse"/>?&gt;</returns>
        Task<IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse?> GetOllamaTagsOllamaApiTagsUrlIdxGetOrDefaultAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaVersionsOllamaApiVersionGetApiResponse"/>&gt;</returns>
        Task<IGetOllamaVersionsOllamaApiVersionGetApiResponse> GetOllamaVersionsOllamaApiVersionGetAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaVersionsOllamaApiVersionGetApiResponse"/>?&gt;</returns>
        Task<IGetOllamaVersionsOllamaApiVersionGetApiResponse?> GetOllamaVersionsOllamaApiVersionGetOrDefaultAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse"/>&gt;</returns>
        Task<IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse> GetOllamaVersionsOllamaApiVersionUrlIdxGetAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ollama Versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse"/>?&gt;</returns>
        Task<IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse?> GetOllamaVersionsOllamaApiVersionUrlIdxGetOrDefaultAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Openai Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOpenaiModelsOllamaV1ModelsGetApiResponse"/>&gt;</returns>
        Task<IGetOpenaiModelsOllamaV1ModelsGetApiResponse> GetOpenaiModelsOllamaV1ModelsGetAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Openai Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOpenaiModelsOllamaV1ModelsGetApiResponse"/>?&gt;</returns>
        Task<IGetOpenaiModelsOllamaV1ModelsGetApiResponse?> GetOpenaiModelsOllamaV1ModelsGetOrDefaultAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Openai Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse"/>&gt;</returns>
        Task<IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse> GetOpenaiModelsOllamaV1ModelsUrlIdxGetAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Openai Models
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse"/>?&gt;</returns>
        Task<IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse?> GetOpenaiModelsOllamaV1ModelsUrlIdxGetOrDefaultAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusOllamaGetApiResponse"/>&gt;</returns>
        Task<IGetStatusOllamaGetApiResponse> GetStatusOllamaGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusOllamaGetApiResponse"/>?&gt;</returns>
        Task<IGetStatusOllamaGetApiResponse?> GetStatusOllamaGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusOllamaHeadApiResponse"/>&gt;</returns>
        Task<IGetStatusOllamaHeadApiResponse> GetStatusOllamaHeadAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusOllamaHeadApiResponse"/>?&gt;</returns>
        Task<IGetStatusOllamaHeadApiResponse?> GetStatusOllamaHeadOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Pull Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPullModelOllamaApiPullPostApiResponse"/>&gt;</returns>
        Task<IPullModelOllamaApiPullPostApiResponse> PullModelOllamaApiPullPostAsync(ModelNameForm modelNameForm, Option<int> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Pull Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPullModelOllamaApiPullPostApiResponse"/>?&gt;</returns>
        Task<IPullModelOllamaApiPullPostApiResponse?> PullModelOllamaApiPullPostOrDefaultAsync(ModelNameForm modelNameForm, Option<int> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Pull Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPullModelOllamaApiPullUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IPullModelOllamaApiPullUrlIdxPostApiResponse> PullModelOllamaApiPullUrlIdxPostAsync(int urlIdx, ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Pull Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="urlIdx"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPullModelOllamaApiPullUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IPullModelOllamaApiPullUrlIdxPostApiResponse?> PullModelOllamaApiPullUrlIdxPostOrDefaultAsync(int urlIdx, ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Push Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPushModelOllamaApiPushDeleteApiResponse"/>&gt;</returns>
        Task<IPushModelOllamaApiPushDeleteApiResponse> PushModelOllamaApiPushDeleteAsync(PushModelForm pushModelForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Push Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPushModelOllamaApiPushDeleteApiResponse"/>?&gt;</returns>
        Task<IPushModelOllamaApiPushDeleteApiResponse?> PushModelOllamaApiPushDeleteOrDefaultAsync(PushModelForm pushModelForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Push Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPushModelOllamaApiPushUrlIdxDeleteApiResponse"/>&gt;</returns>
        Task<IPushModelOllamaApiPushUrlIdxDeleteApiResponse> PushModelOllamaApiPushUrlIdxDeleteAsync(PushModelForm pushModelForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Push Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPushModelOllamaApiPushUrlIdxDeleteApiResponse"/>?&gt;</returns>
        Task<IPushModelOllamaApiPushUrlIdxDeleteApiResponse?> PushModelOllamaApiPushUrlIdxDeleteOrDefaultAsync(PushModelForm pushModelForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Show Model Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShowModelInfoOllamaApiShowPostApiResponse"/>&gt;</returns>
        Task<IShowModelInfoOllamaApiShowPostApiResponse> ShowModelInfoOllamaApiShowPostAsync(ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Show Model Info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShowModelInfoOllamaApiShowPostApiResponse"/>?&gt;</returns>
        Task<IShowModelInfoOllamaApiShowPostApiResponse?> ShowModelInfoOllamaApiShowPostOrDefaultAsync(ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unload Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnloadModelOllamaApiUnloadPostApiResponse"/>&gt;</returns>
        Task<IUnloadModelOllamaApiUnloadPostApiResponse> UnloadModelOllamaApiUnloadPostAsync(ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unload Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnloadModelOllamaApiUnloadPostApiResponse"/>?&gt;</returns>
        Task<IUnloadModelOllamaApiUnloadPostApiResponse?> UnloadModelOllamaApiUnloadPostOrDefaultAsync(ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigOllamaConfigUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateConfigOllamaConfigUpdatePostApiResponse> UpdateConfigOllamaConfigUpdatePostAsync(OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigOllamaConfigUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateConfigOllamaConfigUpdatePostApiResponse?> UpdateConfigOllamaConfigUpdatePostOrDefaultAsync(OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadModelOllamaModelsUploadPostApiResponse"/>&gt;</returns>
        Task<IUploadModelOllamaModelsUploadPostApiResponse> UploadModelOllamaModelsUploadPostAsync(System.IO.Stream file, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="file"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadModelOllamaModelsUploadPostApiResponse"/>?&gt;</returns>
        Task<IUploadModelOllamaModelsUploadPostApiResponse?> UploadModelOllamaModelsUploadPostOrDefaultAsync(System.IO.Stream file, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadModelOllamaModelsUploadUrlIdxPostApiResponse"/>&gt;</returns>
        Task<IUploadModelOllamaModelsUploadUrlIdxPostApiResponse> UploadModelOllamaModelsUploadUrlIdxPostAsync(System.IO.Stream file, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Model
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadModelOllamaModelsUploadUrlIdxPostApiResponse"/>?&gt;</returns>
        Task<IUploadModelOllamaModelsUploadUrlIdxPostApiResponse?> UploadModelOllamaModelsUploadUrlIdxPostOrDefaultAsync(System.IO.Stream file, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyConnectionOllamaVerifyPostApiResponse"/>&gt;</returns>
        Task<IVerifyConnectionOllamaVerifyPostApiResponse> VerifyConnectionOllamaVerifyPostAsync(OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyConnectionOllamaVerifyPostApiResponse"/>?&gt;</returns>
        Task<IVerifyConnectionOllamaVerifyPostApiResponse?> VerifyConnectionOllamaVerifyPostOrDefaultAsync(OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICopyModelOllamaApiCopyPostApiResponse"/>
    /// </summary>
    public interface ICopyModelOllamaApiCopyPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICopyModelOllamaApiCopyUrlIdxPostApiResponse"/>
    /// </summary>
    public interface ICopyModelOllamaApiCopyUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICreateModelOllamaApiCreatePostApiResponse"/>
    /// </summary>
    public interface ICreateModelOllamaApiCreatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICreateModelOllamaApiCreateUrlIdxPostApiResponse"/>
    /// </summary>
    public interface ICreateModelOllamaApiCreateUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteModelOllamaApiDeleteDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteModelOllamaApiDeleteDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDownloadModelOllamaModelsDownloadPostApiResponse"/>
    /// </summary>
    public interface IDownloadModelOllamaModelsDownloadPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IEmbedOllamaApiEmbedPostApiResponse"/>
    /// </summary>
    public interface IEmbedOllamaApiEmbedPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IEmbedOllamaApiEmbedUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IEmbedOllamaApiEmbedUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IEmbeddingsOllamaApiEmbeddingsPostApiResponse"/>
    /// </summary>
    public interface IEmbeddingsOllamaApiEmbeddingsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateChatCompletionOllamaApiChatPostApiResponse"/>
    /// </summary>
    public interface IGenerateChatCompletionOllamaApiChatPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateCompletionOllamaApiGeneratePostApiResponse"/>
    /// </summary>
    public interface IGenerateCompletionOllamaApiGeneratePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetConfigOllamaConfigGetApiResponse"/>
    /// </summary>
    public interface IGetConfigOllamaConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOllamaLoadedModelsOllamaApiPsGetApiResponse"/>
    /// </summary>
    public interface IGetOllamaLoadedModelsOllamaApiPsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOllamaTagsOllamaApiTagsGetApiResponse"/>
    /// </summary>
    public interface IGetOllamaTagsOllamaApiTagsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse"/>
    /// </summary>
    public interface IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetOllamaVersionsOllamaApiVersionGetApiResponse"/>
    /// </summary>
    public interface IGetOllamaVersionsOllamaApiVersionGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse"/>
    /// </summary>
    public interface IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetOpenaiModelsOllamaV1ModelsGetApiResponse"/>
    /// </summary>
    public interface IGetOpenaiModelsOllamaV1ModelsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse"/>
    /// </summary>
    public interface IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetStatusOllamaGetApiResponse"/>
    /// </summary>
    public interface IGetStatusOllamaGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetStatusOllamaHeadApiResponse"/>
    /// </summary>
    public interface IGetStatusOllamaHeadApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPullModelOllamaApiPullPostApiResponse"/>
    /// </summary>
    public interface IPullModelOllamaApiPullPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IPullModelOllamaApiPullUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IPullModelOllamaApiPullUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IPushModelOllamaApiPushDeleteApiResponse"/>
    /// </summary>
    public interface IPushModelOllamaApiPushDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IPushModelOllamaApiPushUrlIdxDeleteApiResponse"/>
    /// </summary>
    public interface IPushModelOllamaApiPushUrlIdxDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IShowModelInfoOllamaApiShowPostApiResponse"/>
    /// </summary>
    public interface IShowModelInfoOllamaApiShowPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUnloadModelOllamaApiUnloadPostApiResponse"/>
    /// </summary>
    public interface IUnloadModelOllamaApiUnloadPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateConfigOllamaConfigUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateConfigOllamaConfigUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUploadModelOllamaModelsUploadPostApiResponse"/>
    /// </summary>
    public interface IUploadModelOllamaModelsUploadPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUploadModelOllamaModelsUploadUrlIdxPostApiResponse"/>
    /// </summary>
    public interface IUploadModelOllamaModelsUploadUrlIdxPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyConnectionOllamaVerifyPostApiResponse"/>
    /// </summary>
    public interface IVerifyConnectionOllamaVerifyPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OllamaApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCopyModelOllamaApiCopyPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCopyModelOllamaApiCopyPost;

        internal void ExecuteOnCopyModelOllamaApiCopyPost(OllamaApi.CopyModelOllamaApiCopyPostApiResponse apiResponse)
        {
            OnCopyModelOllamaApiCopyPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCopyModelOllamaApiCopyPost(Exception exception)
        {
            OnErrorCopyModelOllamaApiCopyPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCopyModelOllamaApiCopyUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCopyModelOllamaApiCopyUrlIdxPost;

        internal void ExecuteOnCopyModelOllamaApiCopyUrlIdxPost(OllamaApi.CopyModelOllamaApiCopyUrlIdxPostApiResponse apiResponse)
        {
            OnCopyModelOllamaApiCopyUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCopyModelOllamaApiCopyUrlIdxPost(Exception exception)
        {
            OnErrorCopyModelOllamaApiCopyUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateModelOllamaApiCreatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateModelOllamaApiCreatePost;

        internal void ExecuteOnCreateModelOllamaApiCreatePost(OllamaApi.CreateModelOllamaApiCreatePostApiResponse apiResponse)
        {
            OnCreateModelOllamaApiCreatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateModelOllamaApiCreatePost(Exception exception)
        {
            OnErrorCreateModelOllamaApiCreatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateModelOllamaApiCreateUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateModelOllamaApiCreateUrlIdxPost;

        internal void ExecuteOnCreateModelOllamaApiCreateUrlIdxPost(OllamaApi.CreateModelOllamaApiCreateUrlIdxPostApiResponse apiResponse)
        {
            OnCreateModelOllamaApiCreateUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateModelOllamaApiCreateUrlIdxPost(Exception exception)
        {
            OnErrorCreateModelOllamaApiCreateUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteModelOllamaApiDeleteDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteModelOllamaApiDeleteDelete;

        internal void ExecuteOnDeleteModelOllamaApiDeleteDelete(OllamaApi.DeleteModelOllamaApiDeleteDeleteApiResponse apiResponse)
        {
            OnDeleteModelOllamaApiDeleteDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteModelOllamaApiDeleteDelete(Exception exception)
        {
            OnErrorDeleteModelOllamaApiDeleteDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteModelOllamaApiDeleteUrlIdxDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteModelOllamaApiDeleteUrlIdxDelete;

        internal void ExecuteOnDeleteModelOllamaApiDeleteUrlIdxDelete(OllamaApi.DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse apiResponse)
        {
            OnDeleteModelOllamaApiDeleteUrlIdxDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteModelOllamaApiDeleteUrlIdxDelete(Exception exception)
        {
            OnErrorDeleteModelOllamaApiDeleteUrlIdxDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadModelOllamaModelsDownloadPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadModelOllamaModelsDownloadPost;

        internal void ExecuteOnDownloadModelOllamaModelsDownloadPost(OllamaApi.DownloadModelOllamaModelsDownloadPostApiResponse apiResponse)
        {
            OnDownloadModelOllamaModelsDownloadPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadModelOllamaModelsDownloadPost(Exception exception)
        {
            OnErrorDownloadModelOllamaModelsDownloadPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadModelOllamaModelsDownloadUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadModelOllamaModelsDownloadUrlIdxPost;

        internal void ExecuteOnDownloadModelOllamaModelsDownloadUrlIdxPost(OllamaApi.DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse apiResponse)
        {
            OnDownloadModelOllamaModelsDownloadUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadModelOllamaModelsDownloadUrlIdxPost(Exception exception)
        {
            OnErrorDownloadModelOllamaModelsDownloadUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmbedOllamaApiEmbedPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmbedOllamaApiEmbedPost;

        internal void ExecuteOnEmbedOllamaApiEmbedPost(OllamaApi.EmbedOllamaApiEmbedPostApiResponse apiResponse)
        {
            OnEmbedOllamaApiEmbedPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmbedOllamaApiEmbedPost(Exception exception)
        {
            OnErrorEmbedOllamaApiEmbedPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmbedOllamaApiEmbedUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmbedOllamaApiEmbedUrlIdxPost;

        internal void ExecuteOnEmbedOllamaApiEmbedUrlIdxPost(OllamaApi.EmbedOllamaApiEmbedUrlIdxPostApiResponse apiResponse)
        {
            OnEmbedOllamaApiEmbedUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmbedOllamaApiEmbedUrlIdxPost(Exception exception)
        {
            OnErrorEmbedOllamaApiEmbedUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmbeddingsOllamaApiEmbeddingsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmbeddingsOllamaApiEmbeddingsPost;

        internal void ExecuteOnEmbeddingsOllamaApiEmbeddingsPost(OllamaApi.EmbeddingsOllamaApiEmbeddingsPostApiResponse apiResponse)
        {
            OnEmbeddingsOllamaApiEmbeddingsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmbeddingsOllamaApiEmbeddingsPost(Exception exception)
        {
            OnErrorEmbeddingsOllamaApiEmbeddingsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEmbeddingsOllamaApiEmbeddingsUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEmbeddingsOllamaApiEmbeddingsUrlIdxPost;

        internal void ExecuteOnEmbeddingsOllamaApiEmbeddingsUrlIdxPost(OllamaApi.EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse apiResponse)
        {
            OnEmbeddingsOllamaApiEmbeddingsUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEmbeddingsOllamaApiEmbeddingsUrlIdxPost(Exception exception)
        {
            OnErrorEmbeddingsOllamaApiEmbeddingsUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateChatCompletionOllamaApiChatPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateChatCompletionOllamaApiChatPost;

        internal void ExecuteOnGenerateChatCompletionOllamaApiChatPost(OllamaApi.GenerateChatCompletionOllamaApiChatPostApiResponse apiResponse)
        {
            OnGenerateChatCompletionOllamaApiChatPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateChatCompletionOllamaApiChatPost(Exception exception)
        {
            OnErrorGenerateChatCompletionOllamaApiChatPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateChatCompletionOllamaApiChatUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateChatCompletionOllamaApiChatUrlIdxPost;

        internal void ExecuteOnGenerateChatCompletionOllamaApiChatUrlIdxPost(OllamaApi.GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse apiResponse)
        {
            OnGenerateChatCompletionOllamaApiChatUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateChatCompletionOllamaApiChatUrlIdxPost(Exception exception)
        {
            OnErrorGenerateChatCompletionOllamaApiChatUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateCompletionOllamaApiGeneratePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateCompletionOllamaApiGeneratePost;

        internal void ExecuteOnGenerateCompletionOllamaApiGeneratePost(OllamaApi.GenerateCompletionOllamaApiGeneratePostApiResponse apiResponse)
        {
            OnGenerateCompletionOllamaApiGeneratePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateCompletionOllamaApiGeneratePost(Exception exception)
        {
            OnErrorGenerateCompletionOllamaApiGeneratePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateCompletionOllamaApiGenerateUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateCompletionOllamaApiGenerateUrlIdxPost;

        internal void ExecuteOnGenerateCompletionOllamaApiGenerateUrlIdxPost(OllamaApi.GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse apiResponse)
        {
            OnGenerateCompletionOllamaApiGenerateUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateCompletionOllamaApiGenerateUrlIdxPost(Exception exception)
        {
            OnErrorGenerateCompletionOllamaApiGenerateUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost;

        internal void ExecuteOnGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(OllamaApi.GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse apiResponse)
        {
            OnGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(Exception exception)
        {
            OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost;

        internal void ExecuteOnGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(OllamaApi.GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse apiResponse)
        {
            OnGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(Exception exception)
        {
            OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateOpenaiCompletionOllamaV1CompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateOpenaiCompletionOllamaV1CompletionsPost;

        internal void ExecuteOnGenerateOpenaiCompletionOllamaV1CompletionsPost(OllamaApi.GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse apiResponse)
        {
            OnGenerateOpenaiCompletionOllamaV1CompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateOpenaiCompletionOllamaV1CompletionsPost(Exception exception)
        {
            OnErrorGenerateOpenaiCompletionOllamaV1CompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost;

        internal void ExecuteOnGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(OllamaApi.GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse apiResponse)
        {
            OnGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(Exception exception)
        {
            OnErrorGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetConfigOllamaConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetConfigOllamaConfigGet;

        internal void ExecuteOnGetConfigOllamaConfigGet(OllamaApi.GetConfigOllamaConfigGetApiResponse apiResponse)
        {
            OnGetConfigOllamaConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConfigOllamaConfigGet(Exception exception)
        {
            OnErrorGetConfigOllamaConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOllamaLoadedModelsOllamaApiPsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOllamaLoadedModelsOllamaApiPsGet;

        internal void ExecuteOnGetOllamaLoadedModelsOllamaApiPsGet(OllamaApi.GetOllamaLoadedModelsOllamaApiPsGetApiResponse apiResponse)
        {
            OnGetOllamaLoadedModelsOllamaApiPsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOllamaLoadedModelsOllamaApiPsGet(Exception exception)
        {
            OnErrorGetOllamaLoadedModelsOllamaApiPsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOllamaTagsOllamaApiTagsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOllamaTagsOllamaApiTagsGet;

        internal void ExecuteOnGetOllamaTagsOllamaApiTagsGet(OllamaApi.GetOllamaTagsOllamaApiTagsGetApiResponse apiResponse)
        {
            OnGetOllamaTagsOllamaApiTagsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOllamaTagsOllamaApiTagsGet(Exception exception)
        {
            OnErrorGetOllamaTagsOllamaApiTagsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOllamaTagsOllamaApiTagsUrlIdxGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOllamaTagsOllamaApiTagsUrlIdxGet;

        internal void ExecuteOnGetOllamaTagsOllamaApiTagsUrlIdxGet(OllamaApi.GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse apiResponse)
        {
            OnGetOllamaTagsOllamaApiTagsUrlIdxGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOllamaTagsOllamaApiTagsUrlIdxGet(Exception exception)
        {
            OnErrorGetOllamaTagsOllamaApiTagsUrlIdxGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOllamaVersionsOllamaApiVersionGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOllamaVersionsOllamaApiVersionGet;

        internal void ExecuteOnGetOllamaVersionsOllamaApiVersionGet(OllamaApi.GetOllamaVersionsOllamaApiVersionGetApiResponse apiResponse)
        {
            OnGetOllamaVersionsOllamaApiVersionGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOllamaVersionsOllamaApiVersionGet(Exception exception)
        {
            OnErrorGetOllamaVersionsOllamaApiVersionGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOllamaVersionsOllamaApiVersionUrlIdxGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOllamaVersionsOllamaApiVersionUrlIdxGet;

        internal void ExecuteOnGetOllamaVersionsOllamaApiVersionUrlIdxGet(OllamaApi.GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse apiResponse)
        {
            OnGetOllamaVersionsOllamaApiVersionUrlIdxGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOllamaVersionsOllamaApiVersionUrlIdxGet(Exception exception)
        {
            OnErrorGetOllamaVersionsOllamaApiVersionUrlIdxGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOpenaiModelsOllamaV1ModelsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOpenaiModelsOllamaV1ModelsGet;

        internal void ExecuteOnGetOpenaiModelsOllamaV1ModelsGet(OllamaApi.GetOpenaiModelsOllamaV1ModelsGetApiResponse apiResponse)
        {
            OnGetOpenaiModelsOllamaV1ModelsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOpenaiModelsOllamaV1ModelsGet(Exception exception)
        {
            OnErrorGetOpenaiModelsOllamaV1ModelsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOpenaiModelsOllamaV1ModelsUrlIdxGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOpenaiModelsOllamaV1ModelsUrlIdxGet;

        internal void ExecuteOnGetOpenaiModelsOllamaV1ModelsUrlIdxGet(OllamaApi.GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse apiResponse)
        {
            OnGetOpenaiModelsOllamaV1ModelsUrlIdxGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOpenaiModelsOllamaV1ModelsUrlIdxGet(Exception exception)
        {
            OnErrorGetOpenaiModelsOllamaV1ModelsUrlIdxGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStatusOllamaGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStatusOllamaGet;

        internal void ExecuteOnGetStatusOllamaGet(OllamaApi.GetStatusOllamaGetApiResponse apiResponse)
        {
            OnGetStatusOllamaGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStatusOllamaGet(Exception exception)
        {
            OnErrorGetStatusOllamaGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetStatusOllamaHead;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetStatusOllamaHead;

        internal void ExecuteOnGetStatusOllamaHead(OllamaApi.GetStatusOllamaHeadApiResponse apiResponse)
        {
            OnGetStatusOllamaHead?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetStatusOllamaHead(Exception exception)
        {
            OnErrorGetStatusOllamaHead?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPullModelOllamaApiPullPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPullModelOllamaApiPullPost;

        internal void ExecuteOnPullModelOllamaApiPullPost(OllamaApi.PullModelOllamaApiPullPostApiResponse apiResponse)
        {
            OnPullModelOllamaApiPullPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPullModelOllamaApiPullPost(Exception exception)
        {
            OnErrorPullModelOllamaApiPullPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPullModelOllamaApiPullUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPullModelOllamaApiPullUrlIdxPost;

        internal void ExecuteOnPullModelOllamaApiPullUrlIdxPost(OllamaApi.PullModelOllamaApiPullUrlIdxPostApiResponse apiResponse)
        {
            OnPullModelOllamaApiPullUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPullModelOllamaApiPullUrlIdxPost(Exception exception)
        {
            OnErrorPullModelOllamaApiPullUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPushModelOllamaApiPushDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPushModelOllamaApiPushDelete;

        internal void ExecuteOnPushModelOllamaApiPushDelete(OllamaApi.PushModelOllamaApiPushDeleteApiResponse apiResponse)
        {
            OnPushModelOllamaApiPushDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPushModelOllamaApiPushDelete(Exception exception)
        {
            OnErrorPushModelOllamaApiPushDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPushModelOllamaApiPushUrlIdxDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPushModelOllamaApiPushUrlIdxDelete;

        internal void ExecuteOnPushModelOllamaApiPushUrlIdxDelete(OllamaApi.PushModelOllamaApiPushUrlIdxDeleteApiResponse apiResponse)
        {
            OnPushModelOllamaApiPushUrlIdxDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPushModelOllamaApiPushUrlIdxDelete(Exception exception)
        {
            OnErrorPushModelOllamaApiPushUrlIdxDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnShowModelInfoOllamaApiShowPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorShowModelInfoOllamaApiShowPost;

        internal void ExecuteOnShowModelInfoOllamaApiShowPost(OllamaApi.ShowModelInfoOllamaApiShowPostApiResponse apiResponse)
        {
            OnShowModelInfoOllamaApiShowPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorShowModelInfoOllamaApiShowPost(Exception exception)
        {
            OnErrorShowModelInfoOllamaApiShowPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUnloadModelOllamaApiUnloadPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUnloadModelOllamaApiUnloadPost;

        internal void ExecuteOnUnloadModelOllamaApiUnloadPost(OllamaApi.UnloadModelOllamaApiUnloadPostApiResponse apiResponse)
        {
            OnUnloadModelOllamaApiUnloadPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUnloadModelOllamaApiUnloadPost(Exception exception)
        {
            OnErrorUnloadModelOllamaApiUnloadPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateConfigOllamaConfigUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateConfigOllamaConfigUpdatePost;

        internal void ExecuteOnUpdateConfigOllamaConfigUpdatePost(OllamaApi.UpdateConfigOllamaConfigUpdatePostApiResponse apiResponse)
        {
            OnUpdateConfigOllamaConfigUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateConfigOllamaConfigUpdatePost(Exception exception)
        {
            OnErrorUpdateConfigOllamaConfigUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadModelOllamaModelsUploadPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadModelOllamaModelsUploadPost;

        internal void ExecuteOnUploadModelOllamaModelsUploadPost(OllamaApi.UploadModelOllamaModelsUploadPostApiResponse apiResponse)
        {
            OnUploadModelOllamaModelsUploadPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadModelOllamaModelsUploadPost(Exception exception)
        {
            OnErrorUploadModelOllamaModelsUploadPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUploadModelOllamaModelsUploadUrlIdxPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUploadModelOllamaModelsUploadUrlIdxPost;

        internal void ExecuteOnUploadModelOllamaModelsUploadUrlIdxPost(OllamaApi.UploadModelOllamaModelsUploadUrlIdxPostApiResponse apiResponse)
        {
            OnUploadModelOllamaModelsUploadUrlIdxPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUploadModelOllamaModelsUploadUrlIdxPost(Exception exception)
        {
            OnErrorUploadModelOllamaModelsUploadUrlIdxPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnVerifyConnectionOllamaVerifyPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorVerifyConnectionOllamaVerifyPost;

        internal void ExecuteOnVerifyConnectionOllamaVerifyPost(OllamaApi.VerifyConnectionOllamaVerifyPostApiResponse apiResponse)
        {
            OnVerifyConnectionOllamaVerifyPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyConnectionOllamaVerifyPost(Exception exception)
        {
            OnErrorVerifyConnectionOllamaVerifyPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OllamaApi : IOllamaApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OllamaApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OllamaApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OllamaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OllamaApi(ILogger<OllamaApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OllamaApiEvents ollamaApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OllamaApi>();
            HttpClient = httpClient;
            Events = ollamaApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCopyModelOllamaApiCopyPost(CopyModelForm copyModelForm, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="copyModelForm"></param>
        /// <returns></returns>
        private void ValidateCopyModelOllamaApiCopyPost(CopyModelForm copyModelForm)
        {
            if (copyModelForm == null)
                throw new ArgumentNullException(nameof(copyModelForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterCopyModelOllamaApiCopyPostDefaultImplementation(ICopyModelOllamaApiCopyPostApiResponse apiResponseLocalVar, CopyModelForm copyModelForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterCopyModelOllamaApiCopyPost(ref suppressDefaultLog, apiResponseLocalVar, copyModelForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterCopyModelOllamaApiCopyPost(ref bool suppressDefaultLog, ICopyModelOllamaApiCopyPostApiResponse apiResponseLocalVar, CopyModelForm copyModelForm, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorCopyModelOllamaApiCopyPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CopyModelForm copyModelForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCopyModelOllamaApiCopyPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, copyModelForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorCopyModelOllamaApiCopyPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CopyModelForm copyModelForm, Option<int?> urlIdx);

        /// <summary>
        /// Copy Model 
        /// </summary>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICopyModelOllamaApiCopyPostApiResponse"/>&gt;</returns>
        public async Task<ICopyModelOllamaApiCopyPostApiResponse?> CopyModelOllamaApiCopyPostOrDefaultAsync(CopyModelForm copyModelForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CopyModelOllamaApiCopyPostAsync(copyModelForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Copy Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICopyModelOllamaApiCopyPostApiResponse"/>&gt;</returns>
        public async Task<ICopyModelOllamaApiCopyPostApiResponse> CopyModelOllamaApiCopyPostAsync(CopyModelForm copyModelForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCopyModelOllamaApiCopyPost(copyModelForm);

                FormatCopyModelOllamaApiCopyPost(copyModelForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/copy"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/copy");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (copyModelForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(copyModelForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CopyModelOllamaApiCopyPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CopyModelOllamaApiCopyPostApiResponse>();

                        CopyModelOllamaApiCopyPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/copy", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCopyModelOllamaApiCopyPostDefaultImplementation(apiResponseLocalVar, copyModelForm, urlIdx);

                        Events.ExecuteOnCopyModelOllamaApiCopyPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCopyModelOllamaApiCopyPostDefaultImplementation(e, "/ollama/api/copy", uriBuilderLocalVar.Path, copyModelForm, urlIdx);
                Events.ExecuteOnErrorCopyModelOllamaApiCopyPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CopyModelOllamaApiCopyPostApiResponse"/>
        /// </summary>
        public partial class CopyModelOllamaApiCopyPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICopyModelOllamaApiCopyPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CopyModelOllamaApiCopyPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CopyModelOllamaApiCopyPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CopyModelOllamaApiCopyPostApiResponse(ILogger<CopyModelOllamaApiCopyPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCopyModelOllamaApiCopyUrlIdxPost(CopyModelForm copyModelForm, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="copyModelForm"></param>
        /// <returns></returns>
        private void ValidateCopyModelOllamaApiCopyUrlIdxPost(CopyModelForm copyModelForm)
        {
            if (copyModelForm == null)
                throw new ArgumentNullException(nameof(copyModelForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterCopyModelOllamaApiCopyUrlIdxPostDefaultImplementation(ICopyModelOllamaApiCopyUrlIdxPostApiResponse apiResponseLocalVar, CopyModelForm copyModelForm, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterCopyModelOllamaApiCopyUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, copyModelForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterCopyModelOllamaApiCopyUrlIdxPost(ref bool suppressDefaultLog, ICopyModelOllamaApiCopyUrlIdxPostApiResponse apiResponseLocalVar, CopyModelForm copyModelForm, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorCopyModelOllamaApiCopyUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CopyModelForm copyModelForm, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCopyModelOllamaApiCopyUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, copyModelForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorCopyModelOllamaApiCopyUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CopyModelForm copyModelForm, int? urlIdx);

        /// <summary>
        /// Copy Model 
        /// </summary>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICopyModelOllamaApiCopyUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<ICopyModelOllamaApiCopyUrlIdxPostApiResponse?> CopyModelOllamaApiCopyUrlIdxPostOrDefaultAsync(CopyModelForm copyModelForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CopyModelOllamaApiCopyUrlIdxPostAsync(copyModelForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Copy Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyModelForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICopyModelOllamaApiCopyUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<ICopyModelOllamaApiCopyUrlIdxPostApiResponse> CopyModelOllamaApiCopyUrlIdxPostAsync(CopyModelForm copyModelForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCopyModelOllamaApiCopyUrlIdxPost(copyModelForm);

                FormatCopyModelOllamaApiCopyUrlIdxPost(copyModelForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/copy/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/copy/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (copyModelForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(copyModelForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CopyModelOllamaApiCopyUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CopyModelOllamaApiCopyUrlIdxPostApiResponse>();

                        CopyModelOllamaApiCopyUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/copy/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCopyModelOllamaApiCopyUrlIdxPostDefaultImplementation(apiResponseLocalVar, copyModelForm, urlIdx);

                        Events.ExecuteOnCopyModelOllamaApiCopyUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCopyModelOllamaApiCopyUrlIdxPostDefaultImplementation(e, "/ollama/api/copy/{url_idx}", uriBuilderLocalVar.Path, copyModelForm, urlIdx);
                Events.ExecuteOnErrorCopyModelOllamaApiCopyUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CopyModelOllamaApiCopyUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class CopyModelOllamaApiCopyUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICopyModelOllamaApiCopyUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CopyModelOllamaApiCopyUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CopyModelOllamaApiCopyUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CopyModelOllamaApiCopyUrlIdxPostApiResponse(ILogger<CopyModelOllamaApiCopyUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateModelOllamaApiCreatePost(CreateModelForm createModelForm, ref Option<int> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createModelForm"></param>
        /// <returns></returns>
        private void ValidateCreateModelOllamaApiCreatePost(CreateModelForm createModelForm)
        {
            if (createModelForm == null)
                throw new ArgumentNullException(nameof(createModelForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createModelForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterCreateModelOllamaApiCreatePostDefaultImplementation(ICreateModelOllamaApiCreatePostApiResponse apiResponseLocalVar, CreateModelForm createModelForm, Option<int> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterCreateModelOllamaApiCreatePost(ref suppressDefaultLog, apiResponseLocalVar, createModelForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterCreateModelOllamaApiCreatePost(ref bool suppressDefaultLog, ICreateModelOllamaApiCreatePostApiResponse apiResponseLocalVar, CreateModelForm createModelForm, Option<int> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createModelForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorCreateModelOllamaApiCreatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateModelForm createModelForm, Option<int> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateModelOllamaApiCreatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, createModelForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="createModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorCreateModelOllamaApiCreatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CreateModelForm createModelForm, Option<int> urlIdx);

        /// <summary>
        /// Create Model 
        /// </summary>
        /// <param name="createModelForm"></param>
        /// <param name="urlIdx"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateModelOllamaApiCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateModelOllamaApiCreatePostApiResponse?> CreateModelOllamaApiCreatePostOrDefaultAsync(CreateModelForm createModelForm, Option<int> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateModelOllamaApiCreatePostAsync(createModelForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createModelForm"></param>
        /// <param name="urlIdx"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateModelOllamaApiCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateModelOllamaApiCreatePostApiResponse> CreateModelOllamaApiCreatePostAsync(CreateModelForm createModelForm, Option<int> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateModelOllamaApiCreatePost(createModelForm);

                FormatCreateModelOllamaApiCreatePost(createModelForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/create");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (createModelForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createModelForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateModelOllamaApiCreatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateModelOllamaApiCreatePostApiResponse>();

                        CreateModelOllamaApiCreatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateModelOllamaApiCreatePostDefaultImplementation(apiResponseLocalVar, createModelForm, urlIdx);

                        Events.ExecuteOnCreateModelOllamaApiCreatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateModelOllamaApiCreatePostDefaultImplementation(e, "/ollama/api/create", uriBuilderLocalVar.Path, createModelForm, urlIdx);
                Events.ExecuteOnErrorCreateModelOllamaApiCreatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateModelOllamaApiCreatePostApiResponse"/>
        /// </summary>
        public partial class CreateModelOllamaApiCreatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateModelOllamaApiCreatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateModelOllamaApiCreatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateModelOllamaApiCreatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateModelOllamaApiCreatePostApiResponse(ILogger<CreateModelOllamaApiCreatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateModelOllamaApiCreateUrlIdxPost(ref int urlIdx, CreateModelForm createModelForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createModelForm"></param>
        /// <returns></returns>
        private void ValidateCreateModelOllamaApiCreateUrlIdxPost(CreateModelForm createModelForm)
        {
            if (createModelForm == null)
                throw new ArgumentNullException(nameof(createModelForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="createModelForm"></param>
        private void AfterCreateModelOllamaApiCreateUrlIdxPostDefaultImplementation(ICreateModelOllamaApiCreateUrlIdxPostApiResponse apiResponseLocalVar, int urlIdx, CreateModelForm createModelForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateModelOllamaApiCreateUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, urlIdx, createModelForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="createModelForm"></param>
        partial void AfterCreateModelOllamaApiCreateUrlIdxPost(ref bool suppressDefaultLog, ICreateModelOllamaApiCreateUrlIdxPostApiResponse apiResponseLocalVar, int urlIdx, CreateModelForm createModelForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="createModelForm"></param>
        private void OnErrorCreateModelOllamaApiCreateUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int urlIdx, CreateModelForm createModelForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateModelOllamaApiCreateUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx, createModelForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="createModelForm"></param>
        partial void OnErrorCreateModelOllamaApiCreateUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int urlIdx, CreateModelForm createModelForm);

        /// <summary>
        /// Create Model 
        /// </summary>
        /// <param name="urlIdx"></param>
        /// <param name="createModelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateModelOllamaApiCreateUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<ICreateModelOllamaApiCreateUrlIdxPostApiResponse?> CreateModelOllamaApiCreateUrlIdxPostOrDefaultAsync(int urlIdx, CreateModelForm createModelForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateModelOllamaApiCreateUrlIdxPostAsync(urlIdx, createModelForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="createModelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateModelOllamaApiCreateUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<ICreateModelOllamaApiCreateUrlIdxPostApiResponse> CreateModelOllamaApiCreateUrlIdxPostAsync(int urlIdx, CreateModelForm createModelForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateModelOllamaApiCreateUrlIdxPost(createModelForm);

                FormatCreateModelOllamaApiCreateUrlIdxPost(ref urlIdx, createModelForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/create/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/create/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (createModelForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createModelForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateModelOllamaApiCreateUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateModelOllamaApiCreateUrlIdxPostApiResponse>();

                        CreateModelOllamaApiCreateUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/create/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateModelOllamaApiCreateUrlIdxPostDefaultImplementation(apiResponseLocalVar, urlIdx, createModelForm);

                        Events.ExecuteOnCreateModelOllamaApiCreateUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateModelOllamaApiCreateUrlIdxPostDefaultImplementation(e, "/ollama/api/create/{url_idx}", uriBuilderLocalVar.Path, urlIdx, createModelForm);
                Events.ExecuteOnErrorCreateModelOllamaApiCreateUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateModelOllamaApiCreateUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class CreateModelOllamaApiCreateUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateModelOllamaApiCreateUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateModelOllamaApiCreateUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateModelOllamaApiCreateUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateModelOllamaApiCreateUrlIdxPostApiResponse(ILogger<CreateModelOllamaApiCreateUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteModelOllamaApiDeleteDelete(ModelNameForm modelNameForm, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <returns></returns>
        private void ValidateDeleteModelOllamaApiDeleteDelete(ModelNameForm modelNameForm)
        {
            if (modelNameForm == null)
                throw new ArgumentNullException(nameof(modelNameForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterDeleteModelOllamaApiDeleteDeleteDefaultImplementation(IDeleteModelOllamaApiDeleteDeleteApiResponse apiResponseLocalVar, ModelNameForm modelNameForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterDeleteModelOllamaApiDeleteDelete(ref suppressDefaultLog, apiResponseLocalVar, modelNameForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterDeleteModelOllamaApiDeleteDelete(ref bool suppressDefaultLog, IDeleteModelOllamaApiDeleteDeleteApiResponse apiResponseLocalVar, ModelNameForm modelNameForm, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorDeleteModelOllamaApiDeleteDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteModelOllamaApiDeleteDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, modelNameForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorDeleteModelOllamaApiDeleteDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm, Option<int?> urlIdx);

        /// <summary>
        /// Delete Model 
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteModelOllamaApiDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteModelOllamaApiDeleteDeleteApiResponse?> DeleteModelOllamaApiDeleteDeleteOrDefaultAsync(ModelNameForm modelNameForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteModelOllamaApiDeleteDeleteAsync(modelNameForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteModelOllamaApiDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteModelOllamaApiDeleteDeleteApiResponse> DeleteModelOllamaApiDeleteDeleteAsync(ModelNameForm modelNameForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteModelOllamaApiDeleteDelete(modelNameForm);

                FormatDeleteModelOllamaApiDeleteDelete(modelNameForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/delete");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (modelNameForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelNameForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteModelOllamaApiDeleteDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteModelOllamaApiDeleteDeleteApiResponse>();

                        DeleteModelOllamaApiDeleteDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteModelOllamaApiDeleteDeleteDefaultImplementation(apiResponseLocalVar, modelNameForm, urlIdx);

                        Events.ExecuteOnDeleteModelOllamaApiDeleteDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteModelOllamaApiDeleteDeleteDefaultImplementation(e, "/ollama/api/delete", uriBuilderLocalVar.Path, modelNameForm, urlIdx);
                Events.ExecuteOnErrorDeleteModelOllamaApiDeleteDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteModelOllamaApiDeleteDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteModelOllamaApiDeleteDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteModelOllamaApiDeleteDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteModelOllamaApiDeleteDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteModelOllamaApiDeleteDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteModelOllamaApiDeleteDeleteApiResponse(ILogger<DeleteModelOllamaApiDeleteDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteModelOllamaApiDeleteUrlIdxDelete(ModelNameForm modelNameForm, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <returns></returns>
        private void ValidateDeleteModelOllamaApiDeleteUrlIdxDelete(ModelNameForm modelNameForm)
        {
            if (modelNameForm == null)
                throw new ArgumentNullException(nameof(modelNameForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterDeleteModelOllamaApiDeleteUrlIdxDeleteDefaultImplementation(IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse apiResponseLocalVar, ModelNameForm modelNameForm, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterDeleteModelOllamaApiDeleteUrlIdxDelete(ref suppressDefaultLog, apiResponseLocalVar, modelNameForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterDeleteModelOllamaApiDeleteUrlIdxDelete(ref bool suppressDefaultLog, IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse apiResponseLocalVar, ModelNameForm modelNameForm, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorDeleteModelOllamaApiDeleteUrlIdxDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteModelOllamaApiDeleteUrlIdxDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, modelNameForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorDeleteModelOllamaApiDeleteUrlIdxDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm, int? urlIdx);

        /// <summary>
        /// Delete Model 
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse?> DeleteModelOllamaApiDeleteUrlIdxDeleteOrDefaultAsync(ModelNameForm modelNameForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteModelOllamaApiDeleteUrlIdxDeleteAsync(modelNameForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse> DeleteModelOllamaApiDeleteUrlIdxDeleteAsync(ModelNameForm modelNameForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteModelOllamaApiDeleteUrlIdxDelete(modelNameForm);

                FormatDeleteModelOllamaApiDeleteUrlIdxDelete(modelNameForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/delete/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/delete/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (modelNameForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelNameForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse>();

                        DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/delete/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteModelOllamaApiDeleteUrlIdxDeleteDefaultImplementation(apiResponseLocalVar, modelNameForm, urlIdx);

                        Events.ExecuteOnDeleteModelOllamaApiDeleteUrlIdxDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteModelOllamaApiDeleteUrlIdxDeleteDefaultImplementation(e, "/ollama/api/delete/{url_idx}", uriBuilderLocalVar.Path, modelNameForm, urlIdx);
                Events.ExecuteOnErrorDeleteModelOllamaApiDeleteUrlIdxDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse(ILogger<DeleteModelOllamaApiDeleteUrlIdxDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDownloadModelOllamaModelsDownloadPost(UrlForm urlForm, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="urlForm"></param>
        /// <returns></returns>
        private void ValidateDownloadModelOllamaModelsDownloadPost(UrlForm urlForm)
        {
            if (urlForm == null)
                throw new ArgumentNullException(nameof(urlForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterDownloadModelOllamaModelsDownloadPostDefaultImplementation(IDownloadModelOllamaModelsDownloadPostApiResponse apiResponseLocalVar, UrlForm urlForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterDownloadModelOllamaModelsDownloadPost(ref suppressDefaultLog, apiResponseLocalVar, urlForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterDownloadModelOllamaModelsDownloadPost(ref bool suppressDefaultLog, IDownloadModelOllamaModelsDownloadPostApiResponse apiResponseLocalVar, UrlForm urlForm, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorDownloadModelOllamaModelsDownloadPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UrlForm urlForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadModelOllamaModelsDownloadPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorDownloadModelOllamaModelsDownloadPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UrlForm urlForm, Option<int?> urlIdx);

        /// <summary>
        /// Download Model 
        /// </summary>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadModelOllamaModelsDownloadPostApiResponse"/>&gt;</returns>
        public async Task<IDownloadModelOllamaModelsDownloadPostApiResponse?> DownloadModelOllamaModelsDownloadPostOrDefaultAsync(UrlForm urlForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadModelOllamaModelsDownloadPostAsync(urlForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadModelOllamaModelsDownloadPostApiResponse"/>&gt;</returns>
        public async Task<IDownloadModelOllamaModelsDownloadPostApiResponse> DownloadModelOllamaModelsDownloadPostAsync(UrlForm urlForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDownloadModelOllamaModelsDownloadPost(urlForm);

                FormatDownloadModelOllamaModelsDownloadPost(urlForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/models/download"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/models/download");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (urlForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(urlForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DownloadModelOllamaModelsDownloadPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadModelOllamaModelsDownloadPostApiResponse>();

                        DownloadModelOllamaModelsDownloadPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/models/download", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDownloadModelOllamaModelsDownloadPostDefaultImplementation(apiResponseLocalVar, urlForm, urlIdx);

                        Events.ExecuteOnDownloadModelOllamaModelsDownloadPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadModelOllamaModelsDownloadPostDefaultImplementation(e, "/ollama/models/download", uriBuilderLocalVar.Path, urlForm, urlIdx);
                Events.ExecuteOnErrorDownloadModelOllamaModelsDownloadPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadModelOllamaModelsDownloadPostApiResponse"/>
        /// </summary>
        public partial class DownloadModelOllamaModelsDownloadPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDownloadModelOllamaModelsDownloadPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadModelOllamaModelsDownloadPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadModelOllamaModelsDownloadPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadModelOllamaModelsDownloadPostApiResponse(ILogger<DownloadModelOllamaModelsDownloadPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDownloadModelOllamaModelsDownloadUrlIdxPost(UrlForm urlForm, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="urlForm"></param>
        /// <returns></returns>
        private void ValidateDownloadModelOllamaModelsDownloadUrlIdxPost(UrlForm urlForm)
        {
            if (urlForm == null)
                throw new ArgumentNullException(nameof(urlForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterDownloadModelOllamaModelsDownloadUrlIdxPostDefaultImplementation(IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse apiResponseLocalVar, UrlForm urlForm, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterDownloadModelOllamaModelsDownloadUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, urlForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterDownloadModelOllamaModelsDownloadUrlIdxPost(ref bool suppressDefaultLog, IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse apiResponseLocalVar, UrlForm urlForm, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorDownloadModelOllamaModelsDownloadUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UrlForm urlForm, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadModelOllamaModelsDownloadUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorDownloadModelOllamaModelsDownloadUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UrlForm urlForm, int? urlIdx);

        /// <summary>
        /// Download Model 
        /// </summary>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse?> DownloadModelOllamaModelsDownloadUrlIdxPostOrDefaultAsync(UrlForm urlForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadModelOllamaModelsDownloadUrlIdxPostAsync(urlForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse> DownloadModelOllamaModelsDownloadUrlIdxPostAsync(UrlForm urlForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDownloadModelOllamaModelsDownloadUrlIdxPost(urlForm);

                FormatDownloadModelOllamaModelsDownloadUrlIdxPost(urlForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/models/download/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/models/download/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (urlForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(urlForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse>();

                        DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/models/download/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDownloadModelOllamaModelsDownloadUrlIdxPostDefaultImplementation(apiResponseLocalVar, urlForm, urlIdx);

                        Events.ExecuteOnDownloadModelOllamaModelsDownloadUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadModelOllamaModelsDownloadUrlIdxPostDefaultImplementation(e, "/ollama/models/download/{url_idx}", uriBuilderLocalVar.Path, urlForm, urlIdx);
                Events.ExecuteOnErrorDownloadModelOllamaModelsDownloadUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDownloadModelOllamaModelsDownloadUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse(ILogger<DownloadModelOllamaModelsDownloadUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmbedOllamaApiEmbedPost(GenerateEmbedForm generateEmbedForm, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateEmbedForm"></param>
        /// <returns></returns>
        private void ValidateEmbedOllamaApiEmbedPost(GenerateEmbedForm generateEmbedForm)
        {
            if (generateEmbedForm == null)
                throw new ArgumentNullException(nameof(generateEmbedForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterEmbedOllamaApiEmbedPostDefaultImplementation(IEmbedOllamaApiEmbedPostApiResponse apiResponseLocalVar, GenerateEmbedForm generateEmbedForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterEmbedOllamaApiEmbedPost(ref suppressDefaultLog, apiResponseLocalVar, generateEmbedForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterEmbedOllamaApiEmbedPost(ref bool suppressDefaultLog, IEmbedOllamaApiEmbedPostApiResponse apiResponseLocalVar, GenerateEmbedForm generateEmbedForm, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorEmbedOllamaApiEmbedPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateEmbedForm generateEmbedForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmbedOllamaApiEmbedPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateEmbedForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorEmbedOllamaApiEmbedPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateEmbedForm generateEmbedForm, Option<int?> urlIdx);

        /// <summary>
        /// Embed 
        /// </summary>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbedOllamaApiEmbedPostApiResponse"/>&gt;</returns>
        public async Task<IEmbedOllamaApiEmbedPostApiResponse?> EmbedOllamaApiEmbedPostOrDefaultAsync(GenerateEmbedForm generateEmbedForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmbedOllamaApiEmbedPostAsync(generateEmbedForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Embed 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbedOllamaApiEmbedPostApiResponse"/>&gt;</returns>
        public async Task<IEmbedOllamaApiEmbedPostApiResponse> EmbedOllamaApiEmbedPostAsync(GenerateEmbedForm generateEmbedForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmbedOllamaApiEmbedPost(generateEmbedForm);

                FormatEmbedOllamaApiEmbedPost(generateEmbedForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/embed"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/embed");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (generateEmbedForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateEmbedForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmbedOllamaApiEmbedPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmbedOllamaApiEmbedPostApiResponse>();

                        EmbedOllamaApiEmbedPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/embed", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmbedOllamaApiEmbedPostDefaultImplementation(apiResponseLocalVar, generateEmbedForm, urlIdx);

                        Events.ExecuteOnEmbedOllamaApiEmbedPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmbedOllamaApiEmbedPostDefaultImplementation(e, "/ollama/api/embed", uriBuilderLocalVar.Path, generateEmbedForm, urlIdx);
                Events.ExecuteOnErrorEmbedOllamaApiEmbedPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmbedOllamaApiEmbedPostApiResponse"/>
        /// </summary>
        public partial class EmbedOllamaApiEmbedPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IEmbedOllamaApiEmbedPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmbedOllamaApiEmbedPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmbedOllamaApiEmbedPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmbedOllamaApiEmbedPostApiResponse(ILogger<EmbedOllamaApiEmbedPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmbedOllamaApiEmbedUrlIdxPost(GenerateEmbedForm generateEmbedForm, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateEmbedForm"></param>
        /// <returns></returns>
        private void ValidateEmbedOllamaApiEmbedUrlIdxPost(GenerateEmbedForm generateEmbedForm)
        {
            if (generateEmbedForm == null)
                throw new ArgumentNullException(nameof(generateEmbedForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterEmbedOllamaApiEmbedUrlIdxPostDefaultImplementation(IEmbedOllamaApiEmbedUrlIdxPostApiResponse apiResponseLocalVar, GenerateEmbedForm generateEmbedForm, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterEmbedOllamaApiEmbedUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, generateEmbedForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterEmbedOllamaApiEmbedUrlIdxPost(ref bool suppressDefaultLog, IEmbedOllamaApiEmbedUrlIdxPostApiResponse apiResponseLocalVar, GenerateEmbedForm generateEmbedForm, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorEmbedOllamaApiEmbedUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateEmbedForm generateEmbedForm, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmbedOllamaApiEmbedUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateEmbedForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorEmbedOllamaApiEmbedUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateEmbedForm generateEmbedForm, int? urlIdx);

        /// <summary>
        /// Embed 
        /// </summary>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbedOllamaApiEmbedUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IEmbedOllamaApiEmbedUrlIdxPostApiResponse?> EmbedOllamaApiEmbedUrlIdxPostOrDefaultAsync(GenerateEmbedForm generateEmbedForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmbedOllamaApiEmbedUrlIdxPostAsync(generateEmbedForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Embed 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmbedForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbedOllamaApiEmbedUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IEmbedOllamaApiEmbedUrlIdxPostApiResponse> EmbedOllamaApiEmbedUrlIdxPostAsync(GenerateEmbedForm generateEmbedForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmbedOllamaApiEmbedUrlIdxPost(generateEmbedForm);

                FormatEmbedOllamaApiEmbedUrlIdxPost(generateEmbedForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/embed/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/embed/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (generateEmbedForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateEmbedForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmbedOllamaApiEmbedUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmbedOllamaApiEmbedUrlIdxPostApiResponse>();

                        EmbedOllamaApiEmbedUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/embed/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmbedOllamaApiEmbedUrlIdxPostDefaultImplementation(apiResponseLocalVar, generateEmbedForm, urlIdx);

                        Events.ExecuteOnEmbedOllamaApiEmbedUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmbedOllamaApiEmbedUrlIdxPostDefaultImplementation(e, "/ollama/api/embed/{url_idx}", uriBuilderLocalVar.Path, generateEmbedForm, urlIdx);
                Events.ExecuteOnErrorEmbedOllamaApiEmbedUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmbedOllamaApiEmbedUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class EmbedOllamaApiEmbedUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IEmbedOllamaApiEmbedUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmbedOllamaApiEmbedUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmbedOllamaApiEmbedUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmbedOllamaApiEmbedUrlIdxPostApiResponse(ILogger<EmbedOllamaApiEmbedUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmbeddingsOllamaApiEmbeddingsPost(GenerateEmbeddingsForm generateEmbeddingsForm, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateEmbeddingsForm"></param>
        /// <returns></returns>
        private void ValidateEmbeddingsOllamaApiEmbeddingsPost(GenerateEmbeddingsForm generateEmbeddingsForm)
        {
            if (generateEmbeddingsForm == null)
                throw new ArgumentNullException(nameof(generateEmbeddingsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterEmbeddingsOllamaApiEmbeddingsPostDefaultImplementation(IEmbeddingsOllamaApiEmbeddingsPostApiResponse apiResponseLocalVar, GenerateEmbeddingsForm generateEmbeddingsForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterEmbeddingsOllamaApiEmbeddingsPost(ref suppressDefaultLog, apiResponseLocalVar, generateEmbeddingsForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterEmbeddingsOllamaApiEmbeddingsPost(ref bool suppressDefaultLog, IEmbeddingsOllamaApiEmbeddingsPostApiResponse apiResponseLocalVar, GenerateEmbeddingsForm generateEmbeddingsForm, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorEmbeddingsOllamaApiEmbeddingsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateEmbeddingsForm generateEmbeddingsForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmbeddingsOllamaApiEmbeddingsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateEmbeddingsForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorEmbeddingsOllamaApiEmbeddingsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateEmbeddingsForm generateEmbeddingsForm, Option<int?> urlIdx);

        /// <summary>
        /// Embeddings 
        /// </summary>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbeddingsOllamaApiEmbeddingsPostApiResponse"/>&gt;</returns>
        public async Task<IEmbeddingsOllamaApiEmbeddingsPostApiResponse?> EmbeddingsOllamaApiEmbeddingsPostOrDefaultAsync(GenerateEmbeddingsForm generateEmbeddingsForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmbeddingsOllamaApiEmbeddingsPostAsync(generateEmbeddingsForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Embeddings 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbeddingsOllamaApiEmbeddingsPostApiResponse"/>&gt;</returns>
        public async Task<IEmbeddingsOllamaApiEmbeddingsPostApiResponse> EmbeddingsOllamaApiEmbeddingsPostAsync(GenerateEmbeddingsForm generateEmbeddingsForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmbeddingsOllamaApiEmbeddingsPost(generateEmbeddingsForm);

                FormatEmbeddingsOllamaApiEmbeddingsPost(generateEmbeddingsForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/embeddings"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/embeddings");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (generateEmbeddingsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateEmbeddingsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmbeddingsOllamaApiEmbeddingsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmbeddingsOllamaApiEmbeddingsPostApiResponse>();

                        EmbeddingsOllamaApiEmbeddingsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/embeddings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmbeddingsOllamaApiEmbeddingsPostDefaultImplementation(apiResponseLocalVar, generateEmbeddingsForm, urlIdx);

                        Events.ExecuteOnEmbeddingsOllamaApiEmbeddingsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmbeddingsOllamaApiEmbeddingsPostDefaultImplementation(e, "/ollama/api/embeddings", uriBuilderLocalVar.Path, generateEmbeddingsForm, urlIdx);
                Events.ExecuteOnErrorEmbeddingsOllamaApiEmbeddingsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmbeddingsOllamaApiEmbeddingsPostApiResponse"/>
        /// </summary>
        public partial class EmbeddingsOllamaApiEmbeddingsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IEmbeddingsOllamaApiEmbeddingsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmbeddingsOllamaApiEmbeddingsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmbeddingsOllamaApiEmbeddingsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmbeddingsOllamaApiEmbeddingsPostApiResponse(ILogger<EmbeddingsOllamaApiEmbeddingsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEmbeddingsOllamaApiEmbeddingsUrlIdxPost(GenerateEmbeddingsForm generateEmbeddingsForm, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateEmbeddingsForm"></param>
        /// <returns></returns>
        private void ValidateEmbeddingsOllamaApiEmbeddingsUrlIdxPost(GenerateEmbeddingsForm generateEmbeddingsForm)
        {
            if (generateEmbeddingsForm == null)
                throw new ArgumentNullException(nameof(generateEmbeddingsForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterEmbeddingsOllamaApiEmbeddingsUrlIdxPostDefaultImplementation(IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse apiResponseLocalVar, GenerateEmbeddingsForm generateEmbeddingsForm, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterEmbeddingsOllamaApiEmbeddingsUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, generateEmbeddingsForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterEmbeddingsOllamaApiEmbeddingsUrlIdxPost(ref bool suppressDefaultLog, IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse apiResponseLocalVar, GenerateEmbeddingsForm generateEmbeddingsForm, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorEmbeddingsOllamaApiEmbeddingsUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateEmbeddingsForm generateEmbeddingsForm, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEmbeddingsOllamaApiEmbeddingsUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateEmbeddingsForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorEmbeddingsOllamaApiEmbeddingsUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateEmbeddingsForm generateEmbeddingsForm, int? urlIdx);

        /// <summary>
        /// Embeddings 
        /// </summary>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse?> EmbeddingsOllamaApiEmbeddingsUrlIdxPostOrDefaultAsync(GenerateEmbeddingsForm generateEmbeddingsForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EmbeddingsOllamaApiEmbeddingsUrlIdxPostAsync(generateEmbeddingsForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Embeddings 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse> EmbeddingsOllamaApiEmbeddingsUrlIdxPostAsync(GenerateEmbeddingsForm generateEmbeddingsForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEmbeddingsOllamaApiEmbeddingsUrlIdxPost(generateEmbeddingsForm);

                FormatEmbeddingsOllamaApiEmbeddingsUrlIdxPost(generateEmbeddingsForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/embeddings/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/embeddings/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (generateEmbeddingsForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateEmbeddingsForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse>();

                        EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/embeddings/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEmbeddingsOllamaApiEmbeddingsUrlIdxPostDefaultImplementation(apiResponseLocalVar, generateEmbeddingsForm, urlIdx);

                        Events.ExecuteOnEmbeddingsOllamaApiEmbeddingsUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEmbeddingsOllamaApiEmbeddingsUrlIdxPostDefaultImplementation(e, "/ollama/api/embeddings/{url_idx}", uriBuilderLocalVar.Path, generateEmbeddingsForm, urlIdx);
                Events.ExecuteOnErrorEmbeddingsOllamaApiEmbeddingsUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IEmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse(ILogger<EmbeddingsOllamaApiEmbeddingsUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateChatCompletionOllamaApiChatPost(ref Object body, ref Option<int?> urlIdx, ref Option<bool?> bypassFilter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateChatCompletionOllamaApiChatPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"></param>
        private void AfterGenerateChatCompletionOllamaApiChatPostDefaultImplementation(IGenerateChatCompletionOllamaApiChatPostApiResponse apiResponseLocalVar, Object body, Option<int?> urlIdx, Option<bool?> bypassFilter)
        {
            bool suppressDefaultLog = false;
            AfterGenerateChatCompletionOllamaApiChatPost(ref suppressDefaultLog, apiResponseLocalVar, body, urlIdx, bypassFilter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"></param>
        partial void AfterGenerateChatCompletionOllamaApiChatPost(ref bool suppressDefaultLog, IGenerateChatCompletionOllamaApiChatPostApiResponse apiResponseLocalVar, Object body, Option<int?> urlIdx, Option<bool?> bypassFilter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"></param>
        private void OnErrorGenerateChatCompletionOllamaApiChatPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, Option<int?> urlIdx, Option<bool?> bypassFilter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateChatCompletionOllamaApiChatPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body, urlIdx, bypassFilter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"></param>
        partial void OnErrorGenerateChatCompletionOllamaApiChatPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, Option<int?> urlIdx, Option<bool?> bypassFilter);

        /// <summary>
        /// Generate Chat Completion 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="bypassFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatCompletionOllamaApiChatPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateChatCompletionOllamaApiChatPostApiResponse?> GenerateChatCompletionOllamaApiChatPostOrDefaultAsync(Object body, Option<int?> urlIdx = default, Option<bool?> bypassFilter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateChatCompletionOllamaApiChatPostAsync(body, urlIdx, bypassFilter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Chat Completion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="bypassFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatCompletionOllamaApiChatPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateChatCompletionOllamaApiChatPostApiResponse> GenerateChatCompletionOllamaApiChatPostAsync(Object body, Option<int?> urlIdx = default, Option<bool?> bypassFilter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateChatCompletionOllamaApiChatPost(body);

                FormatGenerateChatCompletionOllamaApiChatPost(ref body, ref urlIdx, ref bypassFilter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/chat"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/chat");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    if (bypassFilter.IsSet)
                        parseQueryStringLocalVar["bypass_filter"] = ClientUtils.ParameterToString(bypassFilter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateChatCompletionOllamaApiChatPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateChatCompletionOllamaApiChatPostApiResponse>();

                        GenerateChatCompletionOllamaApiChatPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/chat", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateChatCompletionOllamaApiChatPostDefaultImplementation(apiResponseLocalVar, body, urlIdx, bypassFilter);

                        Events.ExecuteOnGenerateChatCompletionOllamaApiChatPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateChatCompletionOllamaApiChatPostDefaultImplementation(e, "/ollama/api/chat", uriBuilderLocalVar.Path, body, urlIdx, bypassFilter);
                Events.ExecuteOnErrorGenerateChatCompletionOllamaApiChatPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateChatCompletionOllamaApiChatPostApiResponse"/>
        /// </summary>
        public partial class GenerateChatCompletionOllamaApiChatPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateChatCompletionOllamaApiChatPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateChatCompletionOllamaApiChatPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateChatCompletionOllamaApiChatPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateChatCompletionOllamaApiChatPostApiResponse(ILogger<GenerateChatCompletionOllamaApiChatPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateChatCompletionOllamaApiChatUrlIdxPost(ref Object body, ref int? urlIdx, ref Option<bool?> bypassFilter);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateChatCompletionOllamaApiChatUrlIdxPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"></param>
        private void AfterGenerateChatCompletionOllamaApiChatUrlIdxPostDefaultImplementation(IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse apiResponseLocalVar, Object body, int? urlIdx, Option<bool?> bypassFilter)
        {
            bool suppressDefaultLog = false;
            AfterGenerateChatCompletionOllamaApiChatUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, body, urlIdx, bypassFilter);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"></param>
        partial void AfterGenerateChatCompletionOllamaApiChatUrlIdxPost(ref bool suppressDefaultLog, IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse apiResponseLocalVar, Object body, int? urlIdx, Option<bool?> bypassFilter);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"></param>
        private void OnErrorGenerateChatCompletionOllamaApiChatUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, int? urlIdx, Option<bool?> bypassFilter)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateChatCompletionOllamaApiChatUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body, urlIdx, bypassFilter);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"></param>
        partial void OnErrorGenerateChatCompletionOllamaApiChatUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, int? urlIdx, Option<bool?> bypassFilter);

        /// <summary>
        /// Generate Chat Completion 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse?> GenerateChatCompletionOllamaApiChatUrlIdxPostOrDefaultAsync(Object body, int? urlIdx = default, Option<bool?> bypassFilter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateChatCompletionOllamaApiChatUrlIdxPostAsync(body, urlIdx, bypassFilter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Chat Completion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="bypassFilter"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse> GenerateChatCompletionOllamaApiChatUrlIdxPostAsync(Object body, int? urlIdx = default, Option<bool?> bypassFilter = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateChatCompletionOllamaApiChatUrlIdxPost(body);

                FormatGenerateChatCompletionOllamaApiChatUrlIdxPost(ref body, ref urlIdx, ref bypassFilter);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/chat/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/chat/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (bypassFilter.IsSet)
                        parseQueryStringLocalVar["bypass_filter"] = ClientUtils.ParameterToString(bypassFilter.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse>();

                        GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/chat/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateChatCompletionOllamaApiChatUrlIdxPostDefaultImplementation(apiResponseLocalVar, body, urlIdx, bypassFilter);

                        Events.ExecuteOnGenerateChatCompletionOllamaApiChatUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateChatCompletionOllamaApiChatUrlIdxPostDefaultImplementation(e, "/ollama/api/chat/{url_idx}", uriBuilderLocalVar.Path, body, urlIdx, bypassFilter);
                Events.ExecuteOnErrorGenerateChatCompletionOllamaApiChatUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse(ILogger<GenerateChatCompletionOllamaApiChatUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateCompletionOllamaApiGeneratePost(GenerateCompletionForm generateCompletionForm, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateCompletionForm"></param>
        /// <returns></returns>
        private void ValidateGenerateCompletionOllamaApiGeneratePost(GenerateCompletionForm generateCompletionForm)
        {
            if (generateCompletionForm == null)
                throw new ArgumentNullException(nameof(generateCompletionForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterGenerateCompletionOllamaApiGeneratePostDefaultImplementation(IGenerateCompletionOllamaApiGeneratePostApiResponse apiResponseLocalVar, GenerateCompletionForm generateCompletionForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGenerateCompletionOllamaApiGeneratePost(ref suppressDefaultLog, apiResponseLocalVar, generateCompletionForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGenerateCompletionOllamaApiGeneratePost(ref bool suppressDefaultLog, IGenerateCompletionOllamaApiGeneratePostApiResponse apiResponseLocalVar, GenerateCompletionForm generateCompletionForm, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGenerateCompletionOllamaApiGeneratePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateCompletionForm generateCompletionForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateCompletionOllamaApiGeneratePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateCompletionForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGenerateCompletionOllamaApiGeneratePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateCompletionForm generateCompletionForm, Option<int?> urlIdx);

        /// <summary>
        /// Generate Completion 
        /// </summary>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateCompletionOllamaApiGeneratePostApiResponse"/>&gt;</returns>
        public async Task<IGenerateCompletionOllamaApiGeneratePostApiResponse?> GenerateCompletionOllamaApiGeneratePostOrDefaultAsync(GenerateCompletionForm generateCompletionForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateCompletionOllamaApiGeneratePostAsync(generateCompletionForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Completion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateCompletionOllamaApiGeneratePostApiResponse"/>&gt;</returns>
        public async Task<IGenerateCompletionOllamaApiGeneratePostApiResponse> GenerateCompletionOllamaApiGeneratePostAsync(GenerateCompletionForm generateCompletionForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateCompletionOllamaApiGeneratePost(generateCompletionForm);

                FormatGenerateCompletionOllamaApiGeneratePost(generateCompletionForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/generate"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/generate");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (generateCompletionForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateCompletionForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateCompletionOllamaApiGeneratePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateCompletionOllamaApiGeneratePostApiResponse>();

                        GenerateCompletionOllamaApiGeneratePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/generate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateCompletionOllamaApiGeneratePostDefaultImplementation(apiResponseLocalVar, generateCompletionForm, urlIdx);

                        Events.ExecuteOnGenerateCompletionOllamaApiGeneratePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateCompletionOllamaApiGeneratePostDefaultImplementation(e, "/ollama/api/generate", uriBuilderLocalVar.Path, generateCompletionForm, urlIdx);
                Events.ExecuteOnErrorGenerateCompletionOllamaApiGeneratePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateCompletionOllamaApiGeneratePostApiResponse"/>
        /// </summary>
        public partial class GenerateCompletionOllamaApiGeneratePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateCompletionOllamaApiGeneratePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateCompletionOllamaApiGeneratePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateCompletionOllamaApiGeneratePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateCompletionOllamaApiGeneratePostApiResponse(ILogger<GenerateCompletionOllamaApiGeneratePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateCompletionOllamaApiGenerateUrlIdxPost(GenerateCompletionForm generateCompletionForm, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateCompletionForm"></param>
        /// <returns></returns>
        private void ValidateGenerateCompletionOllamaApiGenerateUrlIdxPost(GenerateCompletionForm generateCompletionForm)
        {
            if (generateCompletionForm == null)
                throw new ArgumentNullException(nameof(generateCompletionForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterGenerateCompletionOllamaApiGenerateUrlIdxPostDefaultImplementation(IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse apiResponseLocalVar, GenerateCompletionForm generateCompletionForm, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGenerateCompletionOllamaApiGenerateUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, generateCompletionForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGenerateCompletionOllamaApiGenerateUrlIdxPost(ref bool suppressDefaultLog, IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse apiResponseLocalVar, GenerateCompletionForm generateCompletionForm, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGenerateCompletionOllamaApiGenerateUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateCompletionForm generateCompletionForm, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateCompletionOllamaApiGenerateUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, generateCompletionForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGenerateCompletionOllamaApiGenerateUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, GenerateCompletionForm generateCompletionForm, int? urlIdx);

        /// <summary>
        /// Generate Completion 
        /// </summary>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse?> GenerateCompletionOllamaApiGenerateUrlIdxPostOrDefaultAsync(GenerateCompletionForm generateCompletionForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateCompletionOllamaApiGenerateUrlIdxPostAsync(generateCompletionForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Completion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateCompletionForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse> GenerateCompletionOllamaApiGenerateUrlIdxPostAsync(GenerateCompletionForm generateCompletionForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateCompletionOllamaApiGenerateUrlIdxPost(generateCompletionForm);

                FormatGenerateCompletionOllamaApiGenerateUrlIdxPost(generateCompletionForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/generate/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/generate/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (generateCompletionForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateCompletionForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse>();

                        GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/generate/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateCompletionOllamaApiGenerateUrlIdxPostDefaultImplementation(apiResponseLocalVar, generateCompletionForm, urlIdx);

                        Events.ExecuteOnGenerateCompletionOllamaApiGenerateUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateCompletionOllamaApiGenerateUrlIdxPostDefaultImplementation(e, "/ollama/api/generate/{url_idx}", uriBuilderLocalVar.Path, generateCompletionForm, urlIdx);
                Events.ExecuteOnErrorGenerateCompletionOllamaApiGenerateUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse(ILogger<GenerateCompletionOllamaApiGenerateUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(ref Object body, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void AfterGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostDefaultImplementation(IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse apiResponseLocalVar, Object body, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(ref bool suppressDefaultLog, IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse apiResponseLocalVar, Object body, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, Option<int?> urlIdx);

        /// <summary>
        /// Generate Openai Chat Completion 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse?> GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostOrDefaultAsync(Object body, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostAsync(body, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Openai Chat Completion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse> GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostAsync(Object body, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(body);

                FormatGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(ref body, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/v1/chat/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/v1/chat/completions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse>();

                        GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/v1/chat/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostDefaultImplementation(apiResponseLocalVar, body, urlIdx);

                        Events.ExecuteOnGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostDefaultImplementation(e, "/ollama/v1/chat/completions", uriBuilderLocalVar.Path, body, urlIdx);
                Events.ExecuteOnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse(ILogger<GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(ref Object body, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void AfterGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostDefaultImplementation(IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse apiResponseLocalVar, Object body, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, body, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(ref bool suppressDefaultLog, IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse apiResponseLocalVar, Object body, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, int? urlIdx);

        /// <summary>
        /// Generate Openai Chat Completion 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse?> GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostOrDefaultAsync(Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostAsync(body, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Openai Chat Completion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse> GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostAsync(Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(body);

                FormatGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(ref body, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/v1/chat/completions/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/v1/chat/completions/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse>();

                        GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/v1/chat/completions/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostDefaultImplementation(apiResponseLocalVar, body, urlIdx);

                        Events.ExecuteOnGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostDefaultImplementation(e, "/ollama/v1/chat/completions/{url_idx}", uriBuilderLocalVar.Path, body, urlIdx);
                Events.ExecuteOnErrorGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse(ILogger<GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateOpenaiCompletionOllamaV1CompletionsPost(ref Object body, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateOpenaiCompletionOllamaV1CompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void AfterGenerateOpenaiCompletionOllamaV1CompletionsPostDefaultImplementation(IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse apiResponseLocalVar, Object body, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGenerateOpenaiCompletionOllamaV1CompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGenerateOpenaiCompletionOllamaV1CompletionsPost(ref bool suppressDefaultLog, IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse apiResponseLocalVar, Object body, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGenerateOpenaiCompletionOllamaV1CompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateOpenaiCompletionOllamaV1CompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGenerateOpenaiCompletionOllamaV1CompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, Option<int?> urlIdx);

        /// <summary>
        /// Generate Openai Completion 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse?> GenerateOpenaiCompletionOllamaV1CompletionsPostOrDefaultAsync(Object body, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateOpenaiCompletionOllamaV1CompletionsPostAsync(body, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Openai Completion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse> GenerateOpenaiCompletionOllamaV1CompletionsPostAsync(Object body, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateOpenaiCompletionOllamaV1CompletionsPost(body);

                FormatGenerateOpenaiCompletionOllamaV1CompletionsPost(ref body, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/v1/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/v1/completions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse>();

                        GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/v1/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateOpenaiCompletionOllamaV1CompletionsPostDefaultImplementation(apiResponseLocalVar, body, urlIdx);

                        Events.ExecuteOnGenerateOpenaiCompletionOllamaV1CompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateOpenaiCompletionOllamaV1CompletionsPostDefaultImplementation(e, "/ollama/v1/completions", uriBuilderLocalVar.Path, body, urlIdx);
                Events.ExecuteOnErrorGenerateOpenaiCompletionOllamaV1CompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse(ILogger<GenerateOpenaiCompletionOllamaV1CompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(ref Object body, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void AfterGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostDefaultImplementation(IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse apiResponseLocalVar, Object body, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, body, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(ref bool suppressDefaultLog, IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse apiResponseLocalVar, Object body, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body, int? urlIdx);

        /// <summary>
        /// Generate Openai Completion 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse?> GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostOrDefaultAsync(Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostAsync(body, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Openai Completion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse> GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostAsync(Object body, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(body);

                FormatGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(ref body, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/v1/completions/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/v1/completions/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse>();

                        GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/v1/completions/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostDefaultImplementation(apiResponseLocalVar, body, urlIdx);

                        Events.ExecuteOnGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostDefaultImplementation(e, "/ollama/v1/completions/{url_idx}", uriBuilderLocalVar.Path, body, urlIdx);
                Events.ExecuteOnErrorGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse(ILogger<GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetConfigOllamaConfigGetDefaultImplementation(IGetConfigOllamaConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetConfigOllamaConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetConfigOllamaConfigGet(ref bool suppressDefaultLog, IGetConfigOllamaConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetConfigOllamaConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConfigOllamaConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetConfigOllamaConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigOllamaConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetConfigOllamaConfigGetApiResponse?> GetConfigOllamaConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConfigOllamaConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigOllamaConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetConfigOllamaConfigGetApiResponse> GetConfigOllamaConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetConfigOllamaConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConfigOllamaConfigGetApiResponse>();

                        GetConfigOllamaConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConfigOllamaConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetConfigOllamaConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConfigOllamaConfigGetDefaultImplementation(e, "/ollama/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetConfigOllamaConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConfigOllamaConfigGetApiResponse"/>
        /// </summary>
        public partial class GetConfigOllamaConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetConfigOllamaConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConfigOllamaConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConfigOllamaConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConfigOllamaConfigGetApiResponse(ILogger<GetConfigOllamaConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetOllamaLoadedModelsOllamaApiPsGetDefaultImplementation(IGetOllamaLoadedModelsOllamaApiPsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetOllamaLoadedModelsOllamaApiPsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetOllamaLoadedModelsOllamaApiPsGet(ref bool suppressDefaultLog, IGetOllamaLoadedModelsOllamaApiPsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetOllamaLoadedModelsOllamaApiPsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOllamaLoadedModelsOllamaApiPsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetOllamaLoadedModelsOllamaApiPsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Ollama Loaded Models List models that are currently loaded into Ollama memory, and which node they are loaded on.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaLoadedModelsOllamaApiPsGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaLoadedModelsOllamaApiPsGetApiResponse?> GetOllamaLoadedModelsOllamaApiPsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOllamaLoadedModelsOllamaApiPsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Ollama Loaded Models List models that are currently loaded into Ollama memory, and which node they are loaded on.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaLoadedModelsOllamaApiPsGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaLoadedModelsOllamaApiPsGetApiResponse> GetOllamaLoadedModelsOllamaApiPsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/ps"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/ps");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOllamaLoadedModelsOllamaApiPsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOllamaLoadedModelsOllamaApiPsGetApiResponse>();

                        GetOllamaLoadedModelsOllamaApiPsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/ps", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOllamaLoadedModelsOllamaApiPsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetOllamaLoadedModelsOllamaApiPsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOllamaLoadedModelsOllamaApiPsGetDefaultImplementation(e, "/ollama/api/ps", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetOllamaLoadedModelsOllamaApiPsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOllamaLoadedModelsOllamaApiPsGetApiResponse"/>
        /// </summary>
        public partial class GetOllamaLoadedModelsOllamaApiPsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOllamaLoadedModelsOllamaApiPsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOllamaLoadedModelsOllamaApiPsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOllamaLoadedModelsOllamaApiPsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOllamaLoadedModelsOllamaApiPsGetApiResponse(ILogger<GetOllamaLoadedModelsOllamaApiPsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOllamaTagsOllamaApiTagsGet(ref Option<int?> urlIdx);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetOllamaTagsOllamaApiTagsGetDefaultImplementation(IGetOllamaTagsOllamaApiTagsGetApiResponse apiResponseLocalVar, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetOllamaTagsOllamaApiTagsGet(ref suppressDefaultLog, apiResponseLocalVar, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetOllamaTagsOllamaApiTagsGet(ref bool suppressDefaultLog, IGetOllamaTagsOllamaApiTagsGetApiResponse apiResponseLocalVar, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetOllamaTagsOllamaApiTagsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOllamaTagsOllamaApiTagsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetOllamaTagsOllamaApiTagsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> urlIdx);

        /// <summary>
        /// Get Ollama Tags 
        /// </summary>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaTagsOllamaApiTagsGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaTagsOllamaApiTagsGetApiResponse?> GetOllamaTagsOllamaApiTagsGetOrDefaultAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOllamaTagsOllamaApiTagsGetAsync(urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Ollama Tags 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaTagsOllamaApiTagsGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaTagsOllamaApiTagsGetApiResponse> GetOllamaTagsOllamaApiTagsGetAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOllamaTagsOllamaApiTagsGet(ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/tags");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOllamaTagsOllamaApiTagsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOllamaTagsOllamaApiTagsGetApiResponse>();

                        GetOllamaTagsOllamaApiTagsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOllamaTagsOllamaApiTagsGetDefaultImplementation(apiResponseLocalVar, urlIdx);

                        Events.ExecuteOnGetOllamaTagsOllamaApiTagsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOllamaTagsOllamaApiTagsGetDefaultImplementation(e, "/ollama/api/tags", uriBuilderLocalVar.Path, urlIdx);
                Events.ExecuteOnErrorGetOllamaTagsOllamaApiTagsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOllamaTagsOllamaApiTagsGetApiResponse"/>
        /// </summary>
        public partial class GetOllamaTagsOllamaApiTagsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOllamaTagsOllamaApiTagsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOllamaTagsOllamaApiTagsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOllamaTagsOllamaApiTagsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOllamaTagsOllamaApiTagsGetApiResponse(ILogger<GetOllamaTagsOllamaApiTagsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOllamaTagsOllamaApiTagsUrlIdxGet(ref int? urlIdx);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetOllamaTagsOllamaApiTagsUrlIdxGetDefaultImplementation(IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse apiResponseLocalVar, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetOllamaTagsOllamaApiTagsUrlIdxGet(ref suppressDefaultLog, apiResponseLocalVar, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetOllamaTagsOllamaApiTagsUrlIdxGet(ref bool suppressDefaultLog, IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse apiResponseLocalVar, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetOllamaTagsOllamaApiTagsUrlIdxGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOllamaTagsOllamaApiTagsUrlIdxGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetOllamaTagsOllamaApiTagsUrlIdxGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int? urlIdx);

        /// <summary>
        /// Get Ollama Tags 
        /// </summary>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse?> GetOllamaTagsOllamaApiTagsUrlIdxGetOrDefaultAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOllamaTagsOllamaApiTagsUrlIdxGetAsync(urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Ollama Tags 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse> GetOllamaTagsOllamaApiTagsUrlIdxGetAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOllamaTagsOllamaApiTagsUrlIdxGet(ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/tags/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/tags/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse>();

                        GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/tags/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOllamaTagsOllamaApiTagsUrlIdxGetDefaultImplementation(apiResponseLocalVar, urlIdx);

                        Events.ExecuteOnGetOllamaTagsOllamaApiTagsUrlIdxGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOllamaTagsOllamaApiTagsUrlIdxGetDefaultImplementation(e, "/ollama/api/tags/{url_idx}", uriBuilderLocalVar.Path, urlIdx);
                Events.ExecuteOnErrorGetOllamaTagsOllamaApiTagsUrlIdxGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse"/>
        /// </summary>
        public partial class GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse(ILogger<GetOllamaTagsOllamaApiTagsUrlIdxGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOllamaVersionsOllamaApiVersionGet(ref Option<int?> urlIdx);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetOllamaVersionsOllamaApiVersionGetDefaultImplementation(IGetOllamaVersionsOllamaApiVersionGetApiResponse apiResponseLocalVar, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetOllamaVersionsOllamaApiVersionGet(ref suppressDefaultLog, apiResponseLocalVar, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetOllamaVersionsOllamaApiVersionGet(ref bool suppressDefaultLog, IGetOllamaVersionsOllamaApiVersionGetApiResponse apiResponseLocalVar, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetOllamaVersionsOllamaApiVersionGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOllamaVersionsOllamaApiVersionGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetOllamaVersionsOllamaApiVersionGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> urlIdx);

        /// <summary>
        /// Get Ollama Versions 
        /// </summary>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaVersionsOllamaApiVersionGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaVersionsOllamaApiVersionGetApiResponse?> GetOllamaVersionsOllamaApiVersionGetOrDefaultAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOllamaVersionsOllamaApiVersionGetAsync(urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Ollama Versions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaVersionsOllamaApiVersionGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaVersionsOllamaApiVersionGetApiResponse> GetOllamaVersionsOllamaApiVersionGetAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOllamaVersionsOllamaApiVersionGet(ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/version"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/version");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOllamaVersionsOllamaApiVersionGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOllamaVersionsOllamaApiVersionGetApiResponse>();

                        GetOllamaVersionsOllamaApiVersionGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/version", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOllamaVersionsOllamaApiVersionGetDefaultImplementation(apiResponseLocalVar, urlIdx);

                        Events.ExecuteOnGetOllamaVersionsOllamaApiVersionGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOllamaVersionsOllamaApiVersionGetDefaultImplementation(e, "/ollama/api/version", uriBuilderLocalVar.Path, urlIdx);
                Events.ExecuteOnErrorGetOllamaVersionsOllamaApiVersionGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOllamaVersionsOllamaApiVersionGetApiResponse"/>
        /// </summary>
        public partial class GetOllamaVersionsOllamaApiVersionGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOllamaVersionsOllamaApiVersionGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOllamaVersionsOllamaApiVersionGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOllamaVersionsOllamaApiVersionGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOllamaVersionsOllamaApiVersionGetApiResponse(ILogger<GetOllamaVersionsOllamaApiVersionGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOllamaVersionsOllamaApiVersionUrlIdxGet(ref int? urlIdx);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetOllamaVersionsOllamaApiVersionUrlIdxGetDefaultImplementation(IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse apiResponseLocalVar, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetOllamaVersionsOllamaApiVersionUrlIdxGet(ref suppressDefaultLog, apiResponseLocalVar, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetOllamaVersionsOllamaApiVersionUrlIdxGet(ref bool suppressDefaultLog, IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse apiResponseLocalVar, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetOllamaVersionsOllamaApiVersionUrlIdxGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOllamaVersionsOllamaApiVersionUrlIdxGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetOllamaVersionsOllamaApiVersionUrlIdxGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int? urlIdx);

        /// <summary>
        /// Get Ollama Versions 
        /// </summary>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse?> GetOllamaVersionsOllamaApiVersionUrlIdxGetOrDefaultAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOllamaVersionsOllamaApiVersionUrlIdxGetAsync(urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Ollama Versions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse"/>&gt;</returns>
        public async Task<IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse> GetOllamaVersionsOllamaApiVersionUrlIdxGetAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOllamaVersionsOllamaApiVersionUrlIdxGet(ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/version/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/version/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse>();

                        GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/version/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOllamaVersionsOllamaApiVersionUrlIdxGetDefaultImplementation(apiResponseLocalVar, urlIdx);

                        Events.ExecuteOnGetOllamaVersionsOllamaApiVersionUrlIdxGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOllamaVersionsOllamaApiVersionUrlIdxGetDefaultImplementation(e, "/ollama/api/version/{url_idx}", uriBuilderLocalVar.Path, urlIdx);
                Events.ExecuteOnErrorGetOllamaVersionsOllamaApiVersionUrlIdxGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse"/>
        /// </summary>
        public partial class GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse(ILogger<GetOllamaVersionsOllamaApiVersionUrlIdxGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOpenaiModelsOllamaV1ModelsGet(ref Option<int?> urlIdx);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetOpenaiModelsOllamaV1ModelsGetDefaultImplementation(IGetOpenaiModelsOllamaV1ModelsGetApiResponse apiResponseLocalVar, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetOpenaiModelsOllamaV1ModelsGet(ref suppressDefaultLog, apiResponseLocalVar, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetOpenaiModelsOllamaV1ModelsGet(ref bool suppressDefaultLog, IGetOpenaiModelsOllamaV1ModelsGetApiResponse apiResponseLocalVar, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetOpenaiModelsOllamaV1ModelsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOpenaiModelsOllamaV1ModelsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetOpenaiModelsOllamaV1ModelsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> urlIdx);

        /// <summary>
        /// Get Openai Models 
        /// </summary>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOpenaiModelsOllamaV1ModelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetOpenaiModelsOllamaV1ModelsGetApiResponse?> GetOpenaiModelsOllamaV1ModelsGetOrDefaultAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOpenaiModelsOllamaV1ModelsGetAsync(urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Openai Models 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOpenaiModelsOllamaV1ModelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetOpenaiModelsOllamaV1ModelsGetApiResponse> GetOpenaiModelsOllamaV1ModelsGetAsync(Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOpenaiModelsOllamaV1ModelsGet(ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/v1/models"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/v1/models");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOpenaiModelsOllamaV1ModelsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOpenaiModelsOllamaV1ModelsGetApiResponse>();

                        GetOpenaiModelsOllamaV1ModelsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/v1/models", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOpenaiModelsOllamaV1ModelsGetDefaultImplementation(apiResponseLocalVar, urlIdx);

                        Events.ExecuteOnGetOpenaiModelsOllamaV1ModelsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOpenaiModelsOllamaV1ModelsGetDefaultImplementation(e, "/ollama/v1/models", uriBuilderLocalVar.Path, urlIdx);
                Events.ExecuteOnErrorGetOpenaiModelsOllamaV1ModelsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOpenaiModelsOllamaV1ModelsGetApiResponse"/>
        /// </summary>
        public partial class GetOpenaiModelsOllamaV1ModelsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOpenaiModelsOllamaV1ModelsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOpenaiModelsOllamaV1ModelsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOpenaiModelsOllamaV1ModelsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOpenaiModelsOllamaV1ModelsGetApiResponse(ILogger<GetOpenaiModelsOllamaV1ModelsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOpenaiModelsOllamaV1ModelsUrlIdxGet(ref int? urlIdx);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void AfterGetOpenaiModelsOllamaV1ModelsUrlIdxGetDefaultImplementation(IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse apiResponseLocalVar, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterGetOpenaiModelsOllamaV1ModelsUrlIdxGet(ref suppressDefaultLog, apiResponseLocalVar, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void AfterGetOpenaiModelsOllamaV1ModelsUrlIdxGet(ref bool suppressDefaultLog, IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse apiResponseLocalVar, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorGetOpenaiModelsOllamaV1ModelsUrlIdxGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOpenaiModelsOllamaV1ModelsUrlIdxGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorGetOpenaiModelsOllamaV1ModelsUrlIdxGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int? urlIdx);

        /// <summary>
        /// Get Openai Models 
        /// </summary>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse"/>&gt;</returns>
        public async Task<IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse?> GetOpenaiModelsOllamaV1ModelsUrlIdxGetOrDefaultAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOpenaiModelsOllamaV1ModelsUrlIdxGetAsync(urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Openai Models 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse"/>&gt;</returns>
        public async Task<IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse> GetOpenaiModelsOllamaV1ModelsUrlIdxGetAsync(int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetOpenaiModelsOllamaV1ModelsUrlIdxGet(ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/v1/models/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/v1/models/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse>();

                        GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/v1/models/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOpenaiModelsOllamaV1ModelsUrlIdxGetDefaultImplementation(apiResponseLocalVar, urlIdx);

                        Events.ExecuteOnGetOpenaiModelsOllamaV1ModelsUrlIdxGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOpenaiModelsOllamaV1ModelsUrlIdxGetDefaultImplementation(e, "/ollama/v1/models/{url_idx}", uriBuilderLocalVar.Path, urlIdx);
                Events.ExecuteOnErrorGetOpenaiModelsOllamaV1ModelsUrlIdxGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse"/>
        /// </summary>
        public partial class GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse(ILogger<GetOpenaiModelsOllamaV1ModelsUrlIdxGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetStatusOllamaGetDefaultImplementation(IGetStatusOllamaGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetStatusOllamaGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetStatusOllamaGet(ref bool suppressDefaultLog, IGetStatusOllamaGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetStatusOllamaGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStatusOllamaGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetStatusOllamaGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Status 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusOllamaGetApiResponse"/>&gt;</returns>
        public async Task<IGetStatusOllamaGetApiResponse?> GetStatusOllamaGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStatusOllamaGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusOllamaGetApiResponse"/>&gt;</returns>
        public async Task<IGetStatusOllamaGetApiResponse> GetStatusOllamaGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStatusOllamaGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStatusOllamaGetApiResponse>();

                        GetStatusOllamaGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStatusOllamaGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetStatusOllamaGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStatusOllamaGetDefaultImplementation(e, "/ollama/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetStatusOllamaGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStatusOllamaGetApiResponse"/>
        /// </summary>
        public partial class GetStatusOllamaGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetStatusOllamaGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStatusOllamaGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStatusOllamaGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStatusOllamaGetApiResponse(ILogger<GetStatusOllamaGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetStatusOllamaHeadDefaultImplementation(IGetStatusOllamaHeadApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetStatusOllamaHead(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetStatusOllamaHead(ref bool suppressDefaultLog, IGetStatusOllamaHeadApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetStatusOllamaHeadDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetStatusOllamaHead(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetStatusOllamaHead(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Status 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusOllamaHeadApiResponse"/>&gt;</returns>
        public async Task<IGetStatusOllamaHeadApiResponse?> GetStatusOllamaHeadOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetStatusOllamaHeadAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Status 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetStatusOllamaHeadApiResponse"/>&gt;</returns>
        public async Task<IGetStatusOllamaHeadApiResponse> GetStatusOllamaHeadAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Head;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetStatusOllamaHeadApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetStatusOllamaHeadApiResponse>();

                        GetStatusOllamaHeadApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetStatusOllamaHeadDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetStatusOllamaHead(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetStatusOllamaHeadDefaultImplementation(e, "/ollama/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetStatusOllamaHead(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetStatusOllamaHeadApiResponse"/>
        /// </summary>
        public partial class GetStatusOllamaHeadApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetStatusOllamaHeadApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetStatusOllamaHeadApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetStatusOllamaHeadApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetStatusOllamaHeadApiResponse(ILogger<GetStatusOllamaHeadApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPullModelOllamaApiPullPost(ModelNameForm modelNameForm, ref Option<int> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <returns></returns>
        private void ValidatePullModelOllamaApiPullPost(ModelNameForm modelNameForm)
        {
            if (modelNameForm == null)
                throw new ArgumentNullException(nameof(modelNameForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterPullModelOllamaApiPullPostDefaultImplementation(IPullModelOllamaApiPullPostApiResponse apiResponseLocalVar, ModelNameForm modelNameForm, Option<int> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterPullModelOllamaApiPullPost(ref suppressDefaultLog, apiResponseLocalVar, modelNameForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterPullModelOllamaApiPullPost(ref bool suppressDefaultLog, IPullModelOllamaApiPullPostApiResponse apiResponseLocalVar, ModelNameForm modelNameForm, Option<int> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorPullModelOllamaApiPullPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm, Option<int> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPullModelOllamaApiPullPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, modelNameForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorPullModelOllamaApiPullPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm, Option<int> urlIdx);

        /// <summary>
        /// Pull Model 
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPullModelOllamaApiPullPostApiResponse"/>&gt;</returns>
        public async Task<IPullModelOllamaApiPullPostApiResponse?> PullModelOllamaApiPullPostOrDefaultAsync(ModelNameForm modelNameForm, Option<int> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PullModelOllamaApiPullPostAsync(modelNameForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Pull Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="urlIdx"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPullModelOllamaApiPullPostApiResponse"/>&gt;</returns>
        public async Task<IPullModelOllamaApiPullPostApiResponse> PullModelOllamaApiPullPostAsync(ModelNameForm modelNameForm, Option<int> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePullModelOllamaApiPullPost(modelNameForm);

                FormatPullModelOllamaApiPullPost(modelNameForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/pull"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/pull");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (modelNameForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelNameForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PullModelOllamaApiPullPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PullModelOllamaApiPullPostApiResponse>();

                        PullModelOllamaApiPullPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/pull", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPullModelOllamaApiPullPostDefaultImplementation(apiResponseLocalVar, modelNameForm, urlIdx);

                        Events.ExecuteOnPullModelOllamaApiPullPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPullModelOllamaApiPullPostDefaultImplementation(e, "/ollama/api/pull", uriBuilderLocalVar.Path, modelNameForm, urlIdx);
                Events.ExecuteOnErrorPullModelOllamaApiPullPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PullModelOllamaApiPullPostApiResponse"/>
        /// </summary>
        public partial class PullModelOllamaApiPullPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IPullModelOllamaApiPullPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PullModelOllamaApiPullPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PullModelOllamaApiPullPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PullModelOllamaApiPullPostApiResponse(ILogger<PullModelOllamaApiPullPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPullModelOllamaApiPullUrlIdxPost(ref int urlIdx, ModelNameForm modelNameForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <returns></returns>
        private void ValidatePullModelOllamaApiPullUrlIdxPost(ModelNameForm modelNameForm)
        {
            if (modelNameForm == null)
                throw new ArgumentNullException(nameof(modelNameForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="modelNameForm"></param>
        private void AfterPullModelOllamaApiPullUrlIdxPostDefaultImplementation(IPullModelOllamaApiPullUrlIdxPostApiResponse apiResponseLocalVar, int urlIdx, ModelNameForm modelNameForm)
        {
            bool suppressDefaultLog = false;
            AfterPullModelOllamaApiPullUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, urlIdx, modelNameForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="modelNameForm"></param>
        partial void AfterPullModelOllamaApiPullUrlIdxPost(ref bool suppressDefaultLog, IPullModelOllamaApiPullUrlIdxPostApiResponse apiResponseLocalVar, int urlIdx, ModelNameForm modelNameForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="modelNameForm"></param>
        private void OnErrorPullModelOllamaApiPullUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int urlIdx, ModelNameForm modelNameForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPullModelOllamaApiPullUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, urlIdx, modelNameForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="urlIdx"></param>
        /// <param name="modelNameForm"></param>
        partial void OnErrorPullModelOllamaApiPullUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int urlIdx, ModelNameForm modelNameForm);

        /// <summary>
        /// Pull Model 
        /// </summary>
        /// <param name="urlIdx"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPullModelOllamaApiPullUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IPullModelOllamaApiPullUrlIdxPostApiResponse?> PullModelOllamaApiPullUrlIdxPostOrDefaultAsync(int urlIdx, ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PullModelOllamaApiPullUrlIdxPostAsync(urlIdx, modelNameForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Pull Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="urlIdx"></param>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPullModelOllamaApiPullUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IPullModelOllamaApiPullUrlIdxPostApiResponse> PullModelOllamaApiPullUrlIdxPostAsync(int urlIdx, ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePullModelOllamaApiPullUrlIdxPost(modelNameForm);

                FormatPullModelOllamaApiPullUrlIdxPost(ref urlIdx, modelNameForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/pull/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/pull/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (modelNameForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelNameForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PullModelOllamaApiPullUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PullModelOllamaApiPullUrlIdxPostApiResponse>();

                        PullModelOllamaApiPullUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/pull/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPullModelOllamaApiPullUrlIdxPostDefaultImplementation(apiResponseLocalVar, urlIdx, modelNameForm);

                        Events.ExecuteOnPullModelOllamaApiPullUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPullModelOllamaApiPullUrlIdxPostDefaultImplementation(e, "/ollama/api/pull/{url_idx}", uriBuilderLocalVar.Path, urlIdx, modelNameForm);
                Events.ExecuteOnErrorPullModelOllamaApiPullUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PullModelOllamaApiPullUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class PullModelOllamaApiPullUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IPullModelOllamaApiPullUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PullModelOllamaApiPullUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PullModelOllamaApiPullUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PullModelOllamaApiPullUrlIdxPostApiResponse(ILogger<PullModelOllamaApiPullUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPushModelOllamaApiPushDelete(PushModelForm pushModelForm, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pushModelForm"></param>
        /// <returns></returns>
        private void ValidatePushModelOllamaApiPushDelete(PushModelForm pushModelForm)
        {
            if (pushModelForm == null)
                throw new ArgumentNullException(nameof(pushModelForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterPushModelOllamaApiPushDeleteDefaultImplementation(IPushModelOllamaApiPushDeleteApiResponse apiResponseLocalVar, PushModelForm pushModelForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterPushModelOllamaApiPushDelete(ref suppressDefaultLog, apiResponseLocalVar, pushModelForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterPushModelOllamaApiPushDelete(ref bool suppressDefaultLog, IPushModelOllamaApiPushDeleteApiResponse apiResponseLocalVar, PushModelForm pushModelForm, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorPushModelOllamaApiPushDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PushModelForm pushModelForm, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPushModelOllamaApiPushDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pushModelForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorPushModelOllamaApiPushDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PushModelForm pushModelForm, Option<int?> urlIdx);

        /// <summary>
        /// Push Model 
        /// </summary>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPushModelOllamaApiPushDeleteApiResponse"/>&gt;</returns>
        public async Task<IPushModelOllamaApiPushDeleteApiResponse?> PushModelOllamaApiPushDeleteOrDefaultAsync(PushModelForm pushModelForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PushModelOllamaApiPushDeleteAsync(pushModelForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Push Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPushModelOllamaApiPushDeleteApiResponse"/>&gt;</returns>
        public async Task<IPushModelOllamaApiPushDeleteApiResponse> PushModelOllamaApiPushDeleteAsync(PushModelForm pushModelForm, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePushModelOllamaApiPushDelete(pushModelForm);

                FormatPushModelOllamaApiPushDelete(pushModelForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/push"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/push");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (pushModelForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(pushModelForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PushModelOllamaApiPushDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PushModelOllamaApiPushDeleteApiResponse>();

                        PushModelOllamaApiPushDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/push", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPushModelOllamaApiPushDeleteDefaultImplementation(apiResponseLocalVar, pushModelForm, urlIdx);

                        Events.ExecuteOnPushModelOllamaApiPushDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPushModelOllamaApiPushDeleteDefaultImplementation(e, "/ollama/api/push", uriBuilderLocalVar.Path, pushModelForm, urlIdx);
                Events.ExecuteOnErrorPushModelOllamaApiPushDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PushModelOllamaApiPushDeleteApiResponse"/>
        /// </summary>
        public partial class PushModelOllamaApiPushDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IPushModelOllamaApiPushDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PushModelOllamaApiPushDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PushModelOllamaApiPushDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PushModelOllamaApiPushDeleteApiResponse(ILogger<PushModelOllamaApiPushDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPushModelOllamaApiPushUrlIdxDelete(PushModelForm pushModelForm, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pushModelForm"></param>
        /// <returns></returns>
        private void ValidatePushModelOllamaApiPushUrlIdxDelete(PushModelForm pushModelForm)
        {
            if (pushModelForm == null)
                throw new ArgumentNullException(nameof(pushModelForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        private void AfterPushModelOllamaApiPushUrlIdxDeleteDefaultImplementation(IPushModelOllamaApiPushUrlIdxDeleteApiResponse apiResponseLocalVar, PushModelForm pushModelForm, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterPushModelOllamaApiPushUrlIdxDelete(ref suppressDefaultLog, apiResponseLocalVar, pushModelForm, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void AfterPushModelOllamaApiPushUrlIdxDelete(ref bool suppressDefaultLog, IPushModelOllamaApiPushUrlIdxDeleteApiResponse apiResponseLocalVar, PushModelForm pushModelForm, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorPushModelOllamaApiPushUrlIdxDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PushModelForm pushModelForm, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPushModelOllamaApiPushUrlIdxDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pushModelForm, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorPushModelOllamaApiPushUrlIdxDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PushModelForm pushModelForm, int? urlIdx);

        /// <summary>
        /// Push Model 
        /// </summary>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPushModelOllamaApiPushUrlIdxDeleteApiResponse"/>&gt;</returns>
        public async Task<IPushModelOllamaApiPushUrlIdxDeleteApiResponse?> PushModelOllamaApiPushUrlIdxDeleteOrDefaultAsync(PushModelForm pushModelForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PushModelOllamaApiPushUrlIdxDeleteAsync(pushModelForm, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Push Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushModelForm"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPushModelOllamaApiPushUrlIdxDeleteApiResponse"/>&gt;</returns>
        public async Task<IPushModelOllamaApiPushUrlIdxDeleteApiResponse> PushModelOllamaApiPushUrlIdxDeleteAsync(PushModelForm pushModelForm, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePushModelOllamaApiPushUrlIdxDelete(pushModelForm);

                FormatPushModelOllamaApiPushUrlIdxDelete(pushModelForm, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/push/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/push/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    httpRequestMessageLocalVar.Content = (pushModelForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(pushModelForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PushModelOllamaApiPushUrlIdxDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PushModelOllamaApiPushUrlIdxDeleteApiResponse>();

                        PushModelOllamaApiPushUrlIdxDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/push/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPushModelOllamaApiPushUrlIdxDeleteDefaultImplementation(apiResponseLocalVar, pushModelForm, urlIdx);

                        Events.ExecuteOnPushModelOllamaApiPushUrlIdxDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPushModelOllamaApiPushUrlIdxDeleteDefaultImplementation(e, "/ollama/api/push/{url_idx}", uriBuilderLocalVar.Path, pushModelForm, urlIdx);
                Events.ExecuteOnErrorPushModelOllamaApiPushUrlIdxDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PushModelOllamaApiPushUrlIdxDeleteApiResponse"/>
        /// </summary>
        public partial class PushModelOllamaApiPushUrlIdxDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IPushModelOllamaApiPushUrlIdxDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PushModelOllamaApiPushUrlIdxDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PushModelOllamaApiPushUrlIdxDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PushModelOllamaApiPushUrlIdxDeleteApiResponse(ILogger<PushModelOllamaApiPushUrlIdxDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatShowModelInfoOllamaApiShowPost(ModelNameForm modelNameForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <returns></returns>
        private void ValidateShowModelInfoOllamaApiShowPost(ModelNameForm modelNameForm)
        {
            if (modelNameForm == null)
                throw new ArgumentNullException(nameof(modelNameForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        private void AfterShowModelInfoOllamaApiShowPostDefaultImplementation(IShowModelInfoOllamaApiShowPostApiResponse apiResponseLocalVar, ModelNameForm modelNameForm)
        {
            bool suppressDefaultLog = false;
            AfterShowModelInfoOllamaApiShowPost(ref suppressDefaultLog, apiResponseLocalVar, modelNameForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        partial void AfterShowModelInfoOllamaApiShowPost(ref bool suppressDefaultLog, IShowModelInfoOllamaApiShowPostApiResponse apiResponseLocalVar, ModelNameForm modelNameForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        private void OnErrorShowModelInfoOllamaApiShowPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorShowModelInfoOllamaApiShowPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, modelNameForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        partial void OnErrorShowModelInfoOllamaApiShowPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm);

        /// <summary>
        /// Show Model Info 
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShowModelInfoOllamaApiShowPostApiResponse"/>&gt;</returns>
        public async Task<IShowModelInfoOllamaApiShowPostApiResponse?> ShowModelInfoOllamaApiShowPostOrDefaultAsync(ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ShowModelInfoOllamaApiShowPostAsync(modelNameForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Show Model Info 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShowModelInfoOllamaApiShowPostApiResponse"/>&gt;</returns>
        public async Task<IShowModelInfoOllamaApiShowPostApiResponse> ShowModelInfoOllamaApiShowPostAsync(ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateShowModelInfoOllamaApiShowPost(modelNameForm);

                FormatShowModelInfoOllamaApiShowPost(modelNameForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/show"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/show");

                    httpRequestMessageLocalVar.Content = (modelNameForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelNameForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ShowModelInfoOllamaApiShowPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ShowModelInfoOllamaApiShowPostApiResponse>();

                        ShowModelInfoOllamaApiShowPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/show", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterShowModelInfoOllamaApiShowPostDefaultImplementation(apiResponseLocalVar, modelNameForm);

                        Events.ExecuteOnShowModelInfoOllamaApiShowPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorShowModelInfoOllamaApiShowPostDefaultImplementation(e, "/ollama/api/show", uriBuilderLocalVar.Path, modelNameForm);
                Events.ExecuteOnErrorShowModelInfoOllamaApiShowPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ShowModelInfoOllamaApiShowPostApiResponse"/>
        /// </summary>
        public partial class ShowModelInfoOllamaApiShowPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IShowModelInfoOllamaApiShowPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ShowModelInfoOllamaApiShowPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ShowModelInfoOllamaApiShowPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ShowModelInfoOllamaApiShowPostApiResponse(ILogger<ShowModelInfoOllamaApiShowPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUnloadModelOllamaApiUnloadPost(ModelNameForm modelNameForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <returns></returns>
        private void ValidateUnloadModelOllamaApiUnloadPost(ModelNameForm modelNameForm)
        {
            if (modelNameForm == null)
                throw new ArgumentNullException(nameof(modelNameForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        private void AfterUnloadModelOllamaApiUnloadPostDefaultImplementation(IUnloadModelOllamaApiUnloadPostApiResponse apiResponseLocalVar, ModelNameForm modelNameForm)
        {
            bool suppressDefaultLog = false;
            AfterUnloadModelOllamaApiUnloadPost(ref suppressDefaultLog, apiResponseLocalVar, modelNameForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="modelNameForm"></param>
        partial void AfterUnloadModelOllamaApiUnloadPost(ref bool suppressDefaultLog, IUnloadModelOllamaApiUnloadPostApiResponse apiResponseLocalVar, ModelNameForm modelNameForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        private void OnErrorUnloadModelOllamaApiUnloadPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUnloadModelOllamaApiUnloadPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, modelNameForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="modelNameForm"></param>
        partial void OnErrorUnloadModelOllamaApiUnloadPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModelNameForm modelNameForm);

        /// <summary>
        /// Unload Model 
        /// </summary>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnloadModelOllamaApiUnloadPostApiResponse"/>&gt;</returns>
        public async Task<IUnloadModelOllamaApiUnloadPostApiResponse?> UnloadModelOllamaApiUnloadPostOrDefaultAsync(ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UnloadModelOllamaApiUnloadPostAsync(modelNameForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unload Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelNameForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnloadModelOllamaApiUnloadPostApiResponse"/>&gt;</returns>
        public async Task<IUnloadModelOllamaApiUnloadPostApiResponse> UnloadModelOllamaApiUnloadPostAsync(ModelNameForm modelNameForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUnloadModelOllamaApiUnloadPost(modelNameForm);

                FormatUnloadModelOllamaApiUnloadPost(modelNameForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/api/unload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/api/unload");

                    httpRequestMessageLocalVar.Content = (modelNameForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(modelNameForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UnloadModelOllamaApiUnloadPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UnloadModelOllamaApiUnloadPostApiResponse>();

                        UnloadModelOllamaApiUnloadPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/api/unload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUnloadModelOllamaApiUnloadPostDefaultImplementation(apiResponseLocalVar, modelNameForm);

                        Events.ExecuteOnUnloadModelOllamaApiUnloadPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUnloadModelOllamaApiUnloadPostDefaultImplementation(e, "/ollama/api/unload", uriBuilderLocalVar.Path, modelNameForm);
                Events.ExecuteOnErrorUnloadModelOllamaApiUnloadPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UnloadModelOllamaApiUnloadPostApiResponse"/>
        /// </summary>
        public partial class UnloadModelOllamaApiUnloadPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUnloadModelOllamaApiUnloadPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UnloadModelOllamaApiUnloadPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UnloadModelOllamaApiUnloadPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UnloadModelOllamaApiUnloadPostApiResponse(ILogger<UnloadModelOllamaApiUnloadPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateConfigOllamaConfigUpdatePost(OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        /// <returns></returns>
        private void ValidateUpdateConfigOllamaConfigUpdatePost(OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm)
        {
            if (openWebuiRoutersOllamaOllamaConfigForm == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersOllamaOllamaConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        private void AfterUpdateConfigOllamaConfigUpdatePostDefaultImplementation(IUpdateConfigOllamaConfigUpdatePostApiResponse apiResponseLocalVar, OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateConfigOllamaConfigUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, openWebuiRoutersOllamaOllamaConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        partial void AfterUpdateConfigOllamaConfigUpdatePost(ref bool suppressDefaultLog, IUpdateConfigOllamaConfigUpdatePostApiResponse apiResponseLocalVar, OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        private void OnErrorUpdateConfigOllamaConfigUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateConfigOllamaConfigUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, openWebuiRoutersOllamaOllamaConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        partial void OnErrorUpdateConfigOllamaConfigUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm);

        /// <summary>
        /// Update Config 
        /// </summary>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigOllamaConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateConfigOllamaConfigUpdatePostApiResponse?> UpdateConfigOllamaConfigUpdatePostOrDefaultAsync(OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateConfigOllamaConfigUpdatePostAsync(openWebuiRoutersOllamaOllamaConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="openWebuiRoutersOllamaOllamaConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigOllamaConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateConfigOllamaConfigUpdatePostApiResponse> UpdateConfigOllamaConfigUpdatePostAsync(OpenWebuiRoutersOllamaOllamaConfigForm openWebuiRoutersOllamaOllamaConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateConfigOllamaConfigUpdatePost(openWebuiRoutersOllamaOllamaConfigForm);

                FormatUpdateConfigOllamaConfigUpdatePost(openWebuiRoutersOllamaOllamaConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/config/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/config/update");

                    httpRequestMessageLocalVar.Content = (openWebuiRoutersOllamaOllamaConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(openWebuiRoutersOllamaOllamaConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateConfigOllamaConfigUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateConfigOllamaConfigUpdatePostApiResponse>();

                        UpdateConfigOllamaConfigUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/config/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateConfigOllamaConfigUpdatePostDefaultImplementation(apiResponseLocalVar, openWebuiRoutersOllamaOllamaConfigForm);

                        Events.ExecuteOnUpdateConfigOllamaConfigUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateConfigOllamaConfigUpdatePostDefaultImplementation(e, "/ollama/config/update", uriBuilderLocalVar.Path, openWebuiRoutersOllamaOllamaConfigForm);
                Events.ExecuteOnErrorUpdateConfigOllamaConfigUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateConfigOllamaConfigUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateConfigOllamaConfigUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateConfigOllamaConfigUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateConfigOllamaConfigUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateConfigOllamaConfigUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateConfigOllamaConfigUpdatePostApiResponse(ILogger<UpdateConfigOllamaConfigUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadModelOllamaModelsUploadPost(ref System.IO.Stream file, ref Option<int?> urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateUploadModelOllamaModelsUploadPost(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        private void AfterUploadModelOllamaModelsUploadPostDefaultImplementation(IUploadModelOllamaModelsUploadPostApiResponse apiResponseLocalVar, System.IO.Stream file, Option<int?> urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterUploadModelOllamaModelsUploadPost(ref suppressDefaultLog, apiResponseLocalVar, file, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        partial void AfterUploadModelOllamaModelsUploadPost(ref bool suppressDefaultLog, IUploadModelOllamaModelsUploadPostApiResponse apiResponseLocalVar, System.IO.Stream file, Option<int?> urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorUploadModelOllamaModelsUploadPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file, Option<int?> urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadModelOllamaModelsUploadPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, file, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorUploadModelOllamaModelsUploadPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file, Option<int?> urlIdx);

        /// <summary>
        /// Upload Model 
        /// </summary>
        /// <param name="file"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadModelOllamaModelsUploadPostApiResponse"/>&gt;</returns>
        public async Task<IUploadModelOllamaModelsUploadPostApiResponse?> UploadModelOllamaModelsUploadPostOrDefaultAsync(System.IO.Stream file, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadModelOllamaModelsUploadPostAsync(file, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="urlIdx"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadModelOllamaModelsUploadPostApiResponse"/>&gt;</returns>
        public async Task<IUploadModelOllamaModelsUploadPostApiResponse> UploadModelOllamaModelsUploadPostAsync(System.IO.Stream file, Option<int?> urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadModelOllamaModelsUploadPost(file);

                FormatUploadModelOllamaModelsUploadPost(ref file, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/models/upload"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/models/upload");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (urlIdx.IsSet)
                        parseQueryStringLocalVar["url_idx"] = ClientUtils.ParameterToString(urlIdx.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UploadModelOllamaModelsUploadPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadModelOllamaModelsUploadPostApiResponse>();

                        UploadModelOllamaModelsUploadPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/models/upload", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUploadModelOllamaModelsUploadPostDefaultImplementation(apiResponseLocalVar, file, urlIdx);

                        Events.ExecuteOnUploadModelOllamaModelsUploadPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadModelOllamaModelsUploadPostDefaultImplementation(e, "/ollama/models/upload", uriBuilderLocalVar.Path, file, urlIdx);
                Events.ExecuteOnErrorUploadModelOllamaModelsUploadPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadModelOllamaModelsUploadPostApiResponse"/>
        /// </summary>
        public partial class UploadModelOllamaModelsUploadPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUploadModelOllamaModelsUploadPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadModelOllamaModelsUploadPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadModelOllamaModelsUploadPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadModelOllamaModelsUploadPostApiResponse(ILogger<UploadModelOllamaModelsUploadPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUploadModelOllamaModelsUploadUrlIdxPost(ref System.IO.Stream file, ref int? urlIdx);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateUploadModelOllamaModelsUploadUrlIdxPost(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        private void AfterUploadModelOllamaModelsUploadUrlIdxPostDefaultImplementation(IUploadModelOllamaModelsUploadUrlIdxPostApiResponse apiResponseLocalVar, System.IO.Stream file, int? urlIdx)
        {
            bool suppressDefaultLog = false;
            AfterUploadModelOllamaModelsUploadUrlIdxPost(ref suppressDefaultLog, apiResponseLocalVar, file, urlIdx);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        partial void AfterUploadModelOllamaModelsUploadUrlIdxPost(ref bool suppressDefaultLog, IUploadModelOllamaModelsUploadUrlIdxPostApiResponse apiResponseLocalVar, System.IO.Stream file, int? urlIdx);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        private void OnErrorUploadModelOllamaModelsUploadUrlIdxPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file, int? urlIdx)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUploadModelOllamaModelsUploadUrlIdxPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, file, urlIdx);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        partial void OnErrorUploadModelOllamaModelsUploadUrlIdxPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, System.IO.Stream file, int? urlIdx);

        /// <summary>
        /// Upload Model 
        /// </summary>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadModelOllamaModelsUploadUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IUploadModelOllamaModelsUploadUrlIdxPostApiResponse?> UploadModelOllamaModelsUploadUrlIdxPostOrDefaultAsync(System.IO.Stream file, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UploadModelOllamaModelsUploadUrlIdxPostAsync(file, urlIdx, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Upload Model 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="urlIdx"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUploadModelOllamaModelsUploadUrlIdxPostApiResponse"/>&gt;</returns>
        public async Task<IUploadModelOllamaModelsUploadUrlIdxPostApiResponse> UploadModelOllamaModelsUploadUrlIdxPostAsync(System.IO.Stream file, int? urlIdx = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUploadModelOllamaModelsUploadUrlIdxPost(file);

                FormatUploadModelOllamaModelsUploadUrlIdxPost(ref file, ref urlIdx);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/models/upload/{url_idx}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/models/upload/{url_idx}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Burl_idx%7D", Uri.EscapeDataString(urlIdx.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UploadModelOllamaModelsUploadUrlIdxPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UploadModelOllamaModelsUploadUrlIdxPostApiResponse>();

                        UploadModelOllamaModelsUploadUrlIdxPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/models/upload/{url_idx}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUploadModelOllamaModelsUploadUrlIdxPostDefaultImplementation(apiResponseLocalVar, file, urlIdx);

                        Events.ExecuteOnUploadModelOllamaModelsUploadUrlIdxPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUploadModelOllamaModelsUploadUrlIdxPostDefaultImplementation(e, "/ollama/models/upload/{url_idx}", uriBuilderLocalVar.Path, file, urlIdx);
                Events.ExecuteOnErrorUploadModelOllamaModelsUploadUrlIdxPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UploadModelOllamaModelsUploadUrlIdxPostApiResponse"/>
        /// </summary>
        public partial class UploadModelOllamaModelsUploadUrlIdxPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUploadModelOllamaModelsUploadUrlIdxPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UploadModelOllamaModelsUploadUrlIdxPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UploadModelOllamaModelsUploadUrlIdxPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UploadModelOllamaModelsUploadUrlIdxPostApiResponse(ILogger<UploadModelOllamaModelsUploadUrlIdxPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyConnectionOllamaVerifyPost(OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        /// <returns></returns>
        private void ValidateVerifyConnectionOllamaVerifyPost(OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm)
        {
            if (openWebuiRoutersOllamaConnectionVerificationForm == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersOllamaConnectionVerificationForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        private void AfterVerifyConnectionOllamaVerifyPostDefaultImplementation(IVerifyConnectionOllamaVerifyPostApiResponse apiResponseLocalVar, OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm)
        {
            bool suppressDefaultLog = false;
            AfterVerifyConnectionOllamaVerifyPost(ref suppressDefaultLog, apiResponseLocalVar, openWebuiRoutersOllamaConnectionVerificationForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        partial void AfterVerifyConnectionOllamaVerifyPost(ref bool suppressDefaultLog, IVerifyConnectionOllamaVerifyPostApiResponse apiResponseLocalVar, OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        private void OnErrorVerifyConnectionOllamaVerifyPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyConnectionOllamaVerifyPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, openWebuiRoutersOllamaConnectionVerificationForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        partial void OnErrorVerifyConnectionOllamaVerifyPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm);

        /// <summary>
        /// Verify Connection 
        /// </summary>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyConnectionOllamaVerifyPostApiResponse"/>&gt;</returns>
        public async Task<IVerifyConnectionOllamaVerifyPostApiResponse?> VerifyConnectionOllamaVerifyPostOrDefaultAsync(OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyConnectionOllamaVerifyPostAsync(openWebuiRoutersOllamaConnectionVerificationForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Verify Connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="openWebuiRoutersOllamaConnectionVerificationForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyConnectionOllamaVerifyPostApiResponse"/>&gt;</returns>
        public async Task<IVerifyConnectionOllamaVerifyPostApiResponse> VerifyConnectionOllamaVerifyPostAsync(OpenWebuiRoutersOllamaConnectionVerificationForm openWebuiRoutersOllamaConnectionVerificationForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifyConnectionOllamaVerifyPost(openWebuiRoutersOllamaConnectionVerificationForm);

                FormatVerifyConnectionOllamaVerifyPost(openWebuiRoutersOllamaConnectionVerificationForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/ollama/verify"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/ollama/verify");

                    httpRequestMessageLocalVar.Content = (openWebuiRoutersOllamaConnectionVerificationForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(openWebuiRoutersOllamaConnectionVerificationForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<VerifyConnectionOllamaVerifyPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyConnectionOllamaVerifyPostApiResponse>();

                        VerifyConnectionOllamaVerifyPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/ollama/verify", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifyConnectionOllamaVerifyPostDefaultImplementation(apiResponseLocalVar, openWebuiRoutersOllamaConnectionVerificationForm);

                        Events.ExecuteOnVerifyConnectionOllamaVerifyPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyConnectionOllamaVerifyPostDefaultImplementation(e, "/ollama/verify", uriBuilderLocalVar.Path, openWebuiRoutersOllamaConnectionVerificationForm);
                Events.ExecuteOnErrorVerifyConnectionOllamaVerifyPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyConnectionOllamaVerifyPostApiResponse"/>
        /// </summary>
        public partial class VerifyConnectionOllamaVerifyPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IVerifyConnectionOllamaVerifyPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyConnectionOllamaVerifyPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyConnectionOllamaVerifyPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyConnectionOllamaVerifyPostApiResponse(ILogger<VerifyConnectionOllamaVerifyPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
