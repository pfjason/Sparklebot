// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IChatsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ChatsApiEvents Events { get; }

        /// <summary>
        /// Add Tag By Id And Tag Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse"/>&gt;</returns>
        Task<IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse> AddTagByIdAndTagNameApiV1ChatsIdTagsPostAsync(string id, TagForm tagForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Tag By Id And Tag Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse"/>?&gt;</returns>
        Task<IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse?> AddTagByIdAndTagNameApiV1ChatsIdTagsPostOrDefaultAsync(string id, TagForm tagForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archive All Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse"/>&gt;</returns>
        Task<IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse> ArchiveAllChatsApiV1ChatsArchiveAllPostAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archive All Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse"/>?&gt;</returns>
        Task<IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse?> ArchiveAllChatsApiV1ChatsArchiveAllPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archive Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse"/>&gt;</returns>
        Task<IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse> ArchiveChatByIdApiV1ChatsIdArchivePostAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Archive Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse"/>?&gt;</returns>
        Task<IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse?> ArchiveChatByIdApiV1ChatsIdArchivePostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clone Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICloneChatByIdApiV1ChatsIdClonePostApiResponse"/>&gt;</returns>
        Task<ICloneChatByIdApiV1ChatsIdClonePostApiResponse> CloneChatByIdApiV1ChatsIdClonePostAsync(string id, CloneForm cloneForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clone Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICloneChatByIdApiV1ChatsIdClonePostApiResponse"/>?&gt;</returns>
        Task<ICloneChatByIdApiV1ChatsIdClonePostApiResponse?> CloneChatByIdApiV1ChatsIdClonePostOrDefaultAsync(string id, CloneForm cloneForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clone Shared Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse"/>&gt;</returns>
        Task<ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse> CloneSharedChatByIdApiV1ChatsIdCloneSharedPostAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Clone Shared Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse"/>?&gt;</returns>
        Task<ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse?> CloneSharedChatByIdApiV1ChatsIdCloneSharedPostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewChatApiV1ChatsNewPostApiResponse"/>&gt;</returns>
        Task<ICreateNewChatApiV1ChatsNewPostApiResponse> CreateNewChatApiV1ChatsNewPostAsync(ChatForm chatForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="chatForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewChatApiV1ChatsNewPostApiResponse"/>?&gt;</returns>
        Task<ICreateNewChatApiV1ChatsNewPostApiResponse?> CreateNewChatApiV1ChatsNewPostOrDefaultAsync(ChatForm chatForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete All Tags By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse> DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete All Tags By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse?> DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete All User Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllUserChatsApiV1ChatsDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteAllUserChatsApiV1ChatsDeleteApiResponse> DeleteAllUserChatsApiV1ChatsDeleteAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete All User Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllUserChatsApiV1ChatsDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteAllUserChatsApiV1ChatsDeleteApiResponse?> DeleteAllUserChatsApiV1ChatsDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChatByIdApiV1ChatsIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteChatByIdApiV1ChatsIdDeleteApiResponse> DeleteChatByIdApiV1ChatsIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChatByIdApiV1ChatsIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteChatByIdApiV1ChatsIdDeleteApiResponse?> DeleteChatByIdApiV1ChatsIdDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Shared Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse> DeleteSharedChatByIdApiV1ChatsIdShareDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Shared Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse?> DeleteSharedChatByIdApiV1ChatsIdShareDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Tag By Id And Tag Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse> DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteAsync(string id, TagForm tagForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Tag By Id And Tag Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse?> DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteOrDefaultAsync(string id, TagForm tagForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All User Chats In Db
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse"/>&gt;</returns>
        Task<IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse> GetAllUserChatsInDbApiV1ChatsAllDbGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All User Chats In Db
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse"/>?&gt;</returns>
        Task<IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse?> GetAllUserChatsInDbApiV1ChatsAllDbGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All User Tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse"/>&gt;</returns>
        Task<IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse> GetAllUserTagsApiV1ChatsAllTagsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All User Tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse"/>?&gt;</returns>
        Task<IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse?> GetAllUserTagsApiV1ChatsAllTagsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Archived Session User Chat List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse"/>&gt;</returns>
        Task<IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse> GetArchivedSessionUserChatListApiV1ChatsArchivedGetAsync(Option<int?> page = default, Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Archived Session User Chat List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse"/>?&gt;</returns>
        Task<IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse?> GetArchivedSessionUserChatListApiV1ChatsArchivedGetOrDefaultAsync(Option<int?> page = default, Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatByIdApiV1ChatsIdGetApiResponse"/>&gt;</returns>
        Task<IGetChatByIdApiV1ChatsIdGetApiResponse> GetChatByIdApiV1ChatsIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatByIdApiV1ChatsIdGetApiResponse"/>?&gt;</returns>
        Task<IGetChatByIdApiV1ChatsIdGetApiResponse?> GetChatByIdApiV1ChatsIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chat Tags By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse"/>&gt;</returns>
        Task<IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse> GetChatTagsByIdApiV1ChatsIdTagsGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chat Tags By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse"/>?&gt;</returns>
        Task<IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse?> GetChatTagsByIdApiV1ChatsIdTagsGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chats By Folder Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse"/>&gt;</returns>
        Task<IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse> GetChatsByFolderIdApiV1ChatsFolderFolderIdGetAsync(string folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Chats By Folder Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse"/>?&gt;</returns>
        Task<IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse?> GetChatsByFolderIdApiV1ChatsFolderFolderIdGetOrDefaultAsync(string folderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pinned Status By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse"/>&gt;</returns>
        Task<IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse> GetPinnedStatusByIdApiV1ChatsIdPinnedGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Pinned Status By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse"/>?&gt;</returns>
        Task<IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse?> GetPinnedStatusByIdApiV1ChatsIdPinnedGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Session User Chat List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserChatListApiV1ChatsGetApiResponse"/>&gt;</returns>
        Task<IGetSessionUserChatListApiV1ChatsGetApiResponse> GetSessionUserChatListApiV1ChatsGetAsync(Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Session User Chat List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserChatListApiV1ChatsGetApiResponse"/>?&gt;</returns>
        Task<IGetSessionUserChatListApiV1ChatsGetApiResponse?> GetSessionUserChatListApiV1ChatsGetOrDefaultAsync(Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Session User Chat List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserChatListApiV1ChatsListGetApiResponse"/>&gt;</returns>
        Task<IGetSessionUserChatListApiV1ChatsListGetApiResponse> GetSessionUserChatListApiV1ChatsListGetAsync(Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Session User Chat List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserChatListApiV1ChatsListGetApiResponse"/>?&gt;</returns>
        Task<IGetSessionUserChatListApiV1ChatsListGetApiResponse?> GetSessionUserChatListApiV1ChatsListGetOrDefaultAsync(Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Shared Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse"/>&gt;</returns>
        Task<IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse> GetSharedChatByIdApiV1ChatsShareShareIdGetAsync(string shareId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Shared Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="shareId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse"/>?&gt;</returns>
        Task<IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse?> GetSharedChatByIdApiV1ChatsShareShareIdGetOrDefaultAsync(string shareId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Archived Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse"/>&gt;</returns>
        Task<IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse> GetUserArchivedChatsApiV1ChatsAllArchivedGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Archived Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse"/>?&gt;</returns>
        Task<IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse?> GetUserArchivedChatsApiV1ChatsAllArchivedGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Chat List By Tag Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse"/>&gt;</returns>
        Task<IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse> GetUserChatListByTagNameApiV1ChatsTagsPostAsync(TagFilterForm tagFilterForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Chat List By Tag Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="tagFilterForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse"/>?&gt;</returns>
        Task<IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse?> GetUserChatListByTagNameApiV1ChatsTagsPostOrDefaultAsync(TagFilterForm tagFilterForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Chat List By User Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse"/>&gt;</returns>
        Task<IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse> GetUserChatListByUserIdApiV1ChatsListUserUserIdGetAsync(string userId, Option<int?> page = default, Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Chat List By User Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="userId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse"/>?&gt;</returns>
        Task<IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse?> GetUserChatListByUserIdApiV1ChatsListUserUserIdGetOrDefaultAsync(string userId, Option<int?> page = default, Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatsApiV1ChatsAllGetApiResponse"/>&gt;</returns>
        Task<IGetUserChatsApiV1ChatsAllGetApiResponse> GetUserChatsApiV1ChatsAllGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatsApiV1ChatsAllGetApiResponse"/>?&gt;</returns>
        Task<IGetUserChatsApiV1ChatsAllGetApiResponse?> GetUserChatsApiV1ChatsAllGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Pinned Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse"/>&gt;</returns>
        Task<IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse> GetUserPinnedChatsApiV1ChatsPinnedGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User Pinned Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse"/>?&gt;</returns>
        Task<IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse?> GetUserPinnedChatsApiV1ChatsPinnedGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import Chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatImportForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportChatApiV1ChatsImportPostApiResponse"/>&gt;</returns>
        Task<IImportChatApiV1ChatsImportPostApiResponse> ImportChatApiV1ChatsImportPostAsync(ChatImportForm chatImportForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Import Chat
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="chatImportForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportChatApiV1ChatsImportPostApiResponse"/>?&gt;</returns>
        Task<IImportChatApiV1ChatsImportPostApiResponse?> ImportChatApiV1ChatsImportPostOrDefaultAsync(ChatImportForm chatImportForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Pin Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPinChatByIdApiV1ChatsIdPinPostApiResponse"/>&gt;</returns>
        Task<IPinChatByIdApiV1ChatsIdPinPostApiResponse> PinChatByIdApiV1ChatsIdPinPostAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Pin Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPinChatByIdApiV1ChatsIdPinPostApiResponse"/>?&gt;</returns>
        Task<IPinChatByIdApiV1ChatsIdPinPostApiResponse?> PinChatByIdApiV1ChatsIdPinPostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search User Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchUserChatsApiV1ChatsSearchGetApiResponse"/>&gt;</returns>
        Task<ISearchUserChatsApiV1ChatsSearchGetApiResponse> SearchUserChatsApiV1ChatsSearchGetAsync(string text, Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search User Chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="text"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchUserChatsApiV1ChatsSearchGetApiResponse"/>?&gt;</returns>
        Task<ISearchUserChatsApiV1ChatsSearchGetApiResponse?> SearchUserChatsApiV1ChatsSearchGetOrDefaultAsync(string text, Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send Chat Message Event By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse"/>&gt;</returns>
        Task<ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse> SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostAsync(string id, string messageId, EventForm eventForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Send Chat Message Event By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse"/>?&gt;</returns>
        Task<ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse?> SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostOrDefaultAsync(string id, string messageId, EventForm eventForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Share Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShareChatByIdApiV1ChatsIdSharePostApiResponse"/>&gt;</returns>
        Task<IShareChatByIdApiV1ChatsIdSharePostApiResponse> ShareChatByIdApiV1ChatsIdSharePostAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Share Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShareChatByIdApiV1ChatsIdSharePostApiResponse"/>?&gt;</returns>
        Task<IShareChatByIdApiV1ChatsIdSharePostApiResponse?> ShareChatByIdApiV1ChatsIdSharePostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatByIdApiV1ChatsIdPostApiResponse"/>&gt;</returns>
        Task<IUpdateChatByIdApiV1ChatsIdPostApiResponse> UpdateChatByIdApiV1ChatsIdPostAsync(string id, ChatForm chatForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Chat By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatByIdApiV1ChatsIdPostApiResponse"/>?&gt;</returns>
        Task<IUpdateChatByIdApiV1ChatsIdPostApiResponse?> UpdateChatByIdApiV1ChatsIdPostOrDefaultAsync(string id, ChatForm chatForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Chat Folder Id By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse"/>&gt;</returns>
        Task<IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse> UpdateChatFolderIdByIdApiV1ChatsIdFolderPostAsync(string id, ChatFolderIdForm chatFolderIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Chat Folder Id By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse"/>?&gt;</returns>
        Task<IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse?> UpdateChatFolderIdByIdApiV1ChatsIdFolderPostOrDefaultAsync(string id, ChatFolderIdForm chatFolderIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Chat Message By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse"/>&gt;</returns>
        Task<IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse> UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostAsync(string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Chat Message By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse"/>?&gt;</returns>
        Task<IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse?> UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostOrDefaultAsync(string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse"/>
    /// </summary>
    public interface IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<TagModel>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse"/>
    /// </summary>
    public interface IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse"/>
    /// </summary>
    public interface IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICloneChatByIdApiV1ChatsIdClonePostApiResponse"/>
    /// </summary>
    public interface ICloneChatByIdApiV1ChatsIdClonePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse"/>
    /// </summary>
    public interface ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNewChatApiV1ChatsNewPostApiResponse"/>
    /// </summary>
    public interface ICreateNewChatApiV1ChatsNewPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAllUserChatsApiV1ChatsDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteAllUserChatsApiV1ChatsDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteChatByIdApiV1ChatsIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteChatByIdApiV1ChatsIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<TagModel>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse"/>
    /// </summary>
    public interface IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse"/>
    /// </summary>
    public interface IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<TagModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse"/>
    /// </summary>
    public interface IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatTitleIdResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChatByIdApiV1ChatsIdGetApiResponse"/>
    /// </summary>
    public interface IGetChatByIdApiV1ChatsIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse"/>
    /// </summary>
    public interface IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<TagModel>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse"/>
    /// </summary>
    public interface IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse"/>
    /// </summary>
    public interface IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetSessionUserChatListApiV1ChatsGetApiResponse"/>
    /// </summary>
    public interface IGetSessionUserChatListApiV1ChatsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatTitleIdResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetSessionUserChatListApiV1ChatsListGetApiResponse"/>
    /// </summary>
    public interface IGetSessionUserChatListApiV1ChatsListGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatTitleIdResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse"/>
    /// </summary>
    public interface IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse"/>
    /// </summary>
    public interface IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse"/>
    /// </summary>
    public interface IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatTitleIdResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse"/>
    /// </summary>
    public interface IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatTitleIdResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserChatsApiV1ChatsAllGetApiResponse"/>
    /// </summary>
    public interface IGetUserChatsApiV1ChatsAllGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse"/>
    /// </summary>
    public interface IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatTitleIdResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IImportChatApiV1ChatsImportPostApiResponse"/>
    /// </summary>
    public interface IImportChatApiV1ChatsImportPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IPinChatByIdApiV1ChatsIdPinPostApiResponse"/>
    /// </summary>
    public interface IPinChatByIdApiV1ChatsIdPinPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISearchUserChatsApiV1ChatsSearchGetApiResponse"/>
    /// </summary>
    public interface ISearchUserChatsApiV1ChatsSearchGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChatTitleIdResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse"/>
    /// </summary>
    public interface ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IShareChatByIdApiV1ChatsIdSharePostApiResponse"/>
    /// </summary>
    public interface IShareChatByIdApiV1ChatsIdSharePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateChatByIdApiV1ChatsIdPostApiResponse"/>
    /// </summary>
    public interface IUpdateChatByIdApiV1ChatsIdPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse"/>
    /// </summary>
    public interface IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse"/>
    /// </summary>
    public interface IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChatResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ChatsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddTagByIdAndTagNameApiV1ChatsIdTagsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddTagByIdAndTagNameApiV1ChatsIdTagsPost;

        internal void ExecuteOnAddTagByIdAndTagNameApiV1ChatsIdTagsPost(ChatsApi.AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse apiResponse)
        {
            OnAddTagByIdAndTagNameApiV1ChatsIdTagsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddTagByIdAndTagNameApiV1ChatsIdTagsPost(Exception exception)
        {
            OnErrorAddTagByIdAndTagNameApiV1ChatsIdTagsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnArchiveAllChatsApiV1ChatsArchiveAllPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorArchiveAllChatsApiV1ChatsArchiveAllPost;

        internal void ExecuteOnArchiveAllChatsApiV1ChatsArchiveAllPost(ChatsApi.ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse apiResponse)
        {
            OnArchiveAllChatsApiV1ChatsArchiveAllPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorArchiveAllChatsApiV1ChatsArchiveAllPost(Exception exception)
        {
            OnErrorArchiveAllChatsApiV1ChatsArchiveAllPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnArchiveChatByIdApiV1ChatsIdArchivePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorArchiveChatByIdApiV1ChatsIdArchivePost;

        internal void ExecuteOnArchiveChatByIdApiV1ChatsIdArchivePost(ChatsApi.ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse apiResponse)
        {
            OnArchiveChatByIdApiV1ChatsIdArchivePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorArchiveChatByIdApiV1ChatsIdArchivePost(Exception exception)
        {
            OnErrorArchiveChatByIdApiV1ChatsIdArchivePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCloneChatByIdApiV1ChatsIdClonePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCloneChatByIdApiV1ChatsIdClonePost;

        internal void ExecuteOnCloneChatByIdApiV1ChatsIdClonePost(ChatsApi.CloneChatByIdApiV1ChatsIdClonePostApiResponse apiResponse)
        {
            OnCloneChatByIdApiV1ChatsIdClonePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCloneChatByIdApiV1ChatsIdClonePost(Exception exception)
        {
            OnErrorCloneChatByIdApiV1ChatsIdClonePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCloneSharedChatByIdApiV1ChatsIdCloneSharedPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCloneSharedChatByIdApiV1ChatsIdCloneSharedPost;

        internal void ExecuteOnCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(ChatsApi.CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse apiResponse)
        {
            OnCloneSharedChatByIdApiV1ChatsIdCloneSharedPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(Exception exception)
        {
            OnErrorCloneSharedChatByIdApiV1ChatsIdCloneSharedPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNewChatApiV1ChatsNewPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNewChatApiV1ChatsNewPost;

        internal void ExecuteOnCreateNewChatApiV1ChatsNewPost(ChatsApi.CreateNewChatApiV1ChatsNewPostApiResponse apiResponse)
        {
            OnCreateNewChatApiV1ChatsNewPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewChatApiV1ChatsNewPost(Exception exception)
        {
            OnErrorCreateNewChatApiV1ChatsNewPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete;

        internal void ExecuteOnDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(ChatsApi.DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse apiResponse)
        {
            OnDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(Exception exception)
        {
            OnErrorDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAllUserChatsApiV1ChatsDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAllUserChatsApiV1ChatsDelete;

        internal void ExecuteOnDeleteAllUserChatsApiV1ChatsDelete(ChatsApi.DeleteAllUserChatsApiV1ChatsDeleteApiResponse apiResponse)
        {
            OnDeleteAllUserChatsApiV1ChatsDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAllUserChatsApiV1ChatsDelete(Exception exception)
        {
            OnErrorDeleteAllUserChatsApiV1ChatsDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteChatByIdApiV1ChatsIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteChatByIdApiV1ChatsIdDelete;

        internal void ExecuteOnDeleteChatByIdApiV1ChatsIdDelete(ChatsApi.DeleteChatByIdApiV1ChatsIdDeleteApiResponse apiResponse)
        {
            OnDeleteChatByIdApiV1ChatsIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteChatByIdApiV1ChatsIdDelete(Exception exception)
        {
            OnErrorDeleteChatByIdApiV1ChatsIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteSharedChatByIdApiV1ChatsIdShareDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteSharedChatByIdApiV1ChatsIdShareDelete;

        internal void ExecuteOnDeleteSharedChatByIdApiV1ChatsIdShareDelete(ChatsApi.DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse apiResponse)
        {
            OnDeleteSharedChatByIdApiV1ChatsIdShareDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteSharedChatByIdApiV1ChatsIdShareDelete(Exception exception)
        {
            OnErrorDeleteSharedChatByIdApiV1ChatsIdShareDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete;

        internal void ExecuteOnDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(ChatsApi.DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse apiResponse)
        {
            OnDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(Exception exception)
        {
            OnErrorDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllUserChatsInDbApiV1ChatsAllDbGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllUserChatsInDbApiV1ChatsAllDbGet;

        internal void ExecuteOnGetAllUserChatsInDbApiV1ChatsAllDbGet(ChatsApi.GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse apiResponse)
        {
            OnGetAllUserChatsInDbApiV1ChatsAllDbGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllUserChatsInDbApiV1ChatsAllDbGet(Exception exception)
        {
            OnErrorGetAllUserChatsInDbApiV1ChatsAllDbGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllUserTagsApiV1ChatsAllTagsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllUserTagsApiV1ChatsAllTagsGet;

        internal void ExecuteOnGetAllUserTagsApiV1ChatsAllTagsGet(ChatsApi.GetAllUserTagsApiV1ChatsAllTagsGetApiResponse apiResponse)
        {
            OnGetAllUserTagsApiV1ChatsAllTagsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllUserTagsApiV1ChatsAllTagsGet(Exception exception)
        {
            OnErrorGetAllUserTagsApiV1ChatsAllTagsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetArchivedSessionUserChatListApiV1ChatsArchivedGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetArchivedSessionUserChatListApiV1ChatsArchivedGet;

        internal void ExecuteOnGetArchivedSessionUserChatListApiV1ChatsArchivedGet(ChatsApi.GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse apiResponse)
        {
            OnGetArchivedSessionUserChatListApiV1ChatsArchivedGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetArchivedSessionUserChatListApiV1ChatsArchivedGet(Exception exception)
        {
            OnErrorGetArchivedSessionUserChatListApiV1ChatsArchivedGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChatByIdApiV1ChatsIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChatByIdApiV1ChatsIdGet;

        internal void ExecuteOnGetChatByIdApiV1ChatsIdGet(ChatsApi.GetChatByIdApiV1ChatsIdGetApiResponse apiResponse)
        {
            OnGetChatByIdApiV1ChatsIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChatByIdApiV1ChatsIdGet(Exception exception)
        {
            OnErrorGetChatByIdApiV1ChatsIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChatTagsByIdApiV1ChatsIdTagsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChatTagsByIdApiV1ChatsIdTagsGet;

        internal void ExecuteOnGetChatTagsByIdApiV1ChatsIdTagsGet(ChatsApi.GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse apiResponse)
        {
            OnGetChatTagsByIdApiV1ChatsIdTagsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChatTagsByIdApiV1ChatsIdTagsGet(Exception exception)
        {
            OnErrorGetChatTagsByIdApiV1ChatsIdTagsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChatsByFolderIdApiV1ChatsFolderFolderIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChatsByFolderIdApiV1ChatsFolderFolderIdGet;

        internal void ExecuteOnGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(ChatsApi.GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse apiResponse)
        {
            OnGetChatsByFolderIdApiV1ChatsFolderFolderIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(Exception exception)
        {
            OnErrorGetChatsByFolderIdApiV1ChatsFolderFolderIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPinnedStatusByIdApiV1ChatsIdPinnedGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPinnedStatusByIdApiV1ChatsIdPinnedGet;

        internal void ExecuteOnGetPinnedStatusByIdApiV1ChatsIdPinnedGet(ChatsApi.GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse apiResponse)
        {
            OnGetPinnedStatusByIdApiV1ChatsIdPinnedGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPinnedStatusByIdApiV1ChatsIdPinnedGet(Exception exception)
        {
            OnErrorGetPinnedStatusByIdApiV1ChatsIdPinnedGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSessionUserChatListApiV1ChatsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSessionUserChatListApiV1ChatsGet;

        internal void ExecuteOnGetSessionUserChatListApiV1ChatsGet(ChatsApi.GetSessionUserChatListApiV1ChatsGetApiResponse apiResponse)
        {
            OnGetSessionUserChatListApiV1ChatsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSessionUserChatListApiV1ChatsGet(Exception exception)
        {
            OnErrorGetSessionUserChatListApiV1ChatsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSessionUserChatListApiV1ChatsListGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSessionUserChatListApiV1ChatsListGet;

        internal void ExecuteOnGetSessionUserChatListApiV1ChatsListGet(ChatsApi.GetSessionUserChatListApiV1ChatsListGetApiResponse apiResponse)
        {
            OnGetSessionUserChatListApiV1ChatsListGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSessionUserChatListApiV1ChatsListGet(Exception exception)
        {
            OnErrorGetSessionUserChatListApiV1ChatsListGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSharedChatByIdApiV1ChatsShareShareIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSharedChatByIdApiV1ChatsShareShareIdGet;

        internal void ExecuteOnGetSharedChatByIdApiV1ChatsShareShareIdGet(ChatsApi.GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse apiResponse)
        {
            OnGetSharedChatByIdApiV1ChatsShareShareIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSharedChatByIdApiV1ChatsShareShareIdGet(Exception exception)
        {
            OnErrorGetSharedChatByIdApiV1ChatsShareShareIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserArchivedChatsApiV1ChatsAllArchivedGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserArchivedChatsApiV1ChatsAllArchivedGet;

        internal void ExecuteOnGetUserArchivedChatsApiV1ChatsAllArchivedGet(ChatsApi.GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse apiResponse)
        {
            OnGetUserArchivedChatsApiV1ChatsAllArchivedGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserArchivedChatsApiV1ChatsAllArchivedGet(Exception exception)
        {
            OnErrorGetUserArchivedChatsApiV1ChatsAllArchivedGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserChatListByTagNameApiV1ChatsTagsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserChatListByTagNameApiV1ChatsTagsPost;

        internal void ExecuteOnGetUserChatListByTagNameApiV1ChatsTagsPost(ChatsApi.GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse apiResponse)
        {
            OnGetUserChatListByTagNameApiV1ChatsTagsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserChatListByTagNameApiV1ChatsTagsPost(Exception exception)
        {
            OnErrorGetUserChatListByTagNameApiV1ChatsTagsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserChatListByUserIdApiV1ChatsListUserUserIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserChatListByUserIdApiV1ChatsListUserUserIdGet;

        internal void ExecuteOnGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(ChatsApi.GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse apiResponse)
        {
            OnGetUserChatListByUserIdApiV1ChatsListUserUserIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(Exception exception)
        {
            OnErrorGetUserChatListByUserIdApiV1ChatsListUserUserIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserChatsApiV1ChatsAllGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserChatsApiV1ChatsAllGet;

        internal void ExecuteOnGetUserChatsApiV1ChatsAllGet(ChatsApi.GetUserChatsApiV1ChatsAllGetApiResponse apiResponse)
        {
            OnGetUserChatsApiV1ChatsAllGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserChatsApiV1ChatsAllGet(Exception exception)
        {
            OnErrorGetUserChatsApiV1ChatsAllGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserPinnedChatsApiV1ChatsPinnedGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserPinnedChatsApiV1ChatsPinnedGet;

        internal void ExecuteOnGetUserPinnedChatsApiV1ChatsPinnedGet(ChatsApi.GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse apiResponse)
        {
            OnGetUserPinnedChatsApiV1ChatsPinnedGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserPinnedChatsApiV1ChatsPinnedGet(Exception exception)
        {
            OnErrorGetUserPinnedChatsApiV1ChatsPinnedGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnImportChatApiV1ChatsImportPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorImportChatApiV1ChatsImportPost;

        internal void ExecuteOnImportChatApiV1ChatsImportPost(ChatsApi.ImportChatApiV1ChatsImportPostApiResponse apiResponse)
        {
            OnImportChatApiV1ChatsImportPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorImportChatApiV1ChatsImportPost(Exception exception)
        {
            OnErrorImportChatApiV1ChatsImportPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPinChatByIdApiV1ChatsIdPinPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPinChatByIdApiV1ChatsIdPinPost;

        internal void ExecuteOnPinChatByIdApiV1ChatsIdPinPost(ChatsApi.PinChatByIdApiV1ChatsIdPinPostApiResponse apiResponse)
        {
            OnPinChatByIdApiV1ChatsIdPinPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPinChatByIdApiV1ChatsIdPinPost(Exception exception)
        {
            OnErrorPinChatByIdApiV1ChatsIdPinPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSearchUserChatsApiV1ChatsSearchGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSearchUserChatsApiV1ChatsSearchGet;

        internal void ExecuteOnSearchUserChatsApiV1ChatsSearchGet(ChatsApi.SearchUserChatsApiV1ChatsSearchGetApiResponse apiResponse)
        {
            OnSearchUserChatsApiV1ChatsSearchGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSearchUserChatsApiV1ChatsSearchGet(Exception exception)
        {
            OnErrorSearchUserChatsApiV1ChatsSearchGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost;

        internal void ExecuteOnSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(ChatsApi.SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse apiResponse)
        {
            OnSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(Exception exception)
        {
            OnErrorSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnShareChatByIdApiV1ChatsIdSharePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorShareChatByIdApiV1ChatsIdSharePost;

        internal void ExecuteOnShareChatByIdApiV1ChatsIdSharePost(ChatsApi.ShareChatByIdApiV1ChatsIdSharePostApiResponse apiResponse)
        {
            OnShareChatByIdApiV1ChatsIdSharePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorShareChatByIdApiV1ChatsIdSharePost(Exception exception)
        {
            OnErrorShareChatByIdApiV1ChatsIdSharePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateChatByIdApiV1ChatsIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateChatByIdApiV1ChatsIdPost;

        internal void ExecuteOnUpdateChatByIdApiV1ChatsIdPost(ChatsApi.UpdateChatByIdApiV1ChatsIdPostApiResponse apiResponse)
        {
            OnUpdateChatByIdApiV1ChatsIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateChatByIdApiV1ChatsIdPost(Exception exception)
        {
            OnErrorUpdateChatByIdApiV1ChatsIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateChatFolderIdByIdApiV1ChatsIdFolderPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateChatFolderIdByIdApiV1ChatsIdFolderPost;

        internal void ExecuteOnUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(ChatsApi.UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse apiResponse)
        {
            OnUpdateChatFolderIdByIdApiV1ChatsIdFolderPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(Exception exception)
        {
            OnErrorUpdateChatFolderIdByIdApiV1ChatsIdFolderPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost;

        internal void ExecuteOnUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(ChatsApi.UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse apiResponse)
        {
            OnUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(Exception exception)
        {
            OnErrorUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ChatsApi : IChatsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ChatsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ChatsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatsApi(ILogger<ChatsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ChatsApiEvents chatsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ChatsApi>();
            HttpClient = httpClient;
            Events = chatsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAddTagByIdAndTagNameApiV1ChatsIdTagsPost(ref string id, TagForm tagForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <returns></returns>
        private void ValidateAddTagByIdAndTagNameApiV1ChatsIdTagsPost(string id, TagForm tagForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (tagForm == null)
                throw new ArgumentNullException(nameof(tagForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        private void AfterAddTagByIdAndTagNameApiV1ChatsIdTagsPostDefaultImplementation(IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse apiResponseLocalVar, string id, TagForm tagForm)
        {
            bool suppressDefaultLog = false;
            AfterAddTagByIdAndTagNameApiV1ChatsIdTagsPost(ref suppressDefaultLog, apiResponseLocalVar, id, tagForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        partial void AfterAddTagByIdAndTagNameApiV1ChatsIdTagsPost(ref bool suppressDefaultLog, IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse apiResponseLocalVar, string id, TagForm tagForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        private void OnErrorAddTagByIdAndTagNameApiV1ChatsIdTagsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, TagForm tagForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddTagByIdAndTagNameApiV1ChatsIdTagsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, tagForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        partial void OnErrorAddTagByIdAndTagNameApiV1ChatsIdTagsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, TagForm tagForm);

        /// <summary>
        /// Add Tag By Id And Tag Name 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse"/>&gt;</returns>
        public async Task<IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse?> AddTagByIdAndTagNameApiV1ChatsIdTagsPostOrDefaultAsync(string id, TagForm tagForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddTagByIdAndTagNameApiV1ChatsIdTagsPostAsync(id, tagForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Tag By Id And Tag Name 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse"/>&gt;</returns>
        public async Task<IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse> AddTagByIdAndTagNameApiV1ChatsIdTagsPostAsync(string id, TagForm tagForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddTagByIdAndTagNameApiV1ChatsIdTagsPost(id, tagForm);

                FormatAddTagByIdAndTagNameApiV1ChatsIdTagsPost(ref id, tagForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/tags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (tagForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(tagForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse>();

                        AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddTagByIdAndTagNameApiV1ChatsIdTagsPostDefaultImplementation(apiResponseLocalVar, id, tagForm);

                        Events.ExecuteOnAddTagByIdAndTagNameApiV1ChatsIdTagsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddTagByIdAndTagNameApiV1ChatsIdTagsPostDefaultImplementation(e, "/api/v1/chats/{id}/tags", uriBuilderLocalVar.Path, id, tagForm);
                Events.ExecuteOnErrorAddTagByIdAndTagNameApiV1ChatsIdTagsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse"/>
        /// </summary>
        public partial class AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IAddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse(ILogger<AddTagByIdAndTagNameApiV1ChatsIdTagsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TagModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TagModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TagModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterArchiveAllChatsApiV1ChatsArchiveAllPostDefaultImplementation(IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterArchiveAllChatsApiV1ChatsArchiveAllPost(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterArchiveAllChatsApiV1ChatsArchiveAllPost(ref bool suppressDefaultLog, IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorArchiveAllChatsApiV1ChatsArchiveAllPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorArchiveAllChatsApiV1ChatsArchiveAllPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorArchiveAllChatsApiV1ChatsArchiveAllPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Archive All Chats 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse"/>&gt;</returns>
        public async Task<IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse?> ArchiveAllChatsApiV1ChatsArchiveAllPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ArchiveAllChatsApiV1ChatsArchiveAllPostAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Archive All Chats 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse"/>&gt;</returns>
        public async Task<IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse> ArchiveAllChatsApiV1ChatsArchiveAllPostAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/archive/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/archive/all");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse>();

                        ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/archive/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterArchiveAllChatsApiV1ChatsArchiveAllPostDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnArchiveAllChatsApiV1ChatsArchiveAllPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorArchiveAllChatsApiV1ChatsArchiveAllPostDefaultImplementation(e, "/api/v1/chats/archive/all", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorArchiveAllChatsApiV1ChatsArchiveAllPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse"/>
        /// </summary>
        public partial class ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse(ILogger<ArchiveAllChatsApiV1ChatsArchiveAllPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatArchiveChatByIdApiV1ChatsIdArchivePost(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateArchiveChatByIdApiV1ChatsIdArchivePost(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterArchiveChatByIdApiV1ChatsIdArchivePostDefaultImplementation(IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterArchiveChatByIdApiV1ChatsIdArchivePost(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterArchiveChatByIdApiV1ChatsIdArchivePost(ref bool suppressDefaultLog, IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorArchiveChatByIdApiV1ChatsIdArchivePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorArchiveChatByIdApiV1ChatsIdArchivePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorArchiveChatByIdApiV1ChatsIdArchivePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Archive Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse"/>&gt;</returns>
        public async Task<IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse?> ArchiveChatByIdApiV1ChatsIdArchivePostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ArchiveChatByIdApiV1ChatsIdArchivePostAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Archive Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse"/>&gt;</returns>
        public async Task<IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse> ArchiveChatByIdApiV1ChatsIdArchivePostAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateArchiveChatByIdApiV1ChatsIdArchivePost(id);

                FormatArchiveChatByIdApiV1ChatsIdArchivePost(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/archive"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/archive");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse>();

                        ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/archive", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterArchiveChatByIdApiV1ChatsIdArchivePostDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnArchiveChatByIdApiV1ChatsIdArchivePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorArchiveChatByIdApiV1ChatsIdArchivePostDefaultImplementation(e, "/api/v1/chats/{id}/archive", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorArchiveChatByIdApiV1ChatsIdArchivePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse"/>
        /// </summary>
        public partial class ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IArchiveChatByIdApiV1ChatsIdArchivePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse(ILogger<ArchiveChatByIdApiV1ChatsIdArchivePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCloneChatByIdApiV1ChatsIdClonePost(ref string id, CloneForm cloneForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        /// <returns></returns>
        private void ValidateCloneChatByIdApiV1ChatsIdClonePost(string id, CloneForm cloneForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (cloneForm == null)
                throw new ArgumentNullException(nameof(cloneForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        private void AfterCloneChatByIdApiV1ChatsIdClonePostDefaultImplementation(ICloneChatByIdApiV1ChatsIdClonePostApiResponse apiResponseLocalVar, string id, CloneForm cloneForm)
        {
            bool suppressDefaultLog = false;
            AfterCloneChatByIdApiV1ChatsIdClonePost(ref suppressDefaultLog, apiResponseLocalVar, id, cloneForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        partial void AfterCloneChatByIdApiV1ChatsIdClonePost(ref bool suppressDefaultLog, ICloneChatByIdApiV1ChatsIdClonePostApiResponse apiResponseLocalVar, string id, CloneForm cloneForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        private void OnErrorCloneChatByIdApiV1ChatsIdClonePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, CloneForm cloneForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCloneChatByIdApiV1ChatsIdClonePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, cloneForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        partial void OnErrorCloneChatByIdApiV1ChatsIdClonePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, CloneForm cloneForm);

        /// <summary>
        /// Clone Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICloneChatByIdApiV1ChatsIdClonePostApiResponse"/>&gt;</returns>
        public async Task<ICloneChatByIdApiV1ChatsIdClonePostApiResponse?> CloneChatByIdApiV1ChatsIdClonePostOrDefaultAsync(string id, CloneForm cloneForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CloneChatByIdApiV1ChatsIdClonePostAsync(id, cloneForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Clone Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cloneForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICloneChatByIdApiV1ChatsIdClonePostApiResponse"/>&gt;</returns>
        public async Task<ICloneChatByIdApiV1ChatsIdClonePostApiResponse> CloneChatByIdApiV1ChatsIdClonePostAsync(string id, CloneForm cloneForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCloneChatByIdApiV1ChatsIdClonePost(id, cloneForm);

                FormatCloneChatByIdApiV1ChatsIdClonePost(ref id, cloneForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/clone"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/clone");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (cloneForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(cloneForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CloneChatByIdApiV1ChatsIdClonePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CloneChatByIdApiV1ChatsIdClonePostApiResponse>();

                        CloneChatByIdApiV1ChatsIdClonePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/clone", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCloneChatByIdApiV1ChatsIdClonePostDefaultImplementation(apiResponseLocalVar, id, cloneForm);

                        Events.ExecuteOnCloneChatByIdApiV1ChatsIdClonePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCloneChatByIdApiV1ChatsIdClonePostDefaultImplementation(e, "/api/v1/chats/{id}/clone", uriBuilderLocalVar.Path, id, cloneForm);
                Events.ExecuteOnErrorCloneChatByIdApiV1ChatsIdClonePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CloneChatByIdApiV1ChatsIdClonePostApiResponse"/>
        /// </summary>
        public partial class CloneChatByIdApiV1ChatsIdClonePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICloneChatByIdApiV1ChatsIdClonePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CloneChatByIdApiV1ChatsIdClonePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CloneChatByIdApiV1ChatsIdClonePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CloneChatByIdApiV1ChatsIdClonePostApiResponse(ILogger<CloneChatByIdApiV1ChatsIdClonePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterCloneSharedChatByIdApiV1ChatsIdCloneSharedPostDefaultImplementation(ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(ref bool suppressDefaultLog, ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorCloneSharedChatByIdApiV1ChatsIdCloneSharedPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Clone Shared Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse"/>&gt;</returns>
        public async Task<ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse?> CloneSharedChatByIdApiV1ChatsIdCloneSharedPostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CloneSharedChatByIdApiV1ChatsIdCloneSharedPostAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Clone Shared Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse"/>&gt;</returns>
        public async Task<ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse> CloneSharedChatByIdApiV1ChatsIdCloneSharedPostAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(id);

                FormatCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/clone/shared"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/clone/shared");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse>();

                        CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/clone/shared", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCloneSharedChatByIdApiV1ChatsIdCloneSharedPostDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCloneSharedChatByIdApiV1ChatsIdCloneSharedPostDefaultImplementation(e, "/api/v1/chats/{id}/clone/shared", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorCloneSharedChatByIdApiV1ChatsIdCloneSharedPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse"/>
        /// </summary>
        public partial class CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse(ILogger<CloneSharedChatByIdApiV1ChatsIdCloneSharedPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateNewChatApiV1ChatsNewPost(ChatForm chatForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="chatForm"></param>
        /// <returns></returns>
        private void ValidateCreateNewChatApiV1ChatsNewPost(ChatForm chatForm)
        {
            if (chatForm == null)
                throw new ArgumentNullException(nameof(chatForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatForm"></param>
        private void AfterCreateNewChatApiV1ChatsNewPostDefaultImplementation(ICreateNewChatApiV1ChatsNewPostApiResponse apiResponseLocalVar, ChatForm chatForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewChatApiV1ChatsNewPost(ref suppressDefaultLog, apiResponseLocalVar, chatForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatForm"></param>
        partial void AfterCreateNewChatApiV1ChatsNewPost(ref bool suppressDefaultLog, ICreateNewChatApiV1ChatsNewPostApiResponse apiResponseLocalVar, ChatForm chatForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatForm"></param>
        private void OnErrorCreateNewChatApiV1ChatsNewPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ChatForm chatForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewChatApiV1ChatsNewPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, chatForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatForm"></param>
        partial void OnErrorCreateNewChatApiV1ChatsNewPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ChatForm chatForm);

        /// <summary>
        /// Create New Chat 
        /// </summary>
        /// <param name="chatForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewChatApiV1ChatsNewPostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewChatApiV1ChatsNewPostApiResponse?> CreateNewChatApiV1ChatsNewPostOrDefaultAsync(ChatForm chatForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewChatApiV1ChatsNewPostAsync(chatForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create New Chat 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewChatApiV1ChatsNewPostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewChatApiV1ChatsNewPostApiResponse> CreateNewChatApiV1ChatsNewPostAsync(ChatForm chatForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewChatApiV1ChatsNewPost(chatForm);

                FormatCreateNewChatApiV1ChatsNewPost(chatForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/new"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/new");

                    httpRequestMessageLocalVar.Content = (chatForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(chatForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNewChatApiV1ChatsNewPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewChatApiV1ChatsNewPostApiResponse>();

                        CreateNewChatApiV1ChatsNewPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/new", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewChatApiV1ChatsNewPostDefaultImplementation(apiResponseLocalVar, chatForm);

                        Events.ExecuteOnCreateNewChatApiV1ChatsNewPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewChatApiV1ChatsNewPostDefaultImplementation(e, "/api/v1/chats/new", uriBuilderLocalVar.Path, chatForm);
                Events.ExecuteOnErrorCreateNewChatApiV1ChatsNewPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewChatApiV1ChatsNewPostApiResponse"/>
        /// </summary>
        public partial class CreateNewChatApiV1ChatsNewPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateNewChatApiV1ChatsNewPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewChatApiV1ChatsNewPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewChatApiV1ChatsNewPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewChatApiV1ChatsNewPostApiResponse(ILogger<CreateNewChatApiV1ChatsNewPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteDefaultImplementation(IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(ref bool suppressDefaultLog, IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete All Tags By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse?> DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete All Tags By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse> DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(id);

                FormatDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/tags/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/tags/all");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse>();

                        DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/tags/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteDefaultImplementation(e, "/api/v1/chats/{id}/tags/all", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteAllTagsByIdApiV1ChatsIdTagsAllDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse(ILogger<DeleteAllTagsByIdApiV1ChatsIdTagsAllDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDeleteAllUserChatsApiV1ChatsDeleteDefaultImplementation(IDeleteAllUserChatsApiV1ChatsDeleteApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAllUserChatsApiV1ChatsDelete(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDeleteAllUserChatsApiV1ChatsDelete(ref bool suppressDefaultLog, IDeleteAllUserChatsApiV1ChatsDeleteApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDeleteAllUserChatsApiV1ChatsDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAllUserChatsApiV1ChatsDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDeleteAllUserChatsApiV1ChatsDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Delete All User Chats 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllUserChatsApiV1ChatsDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllUserChatsApiV1ChatsDeleteApiResponse?> DeleteAllUserChatsApiV1ChatsDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAllUserChatsApiV1ChatsDeleteAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete All User Chats 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllUserChatsApiV1ChatsDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllUserChatsApiV1ChatsDeleteApiResponse> DeleteAllUserChatsApiV1ChatsDeleteAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAllUserChatsApiV1ChatsDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAllUserChatsApiV1ChatsDeleteApiResponse>();

                        DeleteAllUserChatsApiV1ChatsDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAllUserChatsApiV1ChatsDeleteDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDeleteAllUserChatsApiV1ChatsDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAllUserChatsApiV1ChatsDeleteDefaultImplementation(e, "/api/v1/chats/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDeleteAllUserChatsApiV1ChatsDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAllUserChatsApiV1ChatsDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteAllUserChatsApiV1ChatsDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteAllUserChatsApiV1ChatsDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAllUserChatsApiV1ChatsDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAllUserChatsApiV1ChatsDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAllUserChatsApiV1ChatsDeleteApiResponse(ILogger<DeleteAllUserChatsApiV1ChatsDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteChatByIdApiV1ChatsIdDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteChatByIdApiV1ChatsIdDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteChatByIdApiV1ChatsIdDeleteDefaultImplementation(IDeleteChatByIdApiV1ChatsIdDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteChatByIdApiV1ChatsIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteChatByIdApiV1ChatsIdDelete(ref bool suppressDefaultLog, IDeleteChatByIdApiV1ChatsIdDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteChatByIdApiV1ChatsIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteChatByIdApiV1ChatsIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteChatByIdApiV1ChatsIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChatByIdApiV1ChatsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteChatByIdApiV1ChatsIdDeleteApiResponse?> DeleteChatByIdApiV1ChatsIdDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteChatByIdApiV1ChatsIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChatByIdApiV1ChatsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteChatByIdApiV1ChatsIdDeleteApiResponse> DeleteChatByIdApiV1ChatsIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteChatByIdApiV1ChatsIdDelete(id);

                FormatDeleteChatByIdApiV1ChatsIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteChatByIdApiV1ChatsIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteChatByIdApiV1ChatsIdDeleteApiResponse>();

                        DeleteChatByIdApiV1ChatsIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteChatByIdApiV1ChatsIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteChatByIdApiV1ChatsIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteChatByIdApiV1ChatsIdDeleteDefaultImplementation(e, "/api/v1/chats/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteChatByIdApiV1ChatsIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteChatByIdApiV1ChatsIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteChatByIdApiV1ChatsIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteChatByIdApiV1ChatsIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteChatByIdApiV1ChatsIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteChatByIdApiV1ChatsIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteChatByIdApiV1ChatsIdDeleteApiResponse(ILogger<DeleteChatByIdApiV1ChatsIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteSharedChatByIdApiV1ChatsIdShareDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteSharedChatByIdApiV1ChatsIdShareDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteSharedChatByIdApiV1ChatsIdShareDeleteDefaultImplementation(IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteSharedChatByIdApiV1ChatsIdShareDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteSharedChatByIdApiV1ChatsIdShareDelete(ref bool suppressDefaultLog, IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteSharedChatByIdApiV1ChatsIdShareDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteSharedChatByIdApiV1ChatsIdShareDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteSharedChatByIdApiV1ChatsIdShareDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete Shared Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse?> DeleteSharedChatByIdApiV1ChatsIdShareDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteSharedChatByIdApiV1ChatsIdShareDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Shared Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse> DeleteSharedChatByIdApiV1ChatsIdShareDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteSharedChatByIdApiV1ChatsIdShareDelete(id);

                FormatDeleteSharedChatByIdApiV1ChatsIdShareDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/share"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/share");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse>();

                        DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/share", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteSharedChatByIdApiV1ChatsIdShareDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteSharedChatByIdApiV1ChatsIdShareDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteSharedChatByIdApiV1ChatsIdShareDeleteDefaultImplementation(e, "/api/v1/chats/{id}/share", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteSharedChatByIdApiV1ChatsIdShareDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse(ILogger<DeleteSharedChatByIdApiV1ChatsIdShareDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(ref string id, TagForm tagForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <returns></returns>
        private void ValidateDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(string id, TagForm tagForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (tagForm == null)
                throw new ArgumentNullException(nameof(tagForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        private void AfterDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteDefaultImplementation(IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse apiResponseLocalVar, string id, TagForm tagForm)
        {
            bool suppressDefaultLog = false;
            AfterDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(ref suppressDefaultLog, apiResponseLocalVar, id, tagForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        partial void AfterDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(ref bool suppressDefaultLog, IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse apiResponseLocalVar, string id, TagForm tagForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        private void OnErrorDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, TagForm tagForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, tagForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        partial void OnErrorDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, TagForm tagForm);

        /// <summary>
        /// Delete Tag By Id And Tag Name 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse?> DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteOrDefaultAsync(string id, TagForm tagForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteAsync(id, tagForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Tag By Id And Tag Name 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="tagForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse> DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteAsync(string id, TagForm tagForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(id, tagForm);

                FormatDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(ref id, tagForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/tags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (tagForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(tagForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse>();

                        DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteDefaultImplementation(apiResponseLocalVar, id, tagForm);

                        Events.ExecuteOnDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteDefaultImplementation(e, "/api/v1/chats/{id}/tags", uriBuilderLocalVar.Path, id, tagForm);
                Events.ExecuteOnErrorDeleteTagByIdAndTagNameApiV1ChatsIdTagsDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse(ILogger<DeleteTagByIdAndTagNameApiV1ChatsIdTagsDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TagModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TagModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TagModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAllUserChatsInDbApiV1ChatsAllDbGetDefaultImplementation(IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAllUserChatsInDbApiV1ChatsAllDbGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAllUserChatsInDbApiV1ChatsAllDbGet(ref bool suppressDefaultLog, IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAllUserChatsInDbApiV1ChatsAllDbGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllUserChatsInDbApiV1ChatsAllDbGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAllUserChatsInDbApiV1ChatsAllDbGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get All User Chats In Db 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse?> GetAllUserChatsInDbApiV1ChatsAllDbGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllUserChatsInDbApiV1ChatsAllDbGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All User Chats In Db 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse> GetAllUserChatsInDbApiV1ChatsAllDbGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/all/db"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/all/db");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse>();

                        GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/all/db", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllUserChatsInDbApiV1ChatsAllDbGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAllUserChatsInDbApiV1ChatsAllDbGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllUserChatsInDbApiV1ChatsAllDbGetDefaultImplementation(e, "/api/v1/chats/all/db", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAllUserChatsInDbApiV1ChatsAllDbGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse"/>
        /// </summary>
        public partial class GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse(ILogger<GetAllUserChatsInDbApiV1ChatsAllDbGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAllUserTagsApiV1ChatsAllTagsGetDefaultImplementation(IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAllUserTagsApiV1ChatsAllTagsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAllUserTagsApiV1ChatsAllTagsGet(ref bool suppressDefaultLog, IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAllUserTagsApiV1ChatsAllTagsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllUserTagsApiV1ChatsAllTagsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAllUserTagsApiV1ChatsAllTagsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get All User Tags 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse?> GetAllUserTagsApiV1ChatsAllTagsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllUserTagsApiV1ChatsAllTagsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All User Tags 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse> GetAllUserTagsApiV1ChatsAllTagsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/all/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/all/tags");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllUserTagsApiV1ChatsAllTagsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllUserTagsApiV1ChatsAllTagsGetApiResponse>();

                        GetAllUserTagsApiV1ChatsAllTagsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/all/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllUserTagsApiV1ChatsAllTagsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAllUserTagsApiV1ChatsAllTagsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllUserTagsApiV1ChatsAllTagsGetDefaultImplementation(e, "/api/v1/chats/all/tags", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAllUserTagsApiV1ChatsAllTagsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllUserTagsApiV1ChatsAllTagsGetApiResponse"/>
        /// </summary>
        public partial class GetAllUserTagsApiV1ChatsAllTagsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAllUserTagsApiV1ChatsAllTagsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllUserTagsApiV1ChatsAllTagsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllUserTagsApiV1ChatsAllTagsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllUserTagsApiV1ChatsAllTagsGetApiResponse(ILogger<GetAllUserTagsApiV1ChatsAllTagsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TagModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TagModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TagModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetArchivedSessionUserChatListApiV1ChatsArchivedGet(ref Option<int?> page, ref Option<string?> query, ref Option<string?> orderBy, ref Option<string?> direction);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        private void AfterGetArchivedSessionUserChatListApiV1ChatsArchivedGetDefaultImplementation(IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse apiResponseLocalVar, Option<int?> page, Option<string?> query, Option<string?> orderBy, Option<string?> direction)
        {
            bool suppressDefaultLog = false;
            AfterGetArchivedSessionUserChatListApiV1ChatsArchivedGet(ref suppressDefaultLog, apiResponseLocalVar, page, query, orderBy, direction);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        partial void AfterGetArchivedSessionUserChatListApiV1ChatsArchivedGet(ref bool suppressDefaultLog, IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse apiResponseLocalVar, Option<int?> page, Option<string?> query, Option<string?> orderBy, Option<string?> direction);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        private void OnErrorGetArchivedSessionUserChatListApiV1ChatsArchivedGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> page, Option<string?> query, Option<string?> orderBy, Option<string?> direction)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetArchivedSessionUserChatListApiV1ChatsArchivedGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, query, orderBy, direction);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        partial void OnErrorGetArchivedSessionUserChatListApiV1ChatsArchivedGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> page, Option<string?> query, Option<string?> orderBy, Option<string?> direction);

        /// <summary>
        /// Get Archived Session User Chat List 
        /// </summary>
        /// <param name="page"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse"/>&gt;</returns>
        public async Task<IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse?> GetArchivedSessionUserChatListApiV1ChatsArchivedGetOrDefaultAsync(Option<int?> page = default, Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetArchivedSessionUserChatListApiV1ChatsArchivedGetAsync(page, query, orderBy, direction, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Archived Session User Chat List 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse"/>&gt;</returns>
        public async Task<IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse> GetArchivedSessionUserChatListApiV1ChatsArchivedGetAsync(Option<int?> page = default, Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetArchivedSessionUserChatListApiV1ChatsArchivedGet(ref page, ref query, ref orderBy, ref direction);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/archived"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/archived");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (query.IsSet)
                        parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (direction.IsSet)
                        parseQueryStringLocalVar["direction"] = ClientUtils.ParameterToString(direction.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse>();

                        GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/archived", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetArchivedSessionUserChatListApiV1ChatsArchivedGetDefaultImplementation(apiResponseLocalVar, page, query, orderBy, direction);

                        Events.ExecuteOnGetArchivedSessionUserChatListApiV1ChatsArchivedGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetArchivedSessionUserChatListApiV1ChatsArchivedGetDefaultImplementation(e, "/api/v1/chats/archived", uriBuilderLocalVar.Path, page, query, orderBy, direction);
                Events.ExecuteOnErrorGetArchivedSessionUserChatListApiV1ChatsArchivedGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse"/>
        /// </summary>
        public partial class GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse(ILogger<GetArchivedSessionUserChatListApiV1ChatsArchivedGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatTitleIdResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatTitleIdResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatTitleIdResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChatByIdApiV1ChatsIdGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetChatByIdApiV1ChatsIdGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetChatByIdApiV1ChatsIdGetDefaultImplementation(IGetChatByIdApiV1ChatsIdGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetChatByIdApiV1ChatsIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetChatByIdApiV1ChatsIdGet(ref bool suppressDefaultLog, IGetChatByIdApiV1ChatsIdGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetChatByIdApiV1ChatsIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChatByIdApiV1ChatsIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetChatByIdApiV1ChatsIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatByIdApiV1ChatsIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChatByIdApiV1ChatsIdGetApiResponse?> GetChatByIdApiV1ChatsIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChatByIdApiV1ChatsIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatByIdApiV1ChatsIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChatByIdApiV1ChatsIdGetApiResponse> GetChatByIdApiV1ChatsIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChatByIdApiV1ChatsIdGet(id);

                FormatGetChatByIdApiV1ChatsIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChatByIdApiV1ChatsIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChatByIdApiV1ChatsIdGetApiResponse>();

                        GetChatByIdApiV1ChatsIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChatByIdApiV1ChatsIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetChatByIdApiV1ChatsIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChatByIdApiV1ChatsIdGetDefaultImplementation(e, "/api/v1/chats/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetChatByIdApiV1ChatsIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChatByIdApiV1ChatsIdGetApiResponse"/>
        /// </summary>
        public partial class GetChatByIdApiV1ChatsIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetChatByIdApiV1ChatsIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChatByIdApiV1ChatsIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChatByIdApiV1ChatsIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChatByIdApiV1ChatsIdGetApiResponse(ILogger<GetChatByIdApiV1ChatsIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChatTagsByIdApiV1ChatsIdTagsGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetChatTagsByIdApiV1ChatsIdTagsGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetChatTagsByIdApiV1ChatsIdTagsGetDefaultImplementation(IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetChatTagsByIdApiV1ChatsIdTagsGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetChatTagsByIdApiV1ChatsIdTagsGet(ref bool suppressDefaultLog, IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetChatTagsByIdApiV1ChatsIdTagsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChatTagsByIdApiV1ChatsIdTagsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetChatTagsByIdApiV1ChatsIdTagsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Chat Tags By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse"/>&gt;</returns>
        public async Task<IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse?> GetChatTagsByIdApiV1ChatsIdTagsGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChatTagsByIdApiV1ChatsIdTagsGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Chat Tags By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse"/>&gt;</returns>
        public async Task<IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse> GetChatTagsByIdApiV1ChatsIdTagsGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChatTagsByIdApiV1ChatsIdTagsGet(id);

                FormatGetChatTagsByIdApiV1ChatsIdTagsGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/tags");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse>();

                        GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChatTagsByIdApiV1ChatsIdTagsGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetChatTagsByIdApiV1ChatsIdTagsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChatTagsByIdApiV1ChatsIdTagsGetDefaultImplementation(e, "/api/v1/chats/{id}/tags", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetChatTagsByIdApiV1ChatsIdTagsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse"/>
        /// </summary>
        public partial class GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetChatTagsByIdApiV1ChatsIdTagsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse(ILogger<GetChatTagsByIdApiV1ChatsIdTagsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<TagModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<TagModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<TagModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(ref string folderId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="folderId"></param>
        /// <returns></returns>
        private void ValidateGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(string folderId)
        {
            if (folderId == null)
                throw new ArgumentNullException(nameof(folderId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        private void AfterGetChatsByFolderIdApiV1ChatsFolderFolderIdGetDefaultImplementation(IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse apiResponseLocalVar, string folderId)
        {
            bool suppressDefaultLog = false;
            AfterGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(ref suppressDefaultLog, apiResponseLocalVar, folderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderId"></param>
        partial void AfterGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(ref bool suppressDefaultLog, IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse apiResponseLocalVar, string folderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        private void OnErrorGetChatsByFolderIdApiV1ChatsFolderFolderIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string folderId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderId"></param>
        partial void OnErrorGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string folderId);

        /// <summary>
        /// Get Chats By Folder Id 
        /// </summary>
        /// <param name="folderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse?> GetChatsByFolderIdApiV1ChatsFolderFolderIdGetOrDefaultAsync(string folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChatsByFolderIdApiV1ChatsFolderFolderIdGetAsync(folderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Chats By Folder Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse> GetChatsByFolderIdApiV1ChatsFolderFolderIdGetAsync(string folderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(folderId);

                FormatGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(ref folderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/folder/{folder_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/folder/{folder_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfolder_id%7D", Uri.EscapeDataString(folderId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse>();

                        GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/folder/{folder_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChatsByFolderIdApiV1ChatsFolderFolderIdGetDefaultImplementation(apiResponseLocalVar, folderId);

                        Events.ExecuteOnGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChatsByFolderIdApiV1ChatsFolderFolderIdGetDefaultImplementation(e, "/api/v1/chats/folder/{folder_id}", uriBuilderLocalVar.Path, folderId);
                Events.ExecuteOnErrorGetChatsByFolderIdApiV1ChatsFolderFolderIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse"/>
        /// </summary>
        public partial class GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse(ILogger<GetChatsByFolderIdApiV1ChatsFolderFolderIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPinnedStatusByIdApiV1ChatsIdPinnedGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetPinnedStatusByIdApiV1ChatsIdPinnedGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetPinnedStatusByIdApiV1ChatsIdPinnedGetDefaultImplementation(IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetPinnedStatusByIdApiV1ChatsIdPinnedGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetPinnedStatusByIdApiV1ChatsIdPinnedGet(ref bool suppressDefaultLog, IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetPinnedStatusByIdApiV1ChatsIdPinnedGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPinnedStatusByIdApiV1ChatsIdPinnedGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetPinnedStatusByIdApiV1ChatsIdPinnedGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Pinned Status By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse"/>&gt;</returns>
        public async Task<IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse?> GetPinnedStatusByIdApiV1ChatsIdPinnedGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPinnedStatusByIdApiV1ChatsIdPinnedGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Pinned Status By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse"/>&gt;</returns>
        public async Task<IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse> GetPinnedStatusByIdApiV1ChatsIdPinnedGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPinnedStatusByIdApiV1ChatsIdPinnedGet(id);

                FormatGetPinnedStatusByIdApiV1ChatsIdPinnedGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/pinned"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/pinned");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse>();

                        GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/pinned", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPinnedStatusByIdApiV1ChatsIdPinnedGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetPinnedStatusByIdApiV1ChatsIdPinnedGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPinnedStatusByIdApiV1ChatsIdPinnedGetDefaultImplementation(e, "/api/v1/chats/{id}/pinned", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetPinnedStatusByIdApiV1ChatsIdPinnedGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse"/>
        /// </summary>
        public partial class GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse(ILogger<GetPinnedStatusByIdApiV1ChatsIdPinnedGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSessionUserChatListApiV1ChatsGet(ref Option<int?> page);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        private void AfterGetSessionUserChatListApiV1ChatsGetDefaultImplementation(IGetSessionUserChatListApiV1ChatsGetApiResponse apiResponseLocalVar, Option<int?> page)
        {
            bool suppressDefaultLog = false;
            AfterGetSessionUserChatListApiV1ChatsGet(ref suppressDefaultLog, apiResponseLocalVar, page);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        partial void AfterGetSessionUserChatListApiV1ChatsGet(ref bool suppressDefaultLog, IGetSessionUserChatListApiV1ChatsGetApiResponse apiResponseLocalVar, Option<int?> page);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        private void OnErrorGetSessionUserChatListApiV1ChatsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> page)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSessionUserChatListApiV1ChatsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        partial void OnErrorGetSessionUserChatListApiV1ChatsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> page);

        /// <summary>
        /// Get Session User Chat List 
        /// </summary>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserChatListApiV1ChatsGetApiResponse"/>&gt;</returns>
        public async Task<IGetSessionUserChatListApiV1ChatsGetApiResponse?> GetSessionUserChatListApiV1ChatsGetOrDefaultAsync(Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSessionUserChatListApiV1ChatsGetAsync(page, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Session User Chat List 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserChatListApiV1ChatsGetApiResponse"/>&gt;</returns>
        public async Task<IGetSessionUserChatListApiV1ChatsGetApiResponse> GetSessionUserChatListApiV1ChatsGetAsync(Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSessionUserChatListApiV1ChatsGet(ref page);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSessionUserChatListApiV1ChatsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSessionUserChatListApiV1ChatsGetApiResponse>();

                        GetSessionUserChatListApiV1ChatsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSessionUserChatListApiV1ChatsGetDefaultImplementation(apiResponseLocalVar, page);

                        Events.ExecuteOnGetSessionUserChatListApiV1ChatsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSessionUserChatListApiV1ChatsGetDefaultImplementation(e, "/api/v1/chats/", uriBuilderLocalVar.Path, page);
                Events.ExecuteOnErrorGetSessionUserChatListApiV1ChatsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSessionUserChatListApiV1ChatsGetApiResponse"/>
        /// </summary>
        public partial class GetSessionUserChatListApiV1ChatsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSessionUserChatListApiV1ChatsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSessionUserChatListApiV1ChatsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSessionUserChatListApiV1ChatsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSessionUserChatListApiV1ChatsGetApiResponse(ILogger<GetSessionUserChatListApiV1ChatsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatTitleIdResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatTitleIdResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatTitleIdResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSessionUserChatListApiV1ChatsListGet(ref Option<int?> page);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        private void AfterGetSessionUserChatListApiV1ChatsListGetDefaultImplementation(IGetSessionUserChatListApiV1ChatsListGetApiResponse apiResponseLocalVar, Option<int?> page)
        {
            bool suppressDefaultLog = false;
            AfterGetSessionUserChatListApiV1ChatsListGet(ref suppressDefaultLog, apiResponseLocalVar, page);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        partial void AfterGetSessionUserChatListApiV1ChatsListGet(ref bool suppressDefaultLog, IGetSessionUserChatListApiV1ChatsListGetApiResponse apiResponseLocalVar, Option<int?> page);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        private void OnErrorGetSessionUserChatListApiV1ChatsListGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> page)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSessionUserChatListApiV1ChatsListGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        partial void OnErrorGetSessionUserChatListApiV1ChatsListGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int?> page);

        /// <summary>
        /// Get Session User Chat List 
        /// </summary>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserChatListApiV1ChatsListGetApiResponse"/>&gt;</returns>
        public async Task<IGetSessionUserChatListApiV1ChatsListGetApiResponse?> GetSessionUserChatListApiV1ChatsListGetOrDefaultAsync(Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSessionUserChatListApiV1ChatsListGetAsync(page, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Session User Chat List 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserChatListApiV1ChatsListGetApiResponse"/>&gt;</returns>
        public async Task<IGetSessionUserChatListApiV1ChatsListGetApiResponse> GetSessionUserChatListApiV1ChatsListGetAsync(Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetSessionUserChatListApiV1ChatsListGet(ref page);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/list"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/list");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSessionUserChatListApiV1ChatsListGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSessionUserChatListApiV1ChatsListGetApiResponse>();

                        GetSessionUserChatListApiV1ChatsListGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/list", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSessionUserChatListApiV1ChatsListGetDefaultImplementation(apiResponseLocalVar, page);

                        Events.ExecuteOnGetSessionUserChatListApiV1ChatsListGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSessionUserChatListApiV1ChatsListGetDefaultImplementation(e, "/api/v1/chats/list", uriBuilderLocalVar.Path, page);
                Events.ExecuteOnErrorGetSessionUserChatListApiV1ChatsListGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSessionUserChatListApiV1ChatsListGetApiResponse"/>
        /// </summary>
        public partial class GetSessionUserChatListApiV1ChatsListGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSessionUserChatListApiV1ChatsListGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSessionUserChatListApiV1ChatsListGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSessionUserChatListApiV1ChatsListGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSessionUserChatListApiV1ChatsListGetApiResponse(ILogger<GetSessionUserChatListApiV1ChatsListGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatTitleIdResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatTitleIdResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatTitleIdResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSharedChatByIdApiV1ChatsShareShareIdGet(ref string shareId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="shareId"></param>
        /// <returns></returns>
        private void ValidateGetSharedChatByIdApiV1ChatsShareShareIdGet(string shareId)
        {
            if (shareId == null)
                throw new ArgumentNullException(nameof(shareId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shareId"></param>
        private void AfterGetSharedChatByIdApiV1ChatsShareShareIdGetDefaultImplementation(IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse apiResponseLocalVar, string shareId)
        {
            bool suppressDefaultLog = false;
            AfterGetSharedChatByIdApiV1ChatsShareShareIdGet(ref suppressDefaultLog, apiResponseLocalVar, shareId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="shareId"></param>
        partial void AfterGetSharedChatByIdApiV1ChatsShareShareIdGet(ref bool suppressDefaultLog, IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse apiResponseLocalVar, string shareId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shareId"></param>
        private void OnErrorGetSharedChatByIdApiV1ChatsShareShareIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shareId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSharedChatByIdApiV1ChatsShareShareIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, shareId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="shareId"></param>
        partial void OnErrorGetSharedChatByIdApiV1ChatsShareShareIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string shareId);

        /// <summary>
        /// Get Shared Chat By Id 
        /// </summary>
        /// <param name="shareId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse?> GetSharedChatByIdApiV1ChatsShareShareIdGetOrDefaultAsync(string shareId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSharedChatByIdApiV1ChatsShareShareIdGetAsync(shareId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Shared Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse> GetSharedChatByIdApiV1ChatsShareShareIdGetAsync(string shareId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSharedChatByIdApiV1ChatsShareShareIdGet(shareId);

                FormatGetSharedChatByIdApiV1ChatsShareShareIdGet(ref shareId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/share/{share_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/share/{share_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bshare_id%7D", Uri.EscapeDataString(shareId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse>();

                        GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/share/{share_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSharedChatByIdApiV1ChatsShareShareIdGetDefaultImplementation(apiResponseLocalVar, shareId);

                        Events.ExecuteOnGetSharedChatByIdApiV1ChatsShareShareIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSharedChatByIdApiV1ChatsShareShareIdGetDefaultImplementation(e, "/api/v1/chats/share/{share_id}", uriBuilderLocalVar.Path, shareId);
                Events.ExecuteOnErrorGetSharedChatByIdApiV1ChatsShareShareIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse"/>
        /// </summary>
        public partial class GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse(ILogger<GetSharedChatByIdApiV1ChatsShareShareIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserArchivedChatsApiV1ChatsAllArchivedGetDefaultImplementation(IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserArchivedChatsApiV1ChatsAllArchivedGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserArchivedChatsApiV1ChatsAllArchivedGet(ref bool suppressDefaultLog, IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserArchivedChatsApiV1ChatsAllArchivedGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserArchivedChatsApiV1ChatsAllArchivedGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserArchivedChatsApiV1ChatsAllArchivedGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get User Archived Chats 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse?> GetUserArchivedChatsApiV1ChatsAllArchivedGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserArchivedChatsApiV1ChatsAllArchivedGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Archived Chats 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse> GetUserArchivedChatsApiV1ChatsAllArchivedGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/all/archived"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/all/archived");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse>();

                        GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/all/archived", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserArchivedChatsApiV1ChatsAllArchivedGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserArchivedChatsApiV1ChatsAllArchivedGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserArchivedChatsApiV1ChatsAllArchivedGetDefaultImplementation(e, "/api/v1/chats/all/archived", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserArchivedChatsApiV1ChatsAllArchivedGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse"/>
        /// </summary>
        public partial class GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse(ILogger<GetUserArchivedChatsApiV1ChatsAllArchivedGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserChatListByTagNameApiV1ChatsTagsPost(TagFilterForm tagFilterForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tagFilterForm"></param>
        /// <returns></returns>
        private void ValidateGetUserChatListByTagNameApiV1ChatsTagsPost(TagFilterForm tagFilterForm)
        {
            if (tagFilterForm == null)
                throw new ArgumentNullException(nameof(tagFilterForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagFilterForm"></param>
        private void AfterGetUserChatListByTagNameApiV1ChatsTagsPostDefaultImplementation(IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse apiResponseLocalVar, TagFilterForm tagFilterForm)
        {
            bool suppressDefaultLog = false;
            AfterGetUserChatListByTagNameApiV1ChatsTagsPost(ref suppressDefaultLog, apiResponseLocalVar, tagFilterForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagFilterForm"></param>
        partial void AfterGetUserChatListByTagNameApiV1ChatsTagsPost(ref bool suppressDefaultLog, IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse apiResponseLocalVar, TagFilterForm tagFilterForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tagFilterForm"></param>
        private void OnErrorGetUserChatListByTagNameApiV1ChatsTagsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TagFilterForm tagFilterForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserChatListByTagNameApiV1ChatsTagsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, tagFilterForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="tagFilterForm"></param>
        partial void OnErrorGetUserChatListByTagNameApiV1ChatsTagsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TagFilterForm tagFilterForm);

        /// <summary>
        /// Get User Chat List By Tag Name 
        /// </summary>
        /// <param name="tagFilterForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse"/>&gt;</returns>
        public async Task<IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse?> GetUserChatListByTagNameApiV1ChatsTagsPostOrDefaultAsync(TagFilterForm tagFilterForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserChatListByTagNameApiV1ChatsTagsPostAsync(tagFilterForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Chat List By Tag Name 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagFilterForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse"/>&gt;</returns>
        public async Task<IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse> GetUserChatListByTagNameApiV1ChatsTagsPostAsync(TagFilterForm tagFilterForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserChatListByTagNameApiV1ChatsTagsPost(tagFilterForm);

                FormatGetUserChatListByTagNameApiV1ChatsTagsPost(tagFilterForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/tags"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/tags");

                    httpRequestMessageLocalVar.Content = (tagFilterForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(tagFilterForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse>();

                        GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserChatListByTagNameApiV1ChatsTagsPostDefaultImplementation(apiResponseLocalVar, tagFilterForm);

                        Events.ExecuteOnGetUserChatListByTagNameApiV1ChatsTagsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserChatListByTagNameApiV1ChatsTagsPostDefaultImplementation(e, "/api/v1/chats/tags", uriBuilderLocalVar.Path, tagFilterForm);
                Events.ExecuteOnErrorGetUserChatListByTagNameApiV1ChatsTagsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse"/>
        /// </summary>
        public partial class GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserChatListByTagNameApiV1ChatsTagsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse(ILogger<GetUserChatListByTagNameApiV1ChatsTagsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatTitleIdResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatTitleIdResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatTitleIdResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(ref string userId, ref Option<int?> page, ref Option<string?> query, ref Option<string?> orderBy, ref Option<string?> direction);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        private void ValidateGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(string userId)
        {
            if (userId == null)
                throw new ArgumentNullException(nameof(userId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="page"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        private void AfterGetUserChatListByUserIdApiV1ChatsListUserUserIdGetDefaultImplementation(IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse apiResponseLocalVar, string userId, Option<int?> page, Option<string?> query, Option<string?> orderBy, Option<string?> direction)
        {
            bool suppressDefaultLog = false;
            AfterGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(ref suppressDefaultLog, apiResponseLocalVar, userId, page, query, orderBy, direction);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="page"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        partial void AfterGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(ref bool suppressDefaultLog, IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse apiResponseLocalVar, string userId, Option<int?> page, Option<string?> query, Option<string?> orderBy, Option<string?> direction);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="page"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        private void OnErrorGetUserChatListByUserIdApiV1ChatsListUserUserIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId, Option<int?> page, Option<string?> query, Option<string?> orderBy, Option<string?> direction)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, userId, page, query, orderBy, direction);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="userId"></param>
        /// <param name="page"></param>
        /// <param name="query"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        partial void OnErrorGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string userId, Option<int?> page, Option<string?> query, Option<string?> orderBy, Option<string?> direction);

        /// <summary>
        /// Get User Chat List By User Id 
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse?> GetUserChatListByUserIdApiV1ChatsListUserUserIdGetOrDefaultAsync(string userId, Option<int?> page = default, Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserChatListByUserIdApiV1ChatsListUserUserIdGetAsync(userId, page, query, orderBy, direction, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Chat List By User Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="query"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse> GetUserChatListByUserIdApiV1ChatsListUserUserIdGetAsync(string userId, Option<int?> page = default, Option<string?> query = default, Option<string?> orderBy = default, Option<string?> direction = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(userId);

                FormatGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(ref userId, ref page, ref query, ref orderBy, ref direction);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/list/user/{user_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/list/user/{user_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser_id%7D", Uri.EscapeDataString(userId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (query.IsSet)
                        parseQueryStringLocalVar["query"] = ClientUtils.ParameterToString(query.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (direction.IsSet)
                        parseQueryStringLocalVar["direction"] = ClientUtils.ParameterToString(direction.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse>();

                        GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/list/user/{user_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserChatListByUserIdApiV1ChatsListUserUserIdGetDefaultImplementation(apiResponseLocalVar, userId, page, query, orderBy, direction);

                        Events.ExecuteOnGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserChatListByUserIdApiV1ChatsListUserUserIdGetDefaultImplementation(e, "/api/v1/chats/list/user/{user_id}", uriBuilderLocalVar.Path, userId, page, query, orderBy, direction);
                Events.ExecuteOnErrorGetUserChatListByUserIdApiV1ChatsListUserUserIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse"/>
        /// </summary>
        public partial class GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse(ILogger<GetUserChatListByUserIdApiV1ChatsListUserUserIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatTitleIdResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatTitleIdResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatTitleIdResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserChatsApiV1ChatsAllGetDefaultImplementation(IGetUserChatsApiV1ChatsAllGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserChatsApiV1ChatsAllGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserChatsApiV1ChatsAllGet(ref bool suppressDefaultLog, IGetUserChatsApiV1ChatsAllGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserChatsApiV1ChatsAllGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserChatsApiV1ChatsAllGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserChatsApiV1ChatsAllGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get User Chats 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatsApiV1ChatsAllGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserChatsApiV1ChatsAllGetApiResponse?> GetUserChatsApiV1ChatsAllGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserChatsApiV1ChatsAllGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Chats 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserChatsApiV1ChatsAllGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserChatsApiV1ChatsAllGetApiResponse> GetUserChatsApiV1ChatsAllGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/all");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserChatsApiV1ChatsAllGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserChatsApiV1ChatsAllGetApiResponse>();

                        GetUserChatsApiV1ChatsAllGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserChatsApiV1ChatsAllGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserChatsApiV1ChatsAllGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserChatsApiV1ChatsAllGetDefaultImplementation(e, "/api/v1/chats/all", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserChatsApiV1ChatsAllGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserChatsApiV1ChatsAllGetApiResponse"/>
        /// </summary>
        public partial class GetUserChatsApiV1ChatsAllGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserChatsApiV1ChatsAllGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserChatsApiV1ChatsAllGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserChatsApiV1ChatsAllGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserChatsApiV1ChatsAllGetApiResponse(ILogger<GetUserChatsApiV1ChatsAllGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserPinnedChatsApiV1ChatsPinnedGetDefaultImplementation(IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserPinnedChatsApiV1ChatsPinnedGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserPinnedChatsApiV1ChatsPinnedGet(ref bool suppressDefaultLog, IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUserPinnedChatsApiV1ChatsPinnedGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserPinnedChatsApiV1ChatsPinnedGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUserPinnedChatsApiV1ChatsPinnedGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get User Pinned Chats 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse?> GetUserPinnedChatsApiV1ChatsPinnedGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserPinnedChatsApiV1ChatsPinnedGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User Pinned Chats 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse"/>&gt;</returns>
        public async Task<IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse> GetUserPinnedChatsApiV1ChatsPinnedGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/pinned"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/pinned");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse>();

                        GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/pinned", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserPinnedChatsApiV1ChatsPinnedGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserPinnedChatsApiV1ChatsPinnedGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserPinnedChatsApiV1ChatsPinnedGetDefaultImplementation(e, "/api/v1/chats/pinned", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserPinnedChatsApiV1ChatsPinnedGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse"/>
        /// </summary>
        public partial class GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserPinnedChatsApiV1ChatsPinnedGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse(ILogger<GetUserPinnedChatsApiV1ChatsPinnedGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatTitleIdResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatTitleIdResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatTitleIdResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatImportChatApiV1ChatsImportPost(ChatImportForm chatImportForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="chatImportForm"></param>
        /// <returns></returns>
        private void ValidateImportChatApiV1ChatsImportPost(ChatImportForm chatImportForm)
        {
            if (chatImportForm == null)
                throw new ArgumentNullException(nameof(chatImportForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatImportForm"></param>
        private void AfterImportChatApiV1ChatsImportPostDefaultImplementation(IImportChatApiV1ChatsImportPostApiResponse apiResponseLocalVar, ChatImportForm chatImportForm)
        {
            bool suppressDefaultLog = false;
            AfterImportChatApiV1ChatsImportPost(ref suppressDefaultLog, apiResponseLocalVar, chatImportForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatImportForm"></param>
        partial void AfterImportChatApiV1ChatsImportPost(ref bool suppressDefaultLog, IImportChatApiV1ChatsImportPostApiResponse apiResponseLocalVar, ChatImportForm chatImportForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatImportForm"></param>
        private void OnErrorImportChatApiV1ChatsImportPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ChatImportForm chatImportForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorImportChatApiV1ChatsImportPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, chatImportForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatImportForm"></param>
        partial void OnErrorImportChatApiV1ChatsImportPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ChatImportForm chatImportForm);

        /// <summary>
        /// Import Chat 
        /// </summary>
        /// <param name="chatImportForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportChatApiV1ChatsImportPostApiResponse"/>&gt;</returns>
        public async Task<IImportChatApiV1ChatsImportPostApiResponse?> ImportChatApiV1ChatsImportPostOrDefaultAsync(ChatImportForm chatImportForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ImportChatApiV1ChatsImportPostAsync(chatImportForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Import Chat 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatImportForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IImportChatApiV1ChatsImportPostApiResponse"/>&gt;</returns>
        public async Task<IImportChatApiV1ChatsImportPostApiResponse> ImportChatApiV1ChatsImportPostAsync(ChatImportForm chatImportForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateImportChatApiV1ChatsImportPost(chatImportForm);

                FormatImportChatApiV1ChatsImportPost(chatImportForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/import"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/import");

                    httpRequestMessageLocalVar.Content = (chatImportForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(chatImportForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ImportChatApiV1ChatsImportPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ImportChatApiV1ChatsImportPostApiResponse>();

                        ImportChatApiV1ChatsImportPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/import", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterImportChatApiV1ChatsImportPostDefaultImplementation(apiResponseLocalVar, chatImportForm);

                        Events.ExecuteOnImportChatApiV1ChatsImportPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorImportChatApiV1ChatsImportPostDefaultImplementation(e, "/api/v1/chats/import", uriBuilderLocalVar.Path, chatImportForm);
                Events.ExecuteOnErrorImportChatApiV1ChatsImportPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ImportChatApiV1ChatsImportPostApiResponse"/>
        /// </summary>
        public partial class ImportChatApiV1ChatsImportPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IImportChatApiV1ChatsImportPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ImportChatApiV1ChatsImportPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ImportChatApiV1ChatsImportPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ImportChatApiV1ChatsImportPostApiResponse(ILogger<ImportChatApiV1ChatsImportPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPinChatByIdApiV1ChatsIdPinPost(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidatePinChatByIdApiV1ChatsIdPinPost(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterPinChatByIdApiV1ChatsIdPinPostDefaultImplementation(IPinChatByIdApiV1ChatsIdPinPostApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterPinChatByIdApiV1ChatsIdPinPost(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterPinChatByIdApiV1ChatsIdPinPost(ref bool suppressDefaultLog, IPinChatByIdApiV1ChatsIdPinPostApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorPinChatByIdApiV1ChatsIdPinPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPinChatByIdApiV1ChatsIdPinPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorPinChatByIdApiV1ChatsIdPinPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Pin Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPinChatByIdApiV1ChatsIdPinPostApiResponse"/>&gt;</returns>
        public async Task<IPinChatByIdApiV1ChatsIdPinPostApiResponse?> PinChatByIdApiV1ChatsIdPinPostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PinChatByIdApiV1ChatsIdPinPostAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Pin Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPinChatByIdApiV1ChatsIdPinPostApiResponse"/>&gt;</returns>
        public async Task<IPinChatByIdApiV1ChatsIdPinPostApiResponse> PinChatByIdApiV1ChatsIdPinPostAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePinChatByIdApiV1ChatsIdPinPost(id);

                FormatPinChatByIdApiV1ChatsIdPinPost(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/pin"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/pin");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PinChatByIdApiV1ChatsIdPinPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PinChatByIdApiV1ChatsIdPinPostApiResponse>();

                        PinChatByIdApiV1ChatsIdPinPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/pin", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPinChatByIdApiV1ChatsIdPinPostDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnPinChatByIdApiV1ChatsIdPinPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPinChatByIdApiV1ChatsIdPinPostDefaultImplementation(e, "/api/v1/chats/{id}/pin", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorPinChatByIdApiV1ChatsIdPinPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PinChatByIdApiV1ChatsIdPinPostApiResponse"/>
        /// </summary>
        public partial class PinChatByIdApiV1ChatsIdPinPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IPinChatByIdApiV1ChatsIdPinPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PinChatByIdApiV1ChatsIdPinPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PinChatByIdApiV1ChatsIdPinPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PinChatByIdApiV1ChatsIdPinPostApiResponse(ILogger<PinChatByIdApiV1ChatsIdPinPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSearchUserChatsApiV1ChatsSearchGet(ref string text, ref Option<int?> page);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="text"></param>
        /// <returns></returns>
        private void ValidateSearchUserChatsApiV1ChatsSearchGet(string text)
        {
            if (text == null)
                throw new ArgumentNullException(nameof(text));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="text"></param>
        /// <param name="page"></param>
        private void AfterSearchUserChatsApiV1ChatsSearchGetDefaultImplementation(ISearchUserChatsApiV1ChatsSearchGetApiResponse apiResponseLocalVar, string text, Option<int?> page)
        {
            bool suppressDefaultLog = false;
            AfterSearchUserChatsApiV1ChatsSearchGet(ref suppressDefaultLog, apiResponseLocalVar, text, page);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="text"></param>
        /// <param name="page"></param>
        partial void AfterSearchUserChatsApiV1ChatsSearchGet(ref bool suppressDefaultLog, ISearchUserChatsApiV1ChatsSearchGetApiResponse apiResponseLocalVar, string text, Option<int?> page);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="text"></param>
        /// <param name="page"></param>
        private void OnErrorSearchUserChatsApiV1ChatsSearchGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string text, Option<int?> page)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSearchUserChatsApiV1ChatsSearchGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, text, page);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="text"></param>
        /// <param name="page"></param>
        partial void OnErrorSearchUserChatsApiV1ChatsSearchGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string text, Option<int?> page);

        /// <summary>
        /// Search User Chats 
        /// </summary>
        /// <param name="text"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchUserChatsApiV1ChatsSearchGetApiResponse"/>&gt;</returns>
        public async Task<ISearchUserChatsApiV1ChatsSearchGetApiResponse?> SearchUserChatsApiV1ChatsSearchGetOrDefaultAsync(string text, Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SearchUserChatsApiV1ChatsSearchGetAsync(text, page, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Search User Chats 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="text"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchUserChatsApiV1ChatsSearchGetApiResponse"/>&gt;</returns>
        public async Task<ISearchUserChatsApiV1ChatsSearchGetApiResponse> SearchUserChatsApiV1ChatsSearchGetAsync(string text, Option<int?> page = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSearchUserChatsApiV1ChatsSearchGet(text);

                FormatSearchUserChatsApiV1ChatsSearchGet(ref text, ref page);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/search"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/search");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["text"] = ClientUtils.ParameterToString(text);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SearchUserChatsApiV1ChatsSearchGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SearchUserChatsApiV1ChatsSearchGetApiResponse>();

                        SearchUserChatsApiV1ChatsSearchGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/search", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSearchUserChatsApiV1ChatsSearchGetDefaultImplementation(apiResponseLocalVar, text, page);

                        Events.ExecuteOnSearchUserChatsApiV1ChatsSearchGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSearchUserChatsApiV1ChatsSearchGetDefaultImplementation(e, "/api/v1/chats/search", uriBuilderLocalVar.Path, text, page);
                Events.ExecuteOnErrorSearchUserChatsApiV1ChatsSearchGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SearchUserChatsApiV1ChatsSearchGetApiResponse"/>
        /// </summary>
        public partial class SearchUserChatsApiV1ChatsSearchGetApiResponse : Org.OpenAPITools.Client.ApiResponse, ISearchUserChatsApiV1ChatsSearchGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SearchUserChatsApiV1ChatsSearchGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SearchUserChatsApiV1ChatsSearchGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SearchUserChatsApiV1ChatsSearchGetApiResponse(ILogger<SearchUserChatsApiV1ChatsSearchGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChatTitleIdResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChatTitleIdResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChatTitleIdResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(ref string id, ref string messageId, EventForm eventForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        /// <returns></returns>
        private void ValidateSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(string id, string messageId, EventForm eventForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (messageId == null)
                throw new ArgumentNullException(nameof(messageId));

            if (eventForm == null)
                throw new ArgumentNullException(nameof(eventForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        private void AfterSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostDefaultImplementation(ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse apiResponseLocalVar, string id, string messageId, EventForm eventForm)
        {
            bool suppressDefaultLog = false;
            AfterSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(ref suppressDefaultLog, apiResponseLocalVar, id, messageId, eventForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        partial void AfterSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(ref bool suppressDefaultLog, ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse apiResponseLocalVar, string id, string messageId, EventForm eventForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        private void OnErrorSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, EventForm eventForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, messageId, eventForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        partial void OnErrorSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, EventForm eventForm);

        /// <summary>
        /// Send Chat Message Event By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse"/>&gt;</returns>
        public async Task<ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse?> SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostOrDefaultAsync(string id, string messageId, EventForm eventForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostAsync(id, messageId, eventForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Send Chat Message Event By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="eventForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse"/>&gt;</returns>
        public async Task<ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse> SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostAsync(string id, string messageId, EventForm eventForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(id, messageId, eventForm);

                FormatSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(ref id, ref messageId, eventForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/messages/{message_id}/event"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/messages/{message_id}/event");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmessage_id%7D", Uri.EscapeDataString(messageId.ToString()));

                    httpRequestMessageLocalVar.Content = (eventForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(eventForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse>();

                        SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/messages/{message_id}/event", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostDefaultImplementation(apiResponseLocalVar, id, messageId, eventForm);

                        Events.ExecuteOnSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostDefaultImplementation(e, "/api/v1/chats/{id}/messages/{message_id}/event", uriBuilderLocalVar.Path, id, messageId, eventForm);
                Events.ExecuteOnErrorSendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse"/>
        /// </summary>
        public partial class SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse(ILogger<SendChatMessageEventByIdApiV1ChatsIdMessagesMessageIdEventPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatShareChatByIdApiV1ChatsIdSharePost(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateShareChatByIdApiV1ChatsIdSharePost(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterShareChatByIdApiV1ChatsIdSharePostDefaultImplementation(IShareChatByIdApiV1ChatsIdSharePostApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterShareChatByIdApiV1ChatsIdSharePost(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterShareChatByIdApiV1ChatsIdSharePost(ref bool suppressDefaultLog, IShareChatByIdApiV1ChatsIdSharePostApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorShareChatByIdApiV1ChatsIdSharePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorShareChatByIdApiV1ChatsIdSharePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorShareChatByIdApiV1ChatsIdSharePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Share Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShareChatByIdApiV1ChatsIdSharePostApiResponse"/>&gt;</returns>
        public async Task<IShareChatByIdApiV1ChatsIdSharePostApiResponse?> ShareChatByIdApiV1ChatsIdSharePostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ShareChatByIdApiV1ChatsIdSharePostAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Share Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IShareChatByIdApiV1ChatsIdSharePostApiResponse"/>&gt;</returns>
        public async Task<IShareChatByIdApiV1ChatsIdSharePostApiResponse> ShareChatByIdApiV1ChatsIdSharePostAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateShareChatByIdApiV1ChatsIdSharePost(id);

                FormatShareChatByIdApiV1ChatsIdSharePost(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/share"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/share");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ShareChatByIdApiV1ChatsIdSharePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ShareChatByIdApiV1ChatsIdSharePostApiResponse>();

                        ShareChatByIdApiV1ChatsIdSharePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/share", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterShareChatByIdApiV1ChatsIdSharePostDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnShareChatByIdApiV1ChatsIdSharePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorShareChatByIdApiV1ChatsIdSharePostDefaultImplementation(e, "/api/v1/chats/{id}/share", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorShareChatByIdApiV1ChatsIdSharePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ShareChatByIdApiV1ChatsIdSharePostApiResponse"/>
        /// </summary>
        public partial class ShareChatByIdApiV1ChatsIdSharePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IShareChatByIdApiV1ChatsIdSharePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ShareChatByIdApiV1ChatsIdSharePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ShareChatByIdApiV1ChatsIdSharePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ShareChatByIdApiV1ChatsIdSharePostApiResponse(ILogger<ShareChatByIdApiV1ChatsIdSharePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateChatByIdApiV1ChatsIdPost(ref string id, ChatForm chatForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        /// <returns></returns>
        private void ValidateUpdateChatByIdApiV1ChatsIdPost(string id, ChatForm chatForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (chatForm == null)
                throw new ArgumentNullException(nameof(chatForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        private void AfterUpdateChatByIdApiV1ChatsIdPostDefaultImplementation(IUpdateChatByIdApiV1ChatsIdPostApiResponse apiResponseLocalVar, string id, ChatForm chatForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateChatByIdApiV1ChatsIdPost(ref suppressDefaultLog, apiResponseLocalVar, id, chatForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        partial void AfterUpdateChatByIdApiV1ChatsIdPost(ref bool suppressDefaultLog, IUpdateChatByIdApiV1ChatsIdPostApiResponse apiResponseLocalVar, string id, ChatForm chatForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        private void OnErrorUpdateChatByIdApiV1ChatsIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ChatForm chatForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateChatByIdApiV1ChatsIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, chatForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        partial void OnErrorUpdateChatByIdApiV1ChatsIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ChatForm chatForm);

        /// <summary>
        /// Update Chat By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatByIdApiV1ChatsIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateChatByIdApiV1ChatsIdPostApiResponse?> UpdateChatByIdApiV1ChatsIdPostOrDefaultAsync(string id, ChatForm chatForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateChatByIdApiV1ChatsIdPostAsync(id, chatForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Chat By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="chatForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatByIdApiV1ChatsIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateChatByIdApiV1ChatsIdPostApiResponse> UpdateChatByIdApiV1ChatsIdPostAsync(string id, ChatForm chatForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateChatByIdApiV1ChatsIdPost(id, chatForm);

                FormatUpdateChatByIdApiV1ChatsIdPost(ref id, chatForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (chatForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(chatForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateChatByIdApiV1ChatsIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateChatByIdApiV1ChatsIdPostApiResponse>();

                        UpdateChatByIdApiV1ChatsIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateChatByIdApiV1ChatsIdPostDefaultImplementation(apiResponseLocalVar, id, chatForm);

                        Events.ExecuteOnUpdateChatByIdApiV1ChatsIdPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateChatByIdApiV1ChatsIdPostDefaultImplementation(e, "/api/v1/chats/{id}", uriBuilderLocalVar.Path, id, chatForm);
                Events.ExecuteOnErrorUpdateChatByIdApiV1ChatsIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateChatByIdApiV1ChatsIdPostApiResponse"/>
        /// </summary>
        public partial class UpdateChatByIdApiV1ChatsIdPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateChatByIdApiV1ChatsIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateChatByIdApiV1ChatsIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateChatByIdApiV1ChatsIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateChatByIdApiV1ChatsIdPostApiResponse(ILogger<UpdateChatByIdApiV1ChatsIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(ref string id, ChatFolderIdForm chatFolderIdForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        /// <returns></returns>
        private void ValidateUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(string id, ChatFolderIdForm chatFolderIdForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (chatFolderIdForm == null)
                throw new ArgumentNullException(nameof(chatFolderIdForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        private void AfterUpdateChatFolderIdByIdApiV1ChatsIdFolderPostDefaultImplementation(IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse apiResponseLocalVar, string id, ChatFolderIdForm chatFolderIdForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(ref suppressDefaultLog, apiResponseLocalVar, id, chatFolderIdForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        partial void AfterUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(ref bool suppressDefaultLog, IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse apiResponseLocalVar, string id, ChatFolderIdForm chatFolderIdForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        private void OnErrorUpdateChatFolderIdByIdApiV1ChatsIdFolderPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ChatFolderIdForm chatFolderIdForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, chatFolderIdForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        partial void OnErrorUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ChatFolderIdForm chatFolderIdForm);

        /// <summary>
        /// Update Chat Folder Id By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse?> UpdateChatFolderIdByIdApiV1ChatsIdFolderPostOrDefaultAsync(string id, ChatFolderIdForm chatFolderIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateChatFolderIdByIdApiV1ChatsIdFolderPostAsync(id, chatFolderIdForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Chat Folder Id By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="chatFolderIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse> UpdateChatFolderIdByIdApiV1ChatsIdFolderPostAsync(string id, ChatFolderIdForm chatFolderIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(id, chatFolderIdForm);

                FormatUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(ref id, chatFolderIdForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/folder"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/folder");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (chatFolderIdForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(chatFolderIdForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse>();

                        UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/folder", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateChatFolderIdByIdApiV1ChatsIdFolderPostDefaultImplementation(apiResponseLocalVar, id, chatFolderIdForm);

                        Events.ExecuteOnUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateChatFolderIdByIdApiV1ChatsIdFolderPostDefaultImplementation(e, "/api/v1/chats/{id}/folder", uriBuilderLocalVar.Path, id, chatFolderIdForm);
                Events.ExecuteOnErrorUpdateChatFolderIdByIdApiV1ChatsIdFolderPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse"/>
        /// </summary>
        public partial class UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse(ILogger<UpdateChatFolderIdByIdApiV1ChatsIdFolderPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(ref string id, ref string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        /// <returns></returns>
        private void ValidateUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (messageId == null)
                throw new ArgumentNullException(nameof(messageId));

            if (openWebuiRoutersChatsMessageForm == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersChatsMessageForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        private void AfterUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostDefaultImplementation(IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse apiResponseLocalVar, string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(ref suppressDefaultLog, apiResponseLocalVar, id, messageId, openWebuiRoutersChatsMessageForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        partial void AfterUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(ref bool suppressDefaultLog, IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse apiResponseLocalVar, string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        private void OnErrorUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, messageId, openWebuiRoutersChatsMessageForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        partial void OnErrorUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm);

        /// <summary>
        /// Update Chat Message By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse?> UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostOrDefaultAsync(string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostAsync(id, messageId, openWebuiRoutersChatsMessageForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Chat Message By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiRoutersChatsMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse> UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostAsync(string id, string messageId, OpenWebuiRoutersChatsMessageForm openWebuiRoutersChatsMessageForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(id, messageId, openWebuiRoutersChatsMessageForm);

                FormatUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(ref id, ref messageId, openWebuiRoutersChatsMessageForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/chats/{id}/messages/{message_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/chats/{id}/messages/{message_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmessage_id%7D", Uri.EscapeDataString(messageId.ToString()));

                    httpRequestMessageLocalVar.Content = (openWebuiRoutersChatsMessageForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(openWebuiRoutersChatsMessageForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse>();

                        UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/chats/{id}/messages/{message_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostDefaultImplementation(apiResponseLocalVar, id, messageId, openWebuiRoutersChatsMessageForm);

                        Events.ExecuteOnUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostDefaultImplementation(e, "/api/v1/chats/{id}/messages/{message_id}", uriBuilderLocalVar.Path, id, messageId, openWebuiRoutersChatsMessageForm);
                Events.ExecuteOnErrorUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse"/>
        /// </summary>
        public partial class UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse(ILogger<UpdateChatMessageByIdApiV1ChatsIdMessagesMessageIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChatResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChatResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChatResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
