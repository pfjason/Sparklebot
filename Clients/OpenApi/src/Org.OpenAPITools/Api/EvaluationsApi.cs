// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEvaluationsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EvaluationsApiEvents Events { get; }

        /// <summary>
        /// Create Feedback
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse"/>&gt;</returns>
        Task<ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse> CreateFeedbackApiV1EvaluationsFeedbackPostAsync(FeedbackForm feedbackForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Feedback
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="feedbackForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse"/>?&gt;</returns>
        Task<ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse?> CreateFeedbackApiV1EvaluationsFeedbackPostOrDefaultAsync(FeedbackForm feedbackForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete All Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse> DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete All Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse?> DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Feedback By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse> DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Feedback By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse?> DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse> DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse?> DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse"/>&gt;</returns>
        Task<IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse> GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse"/>?&gt;</returns>
        Task<IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse?> GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse"/>&gt;</returns>
        Task<IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse> GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get All Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse"/>?&gt;</returns>
        Task<IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse?> GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigApiV1EvaluationsConfigGetApiResponse"/>&gt;</returns>
        Task<IGetConfigApiV1EvaluationsConfigGetApiResponse> GetConfigApiV1EvaluationsConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigApiV1EvaluationsConfigGetApiResponse"/>?&gt;</returns>
        Task<IGetConfigApiV1EvaluationsConfigGetApiResponse?> GetConfigApiV1EvaluationsConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Feedback By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse"/>&gt;</returns>
        Task<IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse> GetFeedbackByIdApiV1EvaluationsFeedbackIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Feedback By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse"/>?&gt;</returns>
        Task<IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse?> GetFeedbackByIdApiV1EvaluationsFeedbackIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse"/>&gt;</returns>
        Task<IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse> GetFeedbacksApiV1EvaluationsFeedbacksUserGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Feedbacks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse"/>?&gt;</returns>
        Task<IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse?> GetFeedbacksApiV1EvaluationsFeedbacksUserGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigApiV1EvaluationsConfigPostApiResponse"/>&gt;</returns>
        Task<IUpdateConfigApiV1EvaluationsConfigPostApiResponse> UpdateConfigApiV1EvaluationsConfigPostAsync(UpdateConfigForm updateConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="updateConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigApiV1EvaluationsConfigPostApiResponse"/>?&gt;</returns>
        Task<IUpdateConfigApiV1EvaluationsConfigPostApiResponse?> UpdateConfigApiV1EvaluationsConfigPostOrDefaultAsync(UpdateConfigForm updateConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Feedback By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse"/>&gt;</returns>
        Task<IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse> UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostAsync(string id, FeedbackForm feedbackForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Feedback By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse"/>?&gt;</returns>
        Task<IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse?> UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostOrDefaultAsync(string id, FeedbackForm feedbackForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse"/>
    /// </summary>
    public interface ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FeedbackModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse"/>
    /// </summary>
    public interface IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<FeedbackModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse"/>
    /// </summary>
    public interface IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<FeedbackUserResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConfigApiV1EvaluationsConfigGetApiResponse"/>
    /// </summary>
    public interface IGetConfigApiV1EvaluationsConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse"/>
    /// </summary>
    public interface IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FeedbackModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse"/>
    /// </summary>
    public interface IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<FeedbackUserResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateConfigApiV1EvaluationsConfigPostApiResponse"/>
    /// </summary>
    public interface IUpdateConfigApiV1EvaluationsConfigPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse"/>
    /// </summary>
    public interface IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FeedbackModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EvaluationsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateFeedbackApiV1EvaluationsFeedbackPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateFeedbackApiV1EvaluationsFeedbackPost;

        internal void ExecuteOnCreateFeedbackApiV1EvaluationsFeedbackPost(EvaluationsApi.CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse apiResponse)
        {
            OnCreateFeedbackApiV1EvaluationsFeedbackPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateFeedbackApiV1EvaluationsFeedbackPost(Exception exception)
        {
            OnErrorCreateFeedbackApiV1EvaluationsFeedbackPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete;

        internal void ExecuteOnDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(EvaluationsApi.DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse apiResponse)
        {
            OnDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(Exception exception)
        {
            OnErrorDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete;

        internal void ExecuteOnDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(EvaluationsApi.DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse apiResponse)
        {
            OnDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(Exception exception)
        {
            OnErrorDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFeedbacksApiV1EvaluationsFeedbacksDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFeedbacksApiV1EvaluationsFeedbacksDelete;

        internal void ExecuteOnDeleteFeedbacksApiV1EvaluationsFeedbacksDelete(EvaluationsApi.DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse apiResponse)
        {
            OnDeleteFeedbacksApiV1EvaluationsFeedbacksDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFeedbacksApiV1EvaluationsFeedbacksDelete(Exception exception)
        {
            OnErrorDeleteFeedbacksApiV1EvaluationsFeedbacksDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet;

        internal void ExecuteOnGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(EvaluationsApi.GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse apiResponse)
        {
            OnGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(Exception exception)
        {
            OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet;

        internal void ExecuteOnGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(EvaluationsApi.GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse apiResponse)
        {
            OnGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(Exception exception)
        {
            OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetConfigApiV1EvaluationsConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetConfigApiV1EvaluationsConfigGet;

        internal void ExecuteOnGetConfigApiV1EvaluationsConfigGet(EvaluationsApi.GetConfigApiV1EvaluationsConfigGetApiResponse apiResponse)
        {
            OnGetConfigApiV1EvaluationsConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConfigApiV1EvaluationsConfigGet(Exception exception)
        {
            OnErrorGetConfigApiV1EvaluationsConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFeedbackByIdApiV1EvaluationsFeedbackIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFeedbackByIdApiV1EvaluationsFeedbackIdGet;

        internal void ExecuteOnGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(EvaluationsApi.GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse apiResponse)
        {
            OnGetFeedbackByIdApiV1EvaluationsFeedbackIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(Exception exception)
        {
            OnErrorGetFeedbackByIdApiV1EvaluationsFeedbackIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFeedbacksApiV1EvaluationsFeedbacksUserGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFeedbacksApiV1EvaluationsFeedbacksUserGet;

        internal void ExecuteOnGetFeedbacksApiV1EvaluationsFeedbacksUserGet(EvaluationsApi.GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse apiResponse)
        {
            OnGetFeedbacksApiV1EvaluationsFeedbacksUserGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFeedbacksApiV1EvaluationsFeedbacksUserGet(Exception exception)
        {
            OnErrorGetFeedbacksApiV1EvaluationsFeedbacksUserGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateConfigApiV1EvaluationsConfigPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateConfigApiV1EvaluationsConfigPost;

        internal void ExecuteOnUpdateConfigApiV1EvaluationsConfigPost(EvaluationsApi.UpdateConfigApiV1EvaluationsConfigPostApiResponse apiResponse)
        {
            OnUpdateConfigApiV1EvaluationsConfigPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateConfigApiV1EvaluationsConfigPost(Exception exception)
        {
            OnErrorUpdateConfigApiV1EvaluationsConfigPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost;

        internal void ExecuteOnUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(EvaluationsApi.UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse apiResponse)
        {
            OnUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(Exception exception)
        {
            OnErrorUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EvaluationsApi : IEvaluationsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EvaluationsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EvaluationsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EvaluationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EvaluationsApi(ILogger<EvaluationsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EvaluationsApiEvents evaluationsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EvaluationsApi>();
            HttpClient = httpClient;
            Events = evaluationsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateFeedbackApiV1EvaluationsFeedbackPost(FeedbackForm feedbackForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="feedbackForm"></param>
        /// <returns></returns>
        private void ValidateCreateFeedbackApiV1EvaluationsFeedbackPost(FeedbackForm feedbackForm)
        {
            if (feedbackForm == null)
                throw new ArgumentNullException(nameof(feedbackForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="feedbackForm"></param>
        private void AfterCreateFeedbackApiV1EvaluationsFeedbackPostDefaultImplementation(ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse apiResponseLocalVar, FeedbackForm feedbackForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateFeedbackApiV1EvaluationsFeedbackPost(ref suppressDefaultLog, apiResponseLocalVar, feedbackForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="feedbackForm"></param>
        partial void AfterCreateFeedbackApiV1EvaluationsFeedbackPost(ref bool suppressDefaultLog, ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse apiResponseLocalVar, FeedbackForm feedbackForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="feedbackForm"></param>
        private void OnErrorCreateFeedbackApiV1EvaluationsFeedbackPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FeedbackForm feedbackForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateFeedbackApiV1EvaluationsFeedbackPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, feedbackForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="feedbackForm"></param>
        partial void OnErrorCreateFeedbackApiV1EvaluationsFeedbackPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FeedbackForm feedbackForm);

        /// <summary>
        /// Create Feedback 
        /// </summary>
        /// <param name="feedbackForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse"/>&gt;</returns>
        public async Task<ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse?> CreateFeedbackApiV1EvaluationsFeedbackPostOrDefaultAsync(FeedbackForm feedbackForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateFeedbackApiV1EvaluationsFeedbackPostAsync(feedbackForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Feedback 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse"/>&gt;</returns>
        public async Task<ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse> CreateFeedbackApiV1EvaluationsFeedbackPostAsync(FeedbackForm feedbackForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateFeedbackApiV1EvaluationsFeedbackPost(feedbackForm);

                FormatCreateFeedbackApiV1EvaluationsFeedbackPost(feedbackForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedback"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedback");

                    httpRequestMessageLocalVar.Content = (feedbackForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(feedbackForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse>();

                        CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedback", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateFeedbackApiV1EvaluationsFeedbackPostDefaultImplementation(apiResponseLocalVar, feedbackForm);

                        Events.ExecuteOnCreateFeedbackApiV1EvaluationsFeedbackPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateFeedbackApiV1EvaluationsFeedbackPostDefaultImplementation(e, "/api/v1/evaluations/feedback", uriBuilderLocalVar.Path, feedbackForm);
                Events.ExecuteOnErrorCreateFeedbackApiV1EvaluationsFeedbackPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse"/>
        /// </summary>
        public partial class CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateFeedbackApiV1EvaluationsFeedbackPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse(ILogger<CreateFeedbackApiV1EvaluationsFeedbackPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FeedbackModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FeedbackModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FeedbackModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteDefaultImplementation(IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(ref bool suppressDefaultLog, IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Delete All Feedbacks 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse?> DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete All Feedbacks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse> DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedbacks/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedbacks/all");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse>();

                        DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedbacks/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteDefaultImplementation(e, "/api/v1/evaluations/feedbacks/all", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse(ILogger<DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteDefaultImplementation(IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(ref bool suppressDefaultLog, IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete Feedback By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse?> DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Feedback By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse> DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(id);

                FormatDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedback/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedback/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse>();

                        DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedback/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteDefaultImplementation(e, "/api/v1/evaluations/feedback/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse(ILogger<DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteDefaultImplementation(IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFeedbacksApiV1EvaluationsFeedbacksDelete(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDeleteFeedbacksApiV1EvaluationsFeedbacksDelete(ref bool suppressDefaultLog, IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFeedbacksApiV1EvaluationsFeedbacksDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDeleteFeedbacksApiV1EvaluationsFeedbacksDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Delete Feedbacks 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse?> DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Feedbacks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse> DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedbacks"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedbacks");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse>();

                        DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedbacks", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDeleteFeedbacksApiV1EvaluationsFeedbacksDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteDefaultImplementation(e, "/api/v1/evaluations/feedbacks", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDeleteFeedbacksApiV1EvaluationsFeedbacksDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse(ILogger<DeleteFeedbacksApiV1EvaluationsFeedbacksDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetDefaultImplementation(IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(ref bool suppressDefaultLog, IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get All Feedbacks 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse?> GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All Feedbacks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse> GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedbacks/all/export"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedbacks/all/export");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse>();

                        GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedbacks/all/export", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetDefaultImplementation(e, "/api/v1/evaluations/feedbacks/all/export", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse"/>
        /// </summary>
        public partial class GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse(ILogger<GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FeedbackModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FeedbackModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FeedbackModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetDefaultImplementation(IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(ref bool suppressDefaultLog, IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get All Feedbacks 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse?> GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get All Feedbacks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse"/>&gt;</returns>
        public async Task<IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse> GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedbacks/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedbacks/all");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse>();

                        GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedbacks/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetDefaultImplementation(e, "/api/v1/evaluations/feedbacks/all", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse"/>
        /// </summary>
        public partial class GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse(ILogger<GetAllFeedbacksApiV1EvaluationsFeedbacksAllGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FeedbackUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FeedbackUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FeedbackUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetConfigApiV1EvaluationsConfigGetDefaultImplementation(IGetConfigApiV1EvaluationsConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetConfigApiV1EvaluationsConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetConfigApiV1EvaluationsConfigGet(ref bool suppressDefaultLog, IGetConfigApiV1EvaluationsConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetConfigApiV1EvaluationsConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetConfigApiV1EvaluationsConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetConfigApiV1EvaluationsConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigApiV1EvaluationsConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetConfigApiV1EvaluationsConfigGetApiResponse?> GetConfigApiV1EvaluationsConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConfigApiV1EvaluationsConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConfigApiV1EvaluationsConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetConfigApiV1EvaluationsConfigGetApiResponse> GetConfigApiV1EvaluationsConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetConfigApiV1EvaluationsConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConfigApiV1EvaluationsConfigGetApiResponse>();

                        GetConfigApiV1EvaluationsConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConfigApiV1EvaluationsConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetConfigApiV1EvaluationsConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConfigApiV1EvaluationsConfigGetDefaultImplementation(e, "/api/v1/evaluations/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetConfigApiV1EvaluationsConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConfigApiV1EvaluationsConfigGetApiResponse"/>
        /// </summary>
        public partial class GetConfigApiV1EvaluationsConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetConfigApiV1EvaluationsConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConfigApiV1EvaluationsConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConfigApiV1EvaluationsConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConfigApiV1EvaluationsConfigGetApiResponse(ILogger<GetConfigApiV1EvaluationsConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFeedbackByIdApiV1EvaluationsFeedbackIdGetDefaultImplementation(IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(ref bool suppressDefaultLog, IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFeedbackByIdApiV1EvaluationsFeedbackIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Feedback By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse?> GetFeedbackByIdApiV1EvaluationsFeedbackIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFeedbackByIdApiV1EvaluationsFeedbackIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Feedback By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse> GetFeedbackByIdApiV1EvaluationsFeedbackIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(id);

                FormatGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedback/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedback/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse>();

                        GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedback/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFeedbackByIdApiV1EvaluationsFeedbackIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFeedbackByIdApiV1EvaluationsFeedbackIdGetDefaultImplementation(e, "/api/v1/evaluations/feedback/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFeedbackByIdApiV1EvaluationsFeedbackIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse"/>
        /// </summary>
        public partial class GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse(ILogger<GetFeedbackByIdApiV1EvaluationsFeedbackIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FeedbackModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FeedbackModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FeedbackModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetFeedbacksApiV1EvaluationsFeedbacksUserGetDefaultImplementation(IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetFeedbacksApiV1EvaluationsFeedbacksUserGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetFeedbacksApiV1EvaluationsFeedbacksUserGet(ref bool suppressDefaultLog, IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetFeedbacksApiV1EvaluationsFeedbacksUserGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFeedbacksApiV1EvaluationsFeedbacksUserGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetFeedbacksApiV1EvaluationsFeedbacksUserGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Feedbacks 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse"/>&gt;</returns>
        public async Task<IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse?> GetFeedbacksApiV1EvaluationsFeedbacksUserGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFeedbacksApiV1EvaluationsFeedbacksUserGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Feedbacks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse"/>&gt;</returns>
        public async Task<IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse> GetFeedbacksApiV1EvaluationsFeedbacksUserGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedbacks/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedbacks/user");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse>();

                        GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedbacks/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFeedbacksApiV1EvaluationsFeedbacksUserGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetFeedbacksApiV1EvaluationsFeedbacksUserGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFeedbacksApiV1EvaluationsFeedbacksUserGetDefaultImplementation(e, "/api/v1/evaluations/feedbacks/user", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetFeedbacksApiV1EvaluationsFeedbacksUserGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse"/>
        /// </summary>
        public partial class GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse(ILogger<GetFeedbacksApiV1EvaluationsFeedbacksUserGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FeedbackUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FeedbackUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FeedbackUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateConfigApiV1EvaluationsConfigPost(UpdateConfigForm updateConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateConfigForm"></param>
        /// <returns></returns>
        private void ValidateUpdateConfigApiV1EvaluationsConfigPost(UpdateConfigForm updateConfigForm)
        {
            if (updateConfigForm == null)
                throw new ArgumentNullException(nameof(updateConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateConfigForm"></param>
        private void AfterUpdateConfigApiV1EvaluationsConfigPostDefaultImplementation(IUpdateConfigApiV1EvaluationsConfigPostApiResponse apiResponseLocalVar, UpdateConfigForm updateConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateConfigApiV1EvaluationsConfigPost(ref suppressDefaultLog, apiResponseLocalVar, updateConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateConfigForm"></param>
        partial void AfterUpdateConfigApiV1EvaluationsConfigPost(ref bool suppressDefaultLog, IUpdateConfigApiV1EvaluationsConfigPostApiResponse apiResponseLocalVar, UpdateConfigForm updateConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updateConfigForm"></param>
        private void OnErrorUpdateConfigApiV1EvaluationsConfigPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UpdateConfigForm updateConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateConfigApiV1EvaluationsConfigPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, updateConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updateConfigForm"></param>
        partial void OnErrorUpdateConfigApiV1EvaluationsConfigPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UpdateConfigForm updateConfigForm);

        /// <summary>
        /// Update Config 
        /// </summary>
        /// <param name="updateConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigApiV1EvaluationsConfigPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateConfigApiV1EvaluationsConfigPostApiResponse?> UpdateConfigApiV1EvaluationsConfigPostOrDefaultAsync(UpdateConfigForm updateConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateConfigApiV1EvaluationsConfigPostAsync(updateConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateConfigApiV1EvaluationsConfigPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateConfigApiV1EvaluationsConfigPostApiResponse> UpdateConfigApiV1EvaluationsConfigPostAsync(UpdateConfigForm updateConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateConfigApiV1EvaluationsConfigPost(updateConfigForm);

                FormatUpdateConfigApiV1EvaluationsConfigPost(updateConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/config");

                    httpRequestMessageLocalVar.Content = (updateConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateConfigApiV1EvaluationsConfigPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateConfigApiV1EvaluationsConfigPostApiResponse>();

                        UpdateConfigApiV1EvaluationsConfigPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateConfigApiV1EvaluationsConfigPostDefaultImplementation(apiResponseLocalVar, updateConfigForm);

                        Events.ExecuteOnUpdateConfigApiV1EvaluationsConfigPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateConfigApiV1EvaluationsConfigPostDefaultImplementation(e, "/api/v1/evaluations/config", uriBuilderLocalVar.Path, updateConfigForm);
                Events.ExecuteOnErrorUpdateConfigApiV1EvaluationsConfigPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateConfigApiV1EvaluationsConfigPostApiResponse"/>
        /// </summary>
        public partial class UpdateConfigApiV1EvaluationsConfigPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateConfigApiV1EvaluationsConfigPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateConfigApiV1EvaluationsConfigPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateConfigApiV1EvaluationsConfigPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateConfigApiV1EvaluationsConfigPostApiResponse(ILogger<UpdateConfigApiV1EvaluationsConfigPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(ref string id, FeedbackForm feedbackForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        /// <returns></returns>
        private void ValidateUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(string id, FeedbackForm feedbackForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (feedbackForm == null)
                throw new ArgumentNullException(nameof(feedbackForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        private void AfterUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostDefaultImplementation(IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse apiResponseLocalVar, string id, FeedbackForm feedbackForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(ref suppressDefaultLog, apiResponseLocalVar, id, feedbackForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        partial void AfterUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(ref bool suppressDefaultLog, IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse apiResponseLocalVar, string id, FeedbackForm feedbackForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        private void OnErrorUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FeedbackForm feedbackForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, feedbackForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        partial void OnErrorUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FeedbackForm feedbackForm);

        /// <summary>
        /// Update Feedback By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse?> UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostOrDefaultAsync(string id, FeedbackForm feedbackForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostAsync(id, feedbackForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Feedback By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="feedbackForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse> UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostAsync(string id, FeedbackForm feedbackForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(id, feedbackForm);

                FormatUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(ref id, feedbackForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/evaluations/feedback/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/evaluations/feedback/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (feedbackForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(feedbackForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse>();

                        UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/evaluations/feedback/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostDefaultImplementation(apiResponseLocalVar, id, feedbackForm);

                        Events.ExecuteOnUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostDefaultImplementation(e, "/api/v1/evaluations/feedback/{id}", uriBuilderLocalVar.Path, id, feedbackForm);
                Events.ExecuteOnErrorUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse"/>
        /// </summary>
        public partial class UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse(ILogger<UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FeedbackModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FeedbackModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FeedbackModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
