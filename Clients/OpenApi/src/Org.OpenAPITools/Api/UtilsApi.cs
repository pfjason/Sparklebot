// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IUtilsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        UtilsApiEvents Events { get; }

        /// <summary>
        /// Download Chat As Pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatTitleMessagesForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse"/>&gt;</returns>
        Task<IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse> DownloadChatAsPdfApiV1UtilsPdfPostAsync(ChatTitleMessagesForm chatTitleMessagesForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Chat As Pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="chatTitleMessagesForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse"/>?&gt;</returns>
        Task<IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse?> DownloadChatAsPdfApiV1UtilsPdfPostOrDefaultAsync(ChatTitleMessagesForm chatTitleMessagesForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Db
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadDbApiV1UtilsDbDownloadGetApiResponse"/>&gt;</returns>
        Task<IDownloadDbApiV1UtilsDbDownloadGetApiResponse> DownloadDbApiV1UtilsDbDownloadGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Db
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadDbApiV1UtilsDbDownloadGetApiResponse"/>?&gt;</returns>
        Task<IDownloadDbApiV1UtilsDbDownloadGetApiResponse?> DownloadDbApiV1UtilsDbDownloadGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Litellm Config Yaml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse"/>&gt;</returns>
        Task<IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse> DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Download Litellm Config Yaml
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse"/>?&gt;</returns>
        Task<IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse?> DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Execute Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExecuteCodeApiV1UtilsCodeExecutePostApiResponse"/>&gt;</returns>
        Task<IExecuteCodeApiV1UtilsCodeExecutePostApiResponse> ExecuteCodeApiV1UtilsCodeExecutePostAsync(CodeForm codeForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Execute Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="codeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExecuteCodeApiV1UtilsCodeExecutePostApiResponse"/>?&gt;</returns>
        Task<IExecuteCodeApiV1UtilsCodeExecutePostApiResponse?> ExecuteCodeApiV1UtilsCodeExecutePostOrDefaultAsync(CodeForm codeForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Format Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFormatCodeApiV1UtilsCodeFormatPostApiResponse"/>&gt;</returns>
        Task<IFormatCodeApiV1UtilsCodeFormatPostApiResponse> FormatCodeApiV1UtilsCodeFormatPostAsync(CodeForm codeForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Format Code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="codeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFormatCodeApiV1UtilsCodeFormatPostApiResponse"/>?&gt;</returns>
        Task<IFormatCodeApiV1UtilsCodeFormatPostApiResponse?> FormatCodeApiV1UtilsCodeFormatPostOrDefaultAsync(CodeForm codeForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Gravatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGravatarApiV1UtilsGravatarGetApiResponse"/>&gt;</returns>
        Task<IGetGravatarApiV1UtilsGravatarGetApiResponse> GetGravatarApiV1UtilsGravatarGetAsync(string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Gravatar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="email"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGravatarApiV1UtilsGravatarGetApiResponse"/>?&gt;</returns>
        Task<IGetGravatarApiV1UtilsGravatarGetApiResponse?> GetGravatarApiV1UtilsGravatarGetOrDefaultAsync(string email, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Html From Markdown
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse"/>&gt;</returns>
        Task<IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse> GetHtmlFromMarkdownApiV1UtilsMarkdownPostAsync(MarkdownForm markdownForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Html From Markdown
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="markdownForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse"/>?&gt;</returns>
        Task<IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse?> GetHtmlFromMarkdownApiV1UtilsMarkdownPostOrDefaultAsync(MarkdownForm markdownForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse"/>
    /// </summary>
    public interface IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDownloadDbApiV1UtilsDbDownloadGetApiResponse"/>
    /// </summary>
    public interface IDownloadDbApiV1UtilsDbDownloadGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse"/>
    /// </summary>
    public interface IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IExecuteCodeApiV1UtilsCodeExecutePostApiResponse"/>
    /// </summary>
    public interface IExecuteCodeApiV1UtilsCodeExecutePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IFormatCodeApiV1UtilsCodeFormatPostApiResponse"/>
    /// </summary>
    public interface IFormatCodeApiV1UtilsCodeFormatPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetGravatarApiV1UtilsGravatarGetApiResponse"/>
    /// </summary>
    public interface IGetGravatarApiV1UtilsGravatarGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse"/>
    /// </summary>
    public interface IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class UtilsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadChatAsPdfApiV1UtilsPdfPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadChatAsPdfApiV1UtilsPdfPost;

        internal void ExecuteOnDownloadChatAsPdfApiV1UtilsPdfPost(UtilsApi.DownloadChatAsPdfApiV1UtilsPdfPostApiResponse apiResponse)
        {
            OnDownloadChatAsPdfApiV1UtilsPdfPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadChatAsPdfApiV1UtilsPdfPost(Exception exception)
        {
            OnErrorDownloadChatAsPdfApiV1UtilsPdfPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadDbApiV1UtilsDbDownloadGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadDbApiV1UtilsDbDownloadGet;

        internal void ExecuteOnDownloadDbApiV1UtilsDbDownloadGet(UtilsApi.DownloadDbApiV1UtilsDbDownloadGetApiResponse apiResponse)
        {
            OnDownloadDbApiV1UtilsDbDownloadGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadDbApiV1UtilsDbDownloadGet(Exception exception)
        {
            OnErrorDownloadDbApiV1UtilsDbDownloadGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet;

        internal void ExecuteOnDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet(UtilsApi.DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse apiResponse)
        {
            OnDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet(Exception exception)
        {
            OnErrorDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExecuteCodeApiV1UtilsCodeExecutePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExecuteCodeApiV1UtilsCodeExecutePost;

        internal void ExecuteOnExecuteCodeApiV1UtilsCodeExecutePost(UtilsApi.ExecuteCodeApiV1UtilsCodeExecutePostApiResponse apiResponse)
        {
            OnExecuteCodeApiV1UtilsCodeExecutePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExecuteCodeApiV1UtilsCodeExecutePost(Exception exception)
        {
            OnErrorExecuteCodeApiV1UtilsCodeExecutePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFormatCodeApiV1UtilsCodeFormatPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFormatCodeApiV1UtilsCodeFormatPost;

        internal void ExecuteOnFormatCodeApiV1UtilsCodeFormatPost(UtilsApi.FormatCodeApiV1UtilsCodeFormatPostApiResponse apiResponse)
        {
            OnFormatCodeApiV1UtilsCodeFormatPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFormatCodeApiV1UtilsCodeFormatPost(Exception exception)
        {
            OnErrorFormatCodeApiV1UtilsCodeFormatPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetGravatarApiV1UtilsGravatarGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetGravatarApiV1UtilsGravatarGet;

        internal void ExecuteOnGetGravatarApiV1UtilsGravatarGet(UtilsApi.GetGravatarApiV1UtilsGravatarGetApiResponse apiResponse)
        {
            OnGetGravatarApiV1UtilsGravatarGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetGravatarApiV1UtilsGravatarGet(Exception exception)
        {
            OnErrorGetGravatarApiV1UtilsGravatarGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetHtmlFromMarkdownApiV1UtilsMarkdownPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetHtmlFromMarkdownApiV1UtilsMarkdownPost;

        internal void ExecuteOnGetHtmlFromMarkdownApiV1UtilsMarkdownPost(UtilsApi.GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse apiResponse)
        {
            OnGetHtmlFromMarkdownApiV1UtilsMarkdownPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetHtmlFromMarkdownApiV1UtilsMarkdownPost(Exception exception)
        {
            OnErrorGetHtmlFromMarkdownApiV1UtilsMarkdownPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class UtilsApi : IUtilsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<UtilsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public UtilsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilsApi(ILogger<UtilsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, UtilsApiEvents utilsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<UtilsApi>();
            HttpClient = httpClient;
            Events = utilsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatDownloadChatAsPdfApiV1UtilsPdfPost(ChatTitleMessagesForm chatTitleMessagesForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="chatTitleMessagesForm"></param>
        /// <returns></returns>
        private void ValidateDownloadChatAsPdfApiV1UtilsPdfPost(ChatTitleMessagesForm chatTitleMessagesForm)
        {
            if (chatTitleMessagesForm == null)
                throw new ArgumentNullException(nameof(chatTitleMessagesForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatTitleMessagesForm"></param>
        private void AfterDownloadChatAsPdfApiV1UtilsPdfPostDefaultImplementation(IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse apiResponseLocalVar, ChatTitleMessagesForm chatTitleMessagesForm)
        {
            bool suppressDefaultLog = false;
            AfterDownloadChatAsPdfApiV1UtilsPdfPost(ref suppressDefaultLog, apiResponseLocalVar, chatTitleMessagesForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chatTitleMessagesForm"></param>
        partial void AfterDownloadChatAsPdfApiV1UtilsPdfPost(ref bool suppressDefaultLog, IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse apiResponseLocalVar, ChatTitleMessagesForm chatTitleMessagesForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatTitleMessagesForm"></param>
        private void OnErrorDownloadChatAsPdfApiV1UtilsPdfPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ChatTitleMessagesForm chatTitleMessagesForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadChatAsPdfApiV1UtilsPdfPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, chatTitleMessagesForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chatTitleMessagesForm"></param>
        partial void OnErrorDownloadChatAsPdfApiV1UtilsPdfPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ChatTitleMessagesForm chatTitleMessagesForm);

        /// <summary>
        /// Download Chat As Pdf 
        /// </summary>
        /// <param name="chatTitleMessagesForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse"/>&gt;</returns>
        public async Task<IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse?> DownloadChatAsPdfApiV1UtilsPdfPostOrDefaultAsync(ChatTitleMessagesForm chatTitleMessagesForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadChatAsPdfApiV1UtilsPdfPostAsync(chatTitleMessagesForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download Chat As Pdf 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chatTitleMessagesForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse"/>&gt;</returns>
        public async Task<IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse> DownloadChatAsPdfApiV1UtilsPdfPostAsync(ChatTitleMessagesForm chatTitleMessagesForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDownloadChatAsPdfApiV1UtilsPdfPost(chatTitleMessagesForm);

                FormatDownloadChatAsPdfApiV1UtilsPdfPost(chatTitleMessagesForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/utils/pdf"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/utils/pdf");

                    httpRequestMessageLocalVar.Content = (chatTitleMessagesForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(chatTitleMessagesForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DownloadChatAsPdfApiV1UtilsPdfPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadChatAsPdfApiV1UtilsPdfPostApiResponse>();

                        DownloadChatAsPdfApiV1UtilsPdfPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/utils/pdf", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDownloadChatAsPdfApiV1UtilsPdfPostDefaultImplementation(apiResponseLocalVar, chatTitleMessagesForm);

                        Events.ExecuteOnDownloadChatAsPdfApiV1UtilsPdfPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadChatAsPdfApiV1UtilsPdfPostDefaultImplementation(e, "/api/v1/utils/pdf", uriBuilderLocalVar.Path, chatTitleMessagesForm);
                Events.ExecuteOnErrorDownloadChatAsPdfApiV1UtilsPdfPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadChatAsPdfApiV1UtilsPdfPostApiResponse"/>
        /// </summary>
        public partial class DownloadChatAsPdfApiV1UtilsPdfPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IDownloadChatAsPdfApiV1UtilsPdfPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadChatAsPdfApiV1UtilsPdfPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadChatAsPdfApiV1UtilsPdfPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadChatAsPdfApiV1UtilsPdfPostApiResponse(ILogger<DownloadChatAsPdfApiV1UtilsPdfPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDownloadDbApiV1UtilsDbDownloadGetDefaultImplementation(IDownloadDbApiV1UtilsDbDownloadGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDownloadDbApiV1UtilsDbDownloadGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDownloadDbApiV1UtilsDbDownloadGet(ref bool suppressDefaultLog, IDownloadDbApiV1UtilsDbDownloadGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDownloadDbApiV1UtilsDbDownloadGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadDbApiV1UtilsDbDownloadGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDownloadDbApiV1UtilsDbDownloadGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Download Db 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadDbApiV1UtilsDbDownloadGetApiResponse"/>&gt;</returns>
        public async Task<IDownloadDbApiV1UtilsDbDownloadGetApiResponse?> DownloadDbApiV1UtilsDbDownloadGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadDbApiV1UtilsDbDownloadGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download Db 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadDbApiV1UtilsDbDownloadGetApiResponse"/>&gt;</returns>
        public async Task<IDownloadDbApiV1UtilsDbDownloadGetApiResponse> DownloadDbApiV1UtilsDbDownloadGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/utils/db/download"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/utils/db/download");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DownloadDbApiV1UtilsDbDownloadGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadDbApiV1UtilsDbDownloadGetApiResponse>();

                        DownloadDbApiV1UtilsDbDownloadGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/utils/db/download", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDownloadDbApiV1UtilsDbDownloadGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDownloadDbApiV1UtilsDbDownloadGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadDbApiV1UtilsDbDownloadGetDefaultImplementation(e, "/api/v1/utils/db/download", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDownloadDbApiV1UtilsDbDownloadGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadDbApiV1UtilsDbDownloadGetApiResponse"/>
        /// </summary>
        public partial class DownloadDbApiV1UtilsDbDownloadGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IDownloadDbApiV1UtilsDbDownloadGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadDbApiV1UtilsDbDownloadGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadDbApiV1UtilsDbDownloadGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadDbApiV1UtilsDbDownloadGetApiResponse(ILogger<DownloadDbApiV1UtilsDbDownloadGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetDefaultImplementation(IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet(ref bool suppressDefaultLog, IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Download Litellm Config Yaml 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse"/>&gt;</returns>
        public async Task<IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse?> DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Download Litellm Config Yaml 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse"/>&gt;</returns>
        public async Task<IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse> DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/utils/litellm/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/utils/litellm/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse>();

                        DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/utils/litellm/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetDefaultImplementation(e, "/api/v1/utils/litellm/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse"/>
        /// </summary>
        public partial class DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IDownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse(ILogger<DownloadLitellmConfigYamlApiV1UtilsLitellmConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatExecuteCodeApiV1UtilsCodeExecutePost(CodeForm codeForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="codeForm"></param>
        /// <returns></returns>
        private void ValidateExecuteCodeApiV1UtilsCodeExecutePost(CodeForm codeForm)
        {
            if (codeForm == null)
                throw new ArgumentNullException(nameof(codeForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="codeForm"></param>
        private void AfterExecuteCodeApiV1UtilsCodeExecutePostDefaultImplementation(IExecuteCodeApiV1UtilsCodeExecutePostApiResponse apiResponseLocalVar, CodeForm codeForm)
        {
            bool suppressDefaultLog = false;
            AfterExecuteCodeApiV1UtilsCodeExecutePost(ref suppressDefaultLog, apiResponseLocalVar, codeForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="codeForm"></param>
        partial void AfterExecuteCodeApiV1UtilsCodeExecutePost(ref bool suppressDefaultLog, IExecuteCodeApiV1UtilsCodeExecutePostApiResponse apiResponseLocalVar, CodeForm codeForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="codeForm"></param>
        private void OnErrorExecuteCodeApiV1UtilsCodeExecutePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CodeForm codeForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorExecuteCodeApiV1UtilsCodeExecutePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, codeForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="codeForm"></param>
        partial void OnErrorExecuteCodeApiV1UtilsCodeExecutePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CodeForm codeForm);

        /// <summary>
        /// Execute Code 
        /// </summary>
        /// <param name="codeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExecuteCodeApiV1UtilsCodeExecutePostApiResponse"/>&gt;</returns>
        public async Task<IExecuteCodeApiV1UtilsCodeExecutePostApiResponse?> ExecuteCodeApiV1UtilsCodeExecutePostOrDefaultAsync(CodeForm codeForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExecuteCodeApiV1UtilsCodeExecutePostAsync(codeForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Execute Code 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExecuteCodeApiV1UtilsCodeExecutePostApiResponse"/>&gt;</returns>
        public async Task<IExecuteCodeApiV1UtilsCodeExecutePostApiResponse> ExecuteCodeApiV1UtilsCodeExecutePostAsync(CodeForm codeForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateExecuteCodeApiV1UtilsCodeExecutePost(codeForm);

                FormatExecuteCodeApiV1UtilsCodeExecutePost(codeForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/utils/code/execute"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/utils/code/execute");

                    httpRequestMessageLocalVar.Content = (codeForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(codeForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExecuteCodeApiV1UtilsCodeExecutePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExecuteCodeApiV1UtilsCodeExecutePostApiResponse>();

                        ExecuteCodeApiV1UtilsCodeExecutePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/utils/code/execute", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExecuteCodeApiV1UtilsCodeExecutePostDefaultImplementation(apiResponseLocalVar, codeForm);

                        Events.ExecuteOnExecuteCodeApiV1UtilsCodeExecutePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExecuteCodeApiV1UtilsCodeExecutePostDefaultImplementation(e, "/api/v1/utils/code/execute", uriBuilderLocalVar.Path, codeForm);
                Events.ExecuteOnErrorExecuteCodeApiV1UtilsCodeExecutePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExecuteCodeApiV1UtilsCodeExecutePostApiResponse"/>
        /// </summary>
        public partial class ExecuteCodeApiV1UtilsCodeExecutePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IExecuteCodeApiV1UtilsCodeExecutePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExecuteCodeApiV1UtilsCodeExecutePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExecuteCodeApiV1UtilsCodeExecutePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExecuteCodeApiV1UtilsCodeExecutePostApiResponse(ILogger<ExecuteCodeApiV1UtilsCodeExecutePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatFormatCodeApiV1UtilsCodeFormatPost(CodeForm codeForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="codeForm"></param>
        /// <returns></returns>
        private void ValidateFormatCodeApiV1UtilsCodeFormatPost(CodeForm codeForm)
        {
            if (codeForm == null)
                throw new ArgumentNullException(nameof(codeForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="codeForm"></param>
        private void AfterFormatCodeApiV1UtilsCodeFormatPostDefaultImplementation(IFormatCodeApiV1UtilsCodeFormatPostApiResponse apiResponseLocalVar, CodeForm codeForm)
        {
            bool suppressDefaultLog = false;
            AfterFormatCodeApiV1UtilsCodeFormatPost(ref suppressDefaultLog, apiResponseLocalVar, codeForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="codeForm"></param>
        partial void AfterFormatCodeApiV1UtilsCodeFormatPost(ref bool suppressDefaultLog, IFormatCodeApiV1UtilsCodeFormatPostApiResponse apiResponseLocalVar, CodeForm codeForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="codeForm"></param>
        private void OnErrorFormatCodeApiV1UtilsCodeFormatPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CodeForm codeForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFormatCodeApiV1UtilsCodeFormatPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, codeForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="codeForm"></param>
        partial void OnErrorFormatCodeApiV1UtilsCodeFormatPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CodeForm codeForm);

        /// <summary>
        /// Format Code 
        /// </summary>
        /// <param name="codeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFormatCodeApiV1UtilsCodeFormatPostApiResponse"/>&gt;</returns>
        public async Task<IFormatCodeApiV1UtilsCodeFormatPostApiResponse?> FormatCodeApiV1UtilsCodeFormatPostOrDefaultAsync(CodeForm codeForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FormatCodeApiV1UtilsCodeFormatPostAsync(codeForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Format Code 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="codeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFormatCodeApiV1UtilsCodeFormatPostApiResponse"/>&gt;</returns>
        public async Task<IFormatCodeApiV1UtilsCodeFormatPostApiResponse> FormatCodeApiV1UtilsCodeFormatPostAsync(CodeForm codeForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFormatCodeApiV1UtilsCodeFormatPost(codeForm);

                FormatFormatCodeApiV1UtilsCodeFormatPost(codeForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/utils/code/format"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/utils/code/format");

                    httpRequestMessageLocalVar.Content = (codeForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(codeForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FormatCodeApiV1UtilsCodeFormatPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FormatCodeApiV1UtilsCodeFormatPostApiResponse>();

                        FormatCodeApiV1UtilsCodeFormatPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/utils/code/format", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFormatCodeApiV1UtilsCodeFormatPostDefaultImplementation(apiResponseLocalVar, codeForm);

                        Events.ExecuteOnFormatCodeApiV1UtilsCodeFormatPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFormatCodeApiV1UtilsCodeFormatPostDefaultImplementation(e, "/api/v1/utils/code/format", uriBuilderLocalVar.Path, codeForm);
                Events.ExecuteOnErrorFormatCodeApiV1UtilsCodeFormatPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FormatCodeApiV1UtilsCodeFormatPostApiResponse"/>
        /// </summary>
        public partial class FormatCodeApiV1UtilsCodeFormatPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IFormatCodeApiV1UtilsCodeFormatPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FormatCodeApiV1UtilsCodeFormatPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FormatCodeApiV1UtilsCodeFormatPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FormatCodeApiV1UtilsCodeFormatPostApiResponse(ILogger<FormatCodeApiV1UtilsCodeFormatPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetGravatarApiV1UtilsGravatarGet(ref string email);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="email"></param>
        /// <returns></returns>
        private void ValidateGetGravatarApiV1UtilsGravatarGet(string email)
        {
            if (email == null)
                throw new ArgumentNullException(nameof(email));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        private void AfterGetGravatarApiV1UtilsGravatarGetDefaultImplementation(IGetGravatarApiV1UtilsGravatarGetApiResponse apiResponseLocalVar, string email)
        {
            bool suppressDefaultLog = false;
            AfterGetGravatarApiV1UtilsGravatarGet(ref suppressDefaultLog, apiResponseLocalVar, email);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="email"></param>
        partial void AfterGetGravatarApiV1UtilsGravatarGet(ref bool suppressDefaultLog, IGetGravatarApiV1UtilsGravatarGetApiResponse apiResponseLocalVar, string email);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        private void OnErrorGetGravatarApiV1UtilsGravatarGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetGravatarApiV1UtilsGravatarGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, email);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="email"></param>
        partial void OnErrorGetGravatarApiV1UtilsGravatarGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string email);

        /// <summary>
        /// Get Gravatar 
        /// </summary>
        /// <param name="email"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGravatarApiV1UtilsGravatarGetApiResponse"/>&gt;</returns>
        public async Task<IGetGravatarApiV1UtilsGravatarGetApiResponse?> GetGravatarApiV1UtilsGravatarGetOrDefaultAsync(string email, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetGravatarApiV1UtilsGravatarGetAsync(email, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Gravatar 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetGravatarApiV1UtilsGravatarGetApiResponse"/>&gt;</returns>
        public async Task<IGetGravatarApiV1UtilsGravatarGetApiResponse> GetGravatarApiV1UtilsGravatarGetAsync(string email, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetGravatarApiV1UtilsGravatarGet(email);

                FormatGetGravatarApiV1UtilsGravatarGet(ref email);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/utils/gravatar"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/utils/gravatar");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["email"] = ClientUtils.ParameterToString(email);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetGravatarApiV1UtilsGravatarGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetGravatarApiV1UtilsGravatarGetApiResponse>();

                        GetGravatarApiV1UtilsGravatarGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/utils/gravatar", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetGravatarApiV1UtilsGravatarGetDefaultImplementation(apiResponseLocalVar, email);

                        Events.ExecuteOnGetGravatarApiV1UtilsGravatarGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetGravatarApiV1UtilsGravatarGetDefaultImplementation(e, "/api/v1/utils/gravatar", uriBuilderLocalVar.Path, email);
                Events.ExecuteOnErrorGetGravatarApiV1UtilsGravatarGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetGravatarApiV1UtilsGravatarGetApiResponse"/>
        /// </summary>
        public partial class GetGravatarApiV1UtilsGravatarGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetGravatarApiV1UtilsGravatarGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetGravatarApiV1UtilsGravatarGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetGravatarApiV1UtilsGravatarGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetGravatarApiV1UtilsGravatarGetApiResponse(ILogger<GetGravatarApiV1UtilsGravatarGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetHtmlFromMarkdownApiV1UtilsMarkdownPost(MarkdownForm markdownForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="markdownForm"></param>
        /// <returns></returns>
        private void ValidateGetHtmlFromMarkdownApiV1UtilsMarkdownPost(MarkdownForm markdownForm)
        {
            if (markdownForm == null)
                throw new ArgumentNullException(nameof(markdownForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="markdownForm"></param>
        private void AfterGetHtmlFromMarkdownApiV1UtilsMarkdownPostDefaultImplementation(IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse apiResponseLocalVar, MarkdownForm markdownForm)
        {
            bool suppressDefaultLog = false;
            AfterGetHtmlFromMarkdownApiV1UtilsMarkdownPost(ref suppressDefaultLog, apiResponseLocalVar, markdownForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="markdownForm"></param>
        partial void AfterGetHtmlFromMarkdownApiV1UtilsMarkdownPost(ref bool suppressDefaultLog, IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse apiResponseLocalVar, MarkdownForm markdownForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="markdownForm"></param>
        private void OnErrorGetHtmlFromMarkdownApiV1UtilsMarkdownPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MarkdownForm markdownForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetHtmlFromMarkdownApiV1UtilsMarkdownPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, markdownForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="markdownForm"></param>
        partial void OnErrorGetHtmlFromMarkdownApiV1UtilsMarkdownPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, MarkdownForm markdownForm);

        /// <summary>
        /// Get Html From Markdown 
        /// </summary>
        /// <param name="markdownForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse"/>&gt;</returns>
        public async Task<IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse?> GetHtmlFromMarkdownApiV1UtilsMarkdownPostOrDefaultAsync(MarkdownForm markdownForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetHtmlFromMarkdownApiV1UtilsMarkdownPostAsync(markdownForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Html From Markdown 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse"/>&gt;</returns>
        public async Task<IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse> GetHtmlFromMarkdownApiV1UtilsMarkdownPostAsync(MarkdownForm markdownForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetHtmlFromMarkdownApiV1UtilsMarkdownPost(markdownForm);

                FormatGetHtmlFromMarkdownApiV1UtilsMarkdownPost(markdownForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/utils/markdown"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/utils/markdown");

                    httpRequestMessageLocalVar.Content = (markdownForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(markdownForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse>();

                        GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/utils/markdown", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetHtmlFromMarkdownApiV1UtilsMarkdownPostDefaultImplementation(apiResponseLocalVar, markdownForm);

                        Events.ExecuteOnGetHtmlFromMarkdownApiV1UtilsMarkdownPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetHtmlFromMarkdownApiV1UtilsMarkdownPostDefaultImplementation(e, "/api/v1/utils/markdown", uriBuilderLocalVar.Path, markdownForm);
                Events.ExecuteOnErrorGetHtmlFromMarkdownApiV1UtilsMarkdownPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse"/>
        /// </summary>
        public partial class GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse(ILogger<GetHtmlFromMarkdownApiV1UtilsMarkdownPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
