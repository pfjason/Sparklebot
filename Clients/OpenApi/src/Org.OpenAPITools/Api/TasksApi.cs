// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITasksApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TasksApiEvents Events { get; }

        /// <summary>
        /// Generate Autocompletion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse> GenerateAutocompletionApiV1TasksAutoCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Autocompletion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse?> GenerateAutocompletionApiV1TasksAutoCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Chat Tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse> GenerateChatTagsApiV1TasksTagsCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Chat Tags
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse?> GenerateChatTagsApiV1TasksTagsCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Emoji
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse> GenerateEmojiApiV1TasksEmojiCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Emoji
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse?> GenerateEmojiApiV1TasksEmojiCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Follow Ups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse> GenerateFollowUpsApiV1TasksFollowUpCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Follow Ups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse?> GenerateFollowUpsApiV1TasksFollowUpCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Image Prompt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse> GenerateImagePromptApiV1TasksImagePromptCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Image Prompt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse?> GenerateImagePromptApiV1TasksImagePromptCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Moa Response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse> GenerateMoaResponseApiV1TasksMoaCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Moa Response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse?> GenerateMoaResponseApiV1TasksMoaCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse> GenerateQueriesApiV1TasksQueriesCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse?> GenerateQueriesApiV1TasksQueriesCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse"/>&gt;</returns>
        Task<IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse> GenerateTitleApiV1TasksTitleCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Title
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse"/>?&gt;</returns>
        Task<IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse?> GenerateTitleApiV1TasksTitleCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Task Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTaskConfigApiV1TasksConfigGetApiResponse"/>&gt;</returns>
        Task<IGetTaskConfigApiV1TasksConfigGetApiResponse> GetTaskConfigApiV1TasksConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Task Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTaskConfigApiV1TasksConfigGetApiResponse"/>?&gt;</returns>
        Task<IGetTaskConfigApiV1TasksConfigGetApiResponse?> GetTaskConfigApiV1TasksConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Task Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse> UpdateTaskConfigApiV1TasksConfigUpdatePostAsync(TaskConfigForm taskConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Task Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="taskConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse?> UpdateTaskConfigApiV1TasksConfigUpdatePostOrDefaultAsync(TaskConfigForm taskConfigForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse"/>
    /// </summary>
    public interface IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetTaskConfigApiV1TasksConfigGetApiResponse"/>
    /// </summary>
    public interface IGetTaskConfigApiV1TasksConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TasksApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateAutocompletionApiV1TasksAutoCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateAutocompletionApiV1TasksAutoCompletionsPost;

        internal void ExecuteOnGenerateAutocompletionApiV1TasksAutoCompletionsPost(TasksApi.GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse apiResponse)
        {
            OnGenerateAutocompletionApiV1TasksAutoCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateAutocompletionApiV1TasksAutoCompletionsPost(Exception exception)
        {
            OnErrorGenerateAutocompletionApiV1TasksAutoCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateChatTagsApiV1TasksTagsCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateChatTagsApiV1TasksTagsCompletionsPost;

        internal void ExecuteOnGenerateChatTagsApiV1TasksTagsCompletionsPost(TasksApi.GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse apiResponse)
        {
            OnGenerateChatTagsApiV1TasksTagsCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateChatTagsApiV1TasksTagsCompletionsPost(Exception exception)
        {
            OnErrorGenerateChatTagsApiV1TasksTagsCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateEmojiApiV1TasksEmojiCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateEmojiApiV1TasksEmojiCompletionsPost;

        internal void ExecuteOnGenerateEmojiApiV1TasksEmojiCompletionsPost(TasksApi.GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse apiResponse)
        {
            OnGenerateEmojiApiV1TasksEmojiCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateEmojiApiV1TasksEmojiCompletionsPost(Exception exception)
        {
            OnErrorGenerateEmojiApiV1TasksEmojiCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateFollowUpsApiV1TasksFollowUpCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateFollowUpsApiV1TasksFollowUpCompletionsPost;

        internal void ExecuteOnGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(TasksApi.GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse apiResponse)
        {
            OnGenerateFollowUpsApiV1TasksFollowUpCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(Exception exception)
        {
            OnErrorGenerateFollowUpsApiV1TasksFollowUpCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateImagePromptApiV1TasksImagePromptCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateImagePromptApiV1TasksImagePromptCompletionsPost;

        internal void ExecuteOnGenerateImagePromptApiV1TasksImagePromptCompletionsPost(TasksApi.GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse apiResponse)
        {
            OnGenerateImagePromptApiV1TasksImagePromptCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateImagePromptApiV1TasksImagePromptCompletionsPost(Exception exception)
        {
            OnErrorGenerateImagePromptApiV1TasksImagePromptCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateMoaResponseApiV1TasksMoaCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateMoaResponseApiV1TasksMoaCompletionsPost;

        internal void ExecuteOnGenerateMoaResponseApiV1TasksMoaCompletionsPost(TasksApi.GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse apiResponse)
        {
            OnGenerateMoaResponseApiV1TasksMoaCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateMoaResponseApiV1TasksMoaCompletionsPost(Exception exception)
        {
            OnErrorGenerateMoaResponseApiV1TasksMoaCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateQueriesApiV1TasksQueriesCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateQueriesApiV1TasksQueriesCompletionsPost;

        internal void ExecuteOnGenerateQueriesApiV1TasksQueriesCompletionsPost(TasksApi.GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse apiResponse)
        {
            OnGenerateQueriesApiV1TasksQueriesCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateQueriesApiV1TasksQueriesCompletionsPost(Exception exception)
        {
            OnErrorGenerateQueriesApiV1TasksQueriesCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateTitleApiV1TasksTitleCompletionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateTitleApiV1TasksTitleCompletionsPost;

        internal void ExecuteOnGenerateTitleApiV1TasksTitleCompletionsPost(TasksApi.GenerateTitleApiV1TasksTitleCompletionsPostApiResponse apiResponse)
        {
            OnGenerateTitleApiV1TasksTitleCompletionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateTitleApiV1TasksTitleCompletionsPost(Exception exception)
        {
            OnErrorGenerateTitleApiV1TasksTitleCompletionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetTaskConfigApiV1TasksConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetTaskConfigApiV1TasksConfigGet;

        internal void ExecuteOnGetTaskConfigApiV1TasksConfigGet(TasksApi.GetTaskConfigApiV1TasksConfigGetApiResponse apiResponse)
        {
            OnGetTaskConfigApiV1TasksConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTaskConfigApiV1TasksConfigGet(Exception exception)
        {
            OnErrorGetTaskConfigApiV1TasksConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateTaskConfigApiV1TasksConfigUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateTaskConfigApiV1TasksConfigUpdatePost;

        internal void ExecuteOnUpdateTaskConfigApiV1TasksConfigUpdatePost(TasksApi.UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse apiResponse)
        {
            OnUpdateTaskConfigApiV1TasksConfigUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateTaskConfigApiV1TasksConfigUpdatePost(Exception exception)
        {
            OnErrorUpdateTaskConfigApiV1TasksConfigUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TasksApi : ITasksApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TasksApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TasksApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(ILogger<TasksApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TasksApiEvents tasksApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TasksApi>();
            HttpClient = httpClient;
            Events = tasksApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGenerateAutocompletionApiV1TasksAutoCompletionsPost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateAutocompletionApiV1TasksAutoCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterGenerateAutocompletionApiV1TasksAutoCompletionsPostDefaultImplementation(IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGenerateAutocompletionApiV1TasksAutoCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterGenerateAutocompletionApiV1TasksAutoCompletionsPost(ref bool suppressDefaultLog, IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorGenerateAutocompletionApiV1TasksAutoCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateAutocompletionApiV1TasksAutoCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorGenerateAutocompletionApiV1TasksAutoCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Generate Autocompletion 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse?> GenerateAutocompletionApiV1TasksAutoCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateAutocompletionApiV1TasksAutoCompletionsPostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Autocompletion 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse> GenerateAutocompletionApiV1TasksAutoCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateAutocompletionApiV1TasksAutoCompletionsPost(body);

                FormatGenerateAutocompletionApiV1TasksAutoCompletionsPost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/auto/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/auto/completions");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse>();

                        GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/auto/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateAutocompletionApiV1TasksAutoCompletionsPostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnGenerateAutocompletionApiV1TasksAutoCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateAutocompletionApiV1TasksAutoCompletionsPostDefaultImplementation(e, "/api/v1/tasks/auto/completions", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorGenerateAutocompletionApiV1TasksAutoCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse(ILogger<GenerateAutocompletionApiV1TasksAutoCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateChatTagsApiV1TasksTagsCompletionsPost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateChatTagsApiV1TasksTagsCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterGenerateChatTagsApiV1TasksTagsCompletionsPostDefaultImplementation(IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGenerateChatTagsApiV1TasksTagsCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterGenerateChatTagsApiV1TasksTagsCompletionsPost(ref bool suppressDefaultLog, IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorGenerateChatTagsApiV1TasksTagsCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateChatTagsApiV1TasksTagsCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorGenerateChatTagsApiV1TasksTagsCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Generate Chat Tags 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse?> GenerateChatTagsApiV1TasksTagsCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateChatTagsApiV1TasksTagsCompletionsPostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Chat Tags 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse> GenerateChatTagsApiV1TasksTagsCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateChatTagsApiV1TasksTagsCompletionsPost(body);

                FormatGenerateChatTagsApiV1TasksTagsCompletionsPost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/tags/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/tags/completions");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse>();

                        GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/tags/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateChatTagsApiV1TasksTagsCompletionsPostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnGenerateChatTagsApiV1TasksTagsCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateChatTagsApiV1TasksTagsCompletionsPostDefaultImplementation(e, "/api/v1/tasks/tags/completions", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorGenerateChatTagsApiV1TasksTagsCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse(ILogger<GenerateChatTagsApiV1TasksTagsCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateEmojiApiV1TasksEmojiCompletionsPost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateEmojiApiV1TasksEmojiCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterGenerateEmojiApiV1TasksEmojiCompletionsPostDefaultImplementation(IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGenerateEmojiApiV1TasksEmojiCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterGenerateEmojiApiV1TasksEmojiCompletionsPost(ref bool suppressDefaultLog, IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorGenerateEmojiApiV1TasksEmojiCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateEmojiApiV1TasksEmojiCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorGenerateEmojiApiV1TasksEmojiCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Generate Emoji 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse?> GenerateEmojiApiV1TasksEmojiCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateEmojiApiV1TasksEmojiCompletionsPostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Emoji 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse> GenerateEmojiApiV1TasksEmojiCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateEmojiApiV1TasksEmojiCompletionsPost(body);

                FormatGenerateEmojiApiV1TasksEmojiCompletionsPost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/emoji/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/emoji/completions");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse>();

                        GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/emoji/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateEmojiApiV1TasksEmojiCompletionsPostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnGenerateEmojiApiV1TasksEmojiCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateEmojiApiV1TasksEmojiCompletionsPostDefaultImplementation(e, "/api/v1/tasks/emoji/completions", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorGenerateEmojiApiV1TasksEmojiCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse(ILogger<GenerateEmojiApiV1TasksEmojiCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterGenerateFollowUpsApiV1TasksFollowUpCompletionsPostDefaultImplementation(IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(ref bool suppressDefaultLog, IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorGenerateFollowUpsApiV1TasksFollowUpCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Generate Follow Ups 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse?> GenerateFollowUpsApiV1TasksFollowUpCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateFollowUpsApiV1TasksFollowUpCompletionsPostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Follow Ups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse> GenerateFollowUpsApiV1TasksFollowUpCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(body);

                FormatGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/follow_up/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/follow_up/completions");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse>();

                        GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/follow_up/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateFollowUpsApiV1TasksFollowUpCompletionsPostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateFollowUpsApiV1TasksFollowUpCompletionsPostDefaultImplementation(e, "/api/v1/tasks/follow_up/completions", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorGenerateFollowUpsApiV1TasksFollowUpCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse(ILogger<GenerateFollowUpsApiV1TasksFollowUpCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateImagePromptApiV1TasksImagePromptCompletionsPost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateImagePromptApiV1TasksImagePromptCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterGenerateImagePromptApiV1TasksImagePromptCompletionsPostDefaultImplementation(IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGenerateImagePromptApiV1TasksImagePromptCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterGenerateImagePromptApiV1TasksImagePromptCompletionsPost(ref bool suppressDefaultLog, IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorGenerateImagePromptApiV1TasksImagePromptCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateImagePromptApiV1TasksImagePromptCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorGenerateImagePromptApiV1TasksImagePromptCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Generate Image Prompt 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse?> GenerateImagePromptApiV1TasksImagePromptCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateImagePromptApiV1TasksImagePromptCompletionsPostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Image Prompt 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse> GenerateImagePromptApiV1TasksImagePromptCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateImagePromptApiV1TasksImagePromptCompletionsPost(body);

                FormatGenerateImagePromptApiV1TasksImagePromptCompletionsPost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/image_prompt/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/image_prompt/completions");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse>();

                        GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/image_prompt/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateImagePromptApiV1TasksImagePromptCompletionsPostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnGenerateImagePromptApiV1TasksImagePromptCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateImagePromptApiV1TasksImagePromptCompletionsPostDefaultImplementation(e, "/api/v1/tasks/image_prompt/completions", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorGenerateImagePromptApiV1TasksImagePromptCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse(ILogger<GenerateImagePromptApiV1TasksImagePromptCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateMoaResponseApiV1TasksMoaCompletionsPost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateMoaResponseApiV1TasksMoaCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterGenerateMoaResponseApiV1TasksMoaCompletionsPostDefaultImplementation(IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGenerateMoaResponseApiV1TasksMoaCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterGenerateMoaResponseApiV1TasksMoaCompletionsPost(ref bool suppressDefaultLog, IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorGenerateMoaResponseApiV1TasksMoaCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateMoaResponseApiV1TasksMoaCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorGenerateMoaResponseApiV1TasksMoaCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Generate Moa Response 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse?> GenerateMoaResponseApiV1TasksMoaCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateMoaResponseApiV1TasksMoaCompletionsPostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Moa Response 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse> GenerateMoaResponseApiV1TasksMoaCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateMoaResponseApiV1TasksMoaCompletionsPost(body);

                FormatGenerateMoaResponseApiV1TasksMoaCompletionsPost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/moa/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/moa/completions");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse>();

                        GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/moa/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateMoaResponseApiV1TasksMoaCompletionsPostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnGenerateMoaResponseApiV1TasksMoaCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateMoaResponseApiV1TasksMoaCompletionsPostDefaultImplementation(e, "/api/v1/tasks/moa/completions", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorGenerateMoaResponseApiV1TasksMoaCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse(ILogger<GenerateMoaResponseApiV1TasksMoaCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateQueriesApiV1TasksQueriesCompletionsPost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateQueriesApiV1TasksQueriesCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterGenerateQueriesApiV1TasksQueriesCompletionsPostDefaultImplementation(IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGenerateQueriesApiV1TasksQueriesCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterGenerateQueriesApiV1TasksQueriesCompletionsPost(ref bool suppressDefaultLog, IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorGenerateQueriesApiV1TasksQueriesCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateQueriesApiV1TasksQueriesCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorGenerateQueriesApiV1TasksQueriesCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Generate Queries 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse?> GenerateQueriesApiV1TasksQueriesCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateQueriesApiV1TasksQueriesCompletionsPostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Queries 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse> GenerateQueriesApiV1TasksQueriesCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateQueriesApiV1TasksQueriesCompletionsPost(body);

                FormatGenerateQueriesApiV1TasksQueriesCompletionsPost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/queries/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/queries/completions");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse>();

                        GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/queries/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateQueriesApiV1TasksQueriesCompletionsPostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnGenerateQueriesApiV1TasksQueriesCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateQueriesApiV1TasksQueriesCompletionsPostDefaultImplementation(e, "/api/v1/tasks/queries/completions", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorGenerateQueriesApiV1TasksQueriesCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse(ILogger<GenerateQueriesApiV1TasksQueriesCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateTitleApiV1TasksTitleCompletionsPost(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateGenerateTitleApiV1TasksTitleCompletionsPost(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterGenerateTitleApiV1TasksTitleCompletionsPostDefaultImplementation(IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterGenerateTitleApiV1TasksTitleCompletionsPost(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterGenerateTitleApiV1TasksTitleCompletionsPost(ref bool suppressDefaultLog, IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        private void OnErrorGenerateTitleApiV1TasksTitleCompletionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateTitleApiV1TasksTitleCompletionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="body"></param>
        partial void OnErrorGenerateTitleApiV1TasksTitleCompletionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Object body);

        /// <summary>
        /// Generate Title 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse?> GenerateTitleApiV1TasksTitleCompletionsPostOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateTitleApiV1TasksTitleCompletionsPostAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Title 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse> GenerateTitleApiV1TasksTitleCompletionsPostAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateTitleApiV1TasksTitleCompletionsPost(body);

                FormatGenerateTitleApiV1TasksTitleCompletionsPost(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/title/completions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/title/completions");

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateTitleApiV1TasksTitleCompletionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateTitleApiV1TasksTitleCompletionsPostApiResponse>();

                        GenerateTitleApiV1TasksTitleCompletionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/title/completions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateTitleApiV1TasksTitleCompletionsPostDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnGenerateTitleApiV1TasksTitleCompletionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateTitleApiV1TasksTitleCompletionsPostDefaultImplementation(e, "/api/v1/tasks/title/completions", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorGenerateTitleApiV1TasksTitleCompletionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateTitleApiV1TasksTitleCompletionsPostApiResponse"/>
        /// </summary>
        public partial class GenerateTitleApiV1TasksTitleCompletionsPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateTitleApiV1TasksTitleCompletionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateTitleApiV1TasksTitleCompletionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateTitleApiV1TasksTitleCompletionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateTitleApiV1TasksTitleCompletionsPostApiResponse(ILogger<GenerateTitleApiV1TasksTitleCompletionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetTaskConfigApiV1TasksConfigGetDefaultImplementation(IGetTaskConfigApiV1TasksConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetTaskConfigApiV1TasksConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetTaskConfigApiV1TasksConfigGet(ref bool suppressDefaultLog, IGetTaskConfigApiV1TasksConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetTaskConfigApiV1TasksConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTaskConfigApiV1TasksConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetTaskConfigApiV1TasksConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Task Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTaskConfigApiV1TasksConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetTaskConfigApiV1TasksConfigGetApiResponse?> GetTaskConfigApiV1TasksConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTaskConfigApiV1TasksConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Task Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTaskConfigApiV1TasksConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetTaskConfigApiV1TasksConfigGetApiResponse> GetTaskConfigApiV1TasksConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTaskConfigApiV1TasksConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTaskConfigApiV1TasksConfigGetApiResponse>();

                        GetTaskConfigApiV1TasksConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTaskConfigApiV1TasksConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetTaskConfigApiV1TasksConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTaskConfigApiV1TasksConfigGetDefaultImplementation(e, "/api/v1/tasks/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetTaskConfigApiV1TasksConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTaskConfigApiV1TasksConfigGetApiResponse"/>
        /// </summary>
        public partial class GetTaskConfigApiV1TasksConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetTaskConfigApiV1TasksConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTaskConfigApiV1TasksConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTaskConfigApiV1TasksConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTaskConfigApiV1TasksConfigGetApiResponse(ILogger<GetTaskConfigApiV1TasksConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateTaskConfigApiV1TasksConfigUpdatePost(TaskConfigForm taskConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="taskConfigForm"></param>
        /// <returns></returns>
        private void ValidateUpdateTaskConfigApiV1TasksConfigUpdatePost(TaskConfigForm taskConfigForm)
        {
            if (taskConfigForm == null)
                throw new ArgumentNullException(nameof(taskConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="taskConfigForm"></param>
        private void AfterUpdateTaskConfigApiV1TasksConfigUpdatePostDefaultImplementation(IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse apiResponseLocalVar, TaskConfigForm taskConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateTaskConfigApiV1TasksConfigUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, taskConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="taskConfigForm"></param>
        partial void AfterUpdateTaskConfigApiV1TasksConfigUpdatePost(ref bool suppressDefaultLog, IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse apiResponseLocalVar, TaskConfigForm taskConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="taskConfigForm"></param>
        private void OnErrorUpdateTaskConfigApiV1TasksConfigUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TaskConfigForm taskConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateTaskConfigApiV1TasksConfigUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, taskConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="taskConfigForm"></param>
        partial void OnErrorUpdateTaskConfigApiV1TasksConfigUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, TaskConfigForm taskConfigForm);

        /// <summary>
        /// Update Task Config 
        /// </summary>
        /// <param name="taskConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse?> UpdateTaskConfigApiV1TasksConfigUpdatePostOrDefaultAsync(TaskConfigForm taskConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateTaskConfigApiV1TasksConfigUpdatePostAsync(taskConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Task Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse> UpdateTaskConfigApiV1TasksConfigUpdatePostAsync(TaskConfigForm taskConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateTaskConfigApiV1TasksConfigUpdatePost(taskConfigForm);

                FormatUpdateTaskConfigApiV1TasksConfigUpdatePost(taskConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/tasks/config/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/tasks/config/update");

                    httpRequestMessageLocalVar.Content = (taskConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(taskConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse>();

                        UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/tasks/config/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateTaskConfigApiV1TasksConfigUpdatePostDefaultImplementation(apiResponseLocalVar, taskConfigForm);

                        Events.ExecuteOnUpdateTaskConfigApiV1TasksConfigUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateTaskConfigApiV1TasksConfigUpdatePostDefaultImplementation(e, "/api/v1/tasks/config/update", uriBuilderLocalVar.Path, taskConfigForm);
                Events.ExecuteOnErrorUpdateTaskConfigApiV1TasksConfigUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse(ILogger<UpdateTaskConfigApiV1TasksConfigUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
