// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPromptsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PromptsApiEvents Events { get; }

        /// <summary>
        /// Create New Prompt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewPromptApiV1PromptsCreatePostApiResponse"/>&gt;</returns>
        Task<ICreateNewPromptApiV1PromptsCreatePostApiResponse> CreateNewPromptApiV1PromptsCreatePostAsync(PromptForm promptForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Prompt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="promptForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewPromptApiV1PromptsCreatePostApiResponse"/>?&gt;</returns>
        Task<ICreateNewPromptApiV1PromptsCreatePostApiResponse?> CreateNewPromptApiV1PromptsCreatePostOrDefaultAsync(PromptForm promptForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Prompt By Command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="command"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse"/>&gt;</returns>
        Task<IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse> DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteAsync(string command, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Prompt By Command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="command"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse"/>?&gt;</returns>
        Task<IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse?> DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteOrDefaultAsync(string command, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Prompt By Command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="command"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse"/>&gt;</returns>
        Task<IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse> GetPromptByCommandApiV1PromptsCommandCommandGetAsync(string command, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Prompt By Command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="command"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse"/>?&gt;</returns>
        Task<IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse?> GetPromptByCommandApiV1PromptsCommandCommandGetOrDefaultAsync(string command, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Prompt List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptListApiV1PromptsListGetApiResponse"/>&gt;</returns>
        Task<IGetPromptListApiV1PromptsListGetApiResponse> GetPromptListApiV1PromptsListGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Prompt List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptListApiV1PromptsListGetApiResponse"/>?&gt;</returns>
        Task<IGetPromptListApiV1PromptsListGetApiResponse?> GetPromptListApiV1PromptsListGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Prompts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptsApiV1PromptsGetApiResponse"/>&gt;</returns>
        Task<IGetPromptsApiV1PromptsGetApiResponse> GetPromptsApiV1PromptsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Prompts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptsApiV1PromptsGetApiResponse"/>?&gt;</returns>
        Task<IGetPromptsApiV1PromptsGetApiResponse?> GetPromptsApiV1PromptsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Prompt By Command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse> UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostAsync(string command, PromptForm promptForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Prompt By Command
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse?> UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostOrDefaultAsync(string command, PromptForm promptForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateNewPromptApiV1PromptsCreatePostApiResponse"/>
    /// </summary>
    public interface ICreateNewPromptApiV1PromptsCreatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PromptModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse"/>
    /// </summary>
    public interface IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse"/>
    /// </summary>
    public interface IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PromptModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetPromptListApiV1PromptsListGetApiResponse"/>
    /// </summary>
    public interface IGetPromptListApiV1PromptsListGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<PromptUserResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPromptsApiV1PromptsGetApiResponse"/>
    /// </summary>
    public interface IGetPromptsApiV1PromptsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<PromptModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PromptModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PromptsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNewPromptApiV1PromptsCreatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNewPromptApiV1PromptsCreatePost;

        internal void ExecuteOnCreateNewPromptApiV1PromptsCreatePost(PromptsApi.CreateNewPromptApiV1PromptsCreatePostApiResponse apiResponse)
        {
            OnCreateNewPromptApiV1PromptsCreatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewPromptApiV1PromptsCreatePost(Exception exception)
        {
            OnErrorCreateNewPromptApiV1PromptsCreatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete;

        internal void ExecuteOnDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(PromptsApi.DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse apiResponse)
        {
            OnDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(Exception exception)
        {
            OnErrorDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPromptByCommandApiV1PromptsCommandCommandGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPromptByCommandApiV1PromptsCommandCommandGet;

        internal void ExecuteOnGetPromptByCommandApiV1PromptsCommandCommandGet(PromptsApi.GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse apiResponse)
        {
            OnGetPromptByCommandApiV1PromptsCommandCommandGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPromptByCommandApiV1PromptsCommandCommandGet(Exception exception)
        {
            OnErrorGetPromptByCommandApiV1PromptsCommandCommandGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPromptListApiV1PromptsListGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPromptListApiV1PromptsListGet;

        internal void ExecuteOnGetPromptListApiV1PromptsListGet(PromptsApi.GetPromptListApiV1PromptsListGetApiResponse apiResponse)
        {
            OnGetPromptListApiV1PromptsListGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPromptListApiV1PromptsListGet(Exception exception)
        {
            OnErrorGetPromptListApiV1PromptsListGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPromptsApiV1PromptsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPromptsApiV1PromptsGet;

        internal void ExecuteOnGetPromptsApiV1PromptsGet(PromptsApi.GetPromptsApiV1PromptsGetApiResponse apiResponse)
        {
            OnGetPromptsApiV1PromptsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPromptsApiV1PromptsGet(Exception exception)
        {
            OnErrorGetPromptsApiV1PromptsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost;

        internal void ExecuteOnUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(PromptsApi.UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse apiResponse)
        {
            OnUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(Exception exception)
        {
            OnErrorUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PromptsApi : IPromptsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PromptsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PromptsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromptsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PromptsApi(ILogger<PromptsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PromptsApiEvents promptsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PromptsApi>();
            HttpClient = httpClient;
            Events = promptsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateNewPromptApiV1PromptsCreatePost(PromptForm promptForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="promptForm"></param>
        /// <returns></returns>
        private void ValidateCreateNewPromptApiV1PromptsCreatePost(PromptForm promptForm)
        {
            if (promptForm == null)
                throw new ArgumentNullException(nameof(promptForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="promptForm"></param>
        private void AfterCreateNewPromptApiV1PromptsCreatePostDefaultImplementation(ICreateNewPromptApiV1PromptsCreatePostApiResponse apiResponseLocalVar, PromptForm promptForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewPromptApiV1PromptsCreatePost(ref suppressDefaultLog, apiResponseLocalVar, promptForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="promptForm"></param>
        partial void AfterCreateNewPromptApiV1PromptsCreatePost(ref bool suppressDefaultLog, ICreateNewPromptApiV1PromptsCreatePostApiResponse apiResponseLocalVar, PromptForm promptForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="promptForm"></param>
        private void OnErrorCreateNewPromptApiV1PromptsCreatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PromptForm promptForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewPromptApiV1PromptsCreatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, promptForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="promptForm"></param>
        partial void OnErrorCreateNewPromptApiV1PromptsCreatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PromptForm promptForm);

        /// <summary>
        /// Create New Prompt 
        /// </summary>
        /// <param name="promptForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewPromptApiV1PromptsCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewPromptApiV1PromptsCreatePostApiResponse?> CreateNewPromptApiV1PromptsCreatePostOrDefaultAsync(PromptForm promptForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewPromptApiV1PromptsCreatePostAsync(promptForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create New Prompt 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="promptForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewPromptApiV1PromptsCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewPromptApiV1PromptsCreatePostApiResponse> CreateNewPromptApiV1PromptsCreatePostAsync(PromptForm promptForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewPromptApiV1PromptsCreatePost(promptForm);

                FormatCreateNewPromptApiV1PromptsCreatePost(promptForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/prompts/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/prompts/create");

                    httpRequestMessageLocalVar.Content = (promptForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(promptForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNewPromptApiV1PromptsCreatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewPromptApiV1PromptsCreatePostApiResponse>();

                        CreateNewPromptApiV1PromptsCreatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/prompts/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewPromptApiV1PromptsCreatePostDefaultImplementation(apiResponseLocalVar, promptForm);

                        Events.ExecuteOnCreateNewPromptApiV1PromptsCreatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewPromptApiV1PromptsCreatePostDefaultImplementation(e, "/api/v1/prompts/create", uriBuilderLocalVar.Path, promptForm);
                Events.ExecuteOnErrorCreateNewPromptApiV1PromptsCreatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewPromptApiV1PromptsCreatePostApiResponse"/>
        /// </summary>
        public partial class CreateNewPromptApiV1PromptsCreatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateNewPromptApiV1PromptsCreatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewPromptApiV1PromptsCreatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewPromptApiV1PromptsCreatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewPromptApiV1PromptsCreatePostApiResponse(ILogger<CreateNewPromptApiV1PromptsCreatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PromptModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PromptModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PromptModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(ref string command);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="command"></param>
        /// <returns></returns>
        private void ValidateDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(string command)
        {
            if (command == null)
                throw new ArgumentNullException(nameof(command));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="command"></param>
        private void AfterDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteDefaultImplementation(IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse apiResponseLocalVar, string command)
        {
            bool suppressDefaultLog = false;
            AfterDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(ref suppressDefaultLog, apiResponseLocalVar, command);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="command"></param>
        partial void AfterDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(ref bool suppressDefaultLog, IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse apiResponseLocalVar, string command);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="command"></param>
        private void OnErrorDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string command)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, command);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="command"></param>
        partial void OnErrorDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string command);

        /// <summary>
        /// Delete Prompt By Command 
        /// </summary>
        /// <param name="command"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse?> DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteOrDefaultAsync(string command, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteAsync(command, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Prompt By Command 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="command"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse> DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteAsync(string command, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(command);

                FormatDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(ref command);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/prompts/command/{command}/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/prompts/command/{command}/delete");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcommand%7D", Uri.EscapeDataString(command.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse>();

                        DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/prompts/command/{command}/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteDefaultImplementation(apiResponseLocalVar, command);

                        Events.ExecuteOnDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteDefaultImplementation(e, "/api/v1/prompts/command/{command}/delete", uriBuilderLocalVar.Path, command);
                Events.ExecuteOnErrorDeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse"/>
        /// </summary>
        public partial class DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse(ILogger<DeletePromptByCommandApiV1PromptsCommandCommandDeleteDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPromptByCommandApiV1PromptsCommandCommandGet(ref string command);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="command"></param>
        /// <returns></returns>
        private void ValidateGetPromptByCommandApiV1PromptsCommandCommandGet(string command)
        {
            if (command == null)
                throw new ArgumentNullException(nameof(command));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="command"></param>
        private void AfterGetPromptByCommandApiV1PromptsCommandCommandGetDefaultImplementation(IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse apiResponseLocalVar, string command)
        {
            bool suppressDefaultLog = false;
            AfterGetPromptByCommandApiV1PromptsCommandCommandGet(ref suppressDefaultLog, apiResponseLocalVar, command);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="command"></param>
        partial void AfterGetPromptByCommandApiV1PromptsCommandCommandGet(ref bool suppressDefaultLog, IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse apiResponseLocalVar, string command);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="command"></param>
        private void OnErrorGetPromptByCommandApiV1PromptsCommandCommandGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string command)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPromptByCommandApiV1PromptsCommandCommandGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, command);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="command"></param>
        partial void OnErrorGetPromptByCommandApiV1PromptsCommandCommandGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string command);

        /// <summary>
        /// Get Prompt By Command 
        /// </summary>
        /// <param name="command"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse"/>&gt;</returns>
        public async Task<IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse?> GetPromptByCommandApiV1PromptsCommandCommandGetOrDefaultAsync(string command, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPromptByCommandApiV1PromptsCommandCommandGetAsync(command, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Prompt By Command 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="command"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse"/>&gt;</returns>
        public async Task<IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse> GetPromptByCommandApiV1PromptsCommandCommandGetAsync(string command, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPromptByCommandApiV1PromptsCommandCommandGet(command);

                FormatGetPromptByCommandApiV1PromptsCommandCommandGet(ref command);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/prompts/command/{command}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/prompts/command/{command}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcommand%7D", Uri.EscapeDataString(command.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse>();

                        GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/prompts/command/{command}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPromptByCommandApiV1PromptsCommandCommandGetDefaultImplementation(apiResponseLocalVar, command);

                        Events.ExecuteOnGetPromptByCommandApiV1PromptsCommandCommandGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPromptByCommandApiV1PromptsCommandCommandGetDefaultImplementation(e, "/api/v1/prompts/command/{command}", uriBuilderLocalVar.Path, command);
                Events.ExecuteOnErrorGetPromptByCommandApiV1PromptsCommandCommandGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse"/>
        /// </summary>
        public partial class GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPromptByCommandApiV1PromptsCommandCommandGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse(ILogger<GetPromptByCommandApiV1PromptsCommandCommandGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PromptModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PromptModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PromptModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPromptListApiV1PromptsListGetDefaultImplementation(IGetPromptListApiV1PromptsListGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPromptListApiV1PromptsListGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPromptListApiV1PromptsListGet(ref bool suppressDefaultLog, IGetPromptListApiV1PromptsListGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetPromptListApiV1PromptsListGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPromptListApiV1PromptsListGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetPromptListApiV1PromptsListGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Prompt List 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptListApiV1PromptsListGetApiResponse"/>&gt;</returns>
        public async Task<IGetPromptListApiV1PromptsListGetApiResponse?> GetPromptListApiV1PromptsListGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPromptListApiV1PromptsListGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Prompt List 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptListApiV1PromptsListGetApiResponse"/>&gt;</returns>
        public async Task<IGetPromptListApiV1PromptsListGetApiResponse> GetPromptListApiV1PromptsListGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/prompts/list"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/prompts/list");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPromptListApiV1PromptsListGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPromptListApiV1PromptsListGetApiResponse>();

                        GetPromptListApiV1PromptsListGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/prompts/list", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPromptListApiV1PromptsListGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPromptListApiV1PromptsListGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPromptListApiV1PromptsListGetDefaultImplementation(e, "/api/v1/prompts/list", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPromptListApiV1PromptsListGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPromptListApiV1PromptsListGetApiResponse"/>
        /// </summary>
        public partial class GetPromptListApiV1PromptsListGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPromptListApiV1PromptsListGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPromptListApiV1PromptsListGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPromptListApiV1PromptsListGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPromptListApiV1PromptsListGetApiResponse(ILogger<GetPromptListApiV1PromptsListGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PromptUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PromptUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PromptUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPromptsApiV1PromptsGetDefaultImplementation(IGetPromptsApiV1PromptsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPromptsApiV1PromptsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPromptsApiV1PromptsGet(ref bool suppressDefaultLog, IGetPromptsApiV1PromptsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetPromptsApiV1PromptsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPromptsApiV1PromptsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetPromptsApiV1PromptsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Prompts 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptsApiV1PromptsGetApiResponse"/>&gt;</returns>
        public async Task<IGetPromptsApiV1PromptsGetApiResponse?> GetPromptsApiV1PromptsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPromptsApiV1PromptsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Prompts 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPromptsApiV1PromptsGetApiResponse"/>&gt;</returns>
        public async Task<IGetPromptsApiV1PromptsGetApiResponse> GetPromptsApiV1PromptsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/prompts/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/prompts/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPromptsApiV1PromptsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPromptsApiV1PromptsGetApiResponse>();

                        GetPromptsApiV1PromptsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/prompts/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPromptsApiV1PromptsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPromptsApiV1PromptsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPromptsApiV1PromptsGetDefaultImplementation(e, "/api/v1/prompts/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPromptsApiV1PromptsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPromptsApiV1PromptsGetApiResponse"/>
        /// </summary>
        public partial class GetPromptsApiV1PromptsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPromptsApiV1PromptsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPromptsApiV1PromptsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPromptsApiV1PromptsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPromptsApiV1PromptsGetApiResponse(ILogger<GetPromptsApiV1PromptsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PromptModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PromptModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PromptModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(ref string command, PromptForm promptForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        /// <returns></returns>
        private void ValidateUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(string command, PromptForm promptForm)
        {
            if (command == null)
                throw new ArgumentNullException(nameof(command));

            if (promptForm == null)
                throw new ArgumentNullException(nameof(promptForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        private void AfterUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostDefaultImplementation(IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse apiResponseLocalVar, string command, PromptForm promptForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, command, promptForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        partial void AfterUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(ref bool suppressDefaultLog, IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse apiResponseLocalVar, string command, PromptForm promptForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        private void OnErrorUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string command, PromptForm promptForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, command, promptForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        partial void OnErrorUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string command, PromptForm promptForm);

        /// <summary>
        /// Update Prompt By Command 
        /// </summary>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse?> UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostOrDefaultAsync(string command, PromptForm promptForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostAsync(command, promptForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Prompt By Command 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="command"></param>
        /// <param name="promptForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse> UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostAsync(string command, PromptForm promptForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(command, promptForm);

                FormatUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(ref command, promptForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/prompts/command/{command}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/prompts/command/{command}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcommand%7D", Uri.EscapeDataString(command.ToString()));

                    httpRequestMessageLocalVar.Content = (promptForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(promptForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse>();

                        UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/prompts/command/{command}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostDefaultImplementation(apiResponseLocalVar, command, promptForm);

                        Events.ExecuteOnUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostDefaultImplementation(e, "/api/v1/prompts/command/{command}/update", uriBuilderLocalVar.Path, command, promptForm);
                Events.ExecuteOnErrorUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse(ILogger<UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PromptModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PromptModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PromptModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
