// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAuthsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AuthsApiEvents Events { get; }

        /// <summary>
        /// Add User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserApiV1AuthsAddPostApiResponse"/>&gt;</returns>
        Task<IAddUserApiV1AuthsAddPostApiResponse> AddUserApiV1AuthsAddPostAsync(AddUserForm addUserForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="addUserForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserApiV1AuthsAddPostApiResponse"/>?&gt;</returns>
        Task<IAddUserApiV1AuthsAddPostApiResponse?> AddUserApiV1AuthsAddPostOrDefaultAsync(AddUserForm addUserForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Api Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse> DeleteApiKeyApiV1AuthsApiKeyDeleteAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Api Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse?> DeleteApiKeyApiV1AuthsApiKeyDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Api Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse"/>&gt;</returns>
        Task<IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse> GenerateApiKeyApiV1AuthsApiKeyPostAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generate Api Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse"/>?&gt;</returns>
        Task<IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse?> GenerateApiKeyApiV1AuthsApiKeyPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Admin Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse"/>&gt;</returns>
        Task<IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse> GetAdminConfigApiV1AuthsAdminConfigGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Admin Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse"/>?&gt;</returns>
        Task<IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse?> GetAdminConfigApiV1AuthsAdminConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Admin Details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse"/>&gt;</returns>
        Task<IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse> GetAdminDetailsApiV1AuthsAdminDetailsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Admin Details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse"/>?&gt;</returns>
        Task<IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse?> GetAdminDetailsApiV1AuthsAdminDetailsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Api Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiKeyApiV1AuthsApiKeyGetApiResponse"/>&gt;</returns>
        Task<IGetApiKeyApiV1AuthsApiKeyGetApiResponse> GetApiKeyApiV1AuthsApiKeyGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Api Key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiKeyApiV1AuthsApiKeyGetApiResponse"/>?&gt;</returns>
        Task<IGetApiKeyApiV1AuthsApiKeyGetApiResponse?> GetApiKeyApiV1AuthsApiKeyGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ldap Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse"/>&gt;</returns>
        Task<IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse> GetLdapConfigApiV1AuthsAdminConfigLdapGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ldap Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse"/>?&gt;</returns>
        Task<IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse?> GetLdapConfigApiV1AuthsAdminConfigLdapGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ldap Server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse"/>&gt;</returns>
        Task<IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse> GetLdapServerApiV1AuthsAdminConfigLdapServerGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Ldap Server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse"/>?&gt;</returns>
        Task<IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse?> GetLdapServerApiV1AuthsAdminConfigLdapServerGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserApiV1AuthsGetApiResponse"/>&gt;</returns>
        Task<IGetSessionUserApiV1AuthsGetApiResponse> GetSessionUserApiV1AuthsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Session User
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserApiV1AuthsGetApiResponse"/>?&gt;</returns>
        Task<IGetSessionUserApiV1AuthsGetApiResponse?> GetSessionUserApiV1AuthsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Ldap Auth
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILdapAuthApiV1AuthsLdapPostApiResponse"/>&gt;</returns>
        Task<ILdapAuthApiV1AuthsLdapPostApiResponse> LdapAuthApiV1AuthsLdapPostAsync(LdapForm ldapForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Ldap Auth
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="ldapForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILdapAuthApiV1AuthsLdapPostApiResponse"/>?&gt;</returns>
        Task<ILdapAuthApiV1AuthsLdapPostApiResponse?> LdapAuthApiV1AuthsLdapPostOrDefaultAsync(LdapForm ldapForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Signin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="signinForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISigninApiV1AuthsSigninPostApiResponse"/>&gt;</returns>
        Task<ISigninApiV1AuthsSigninPostApiResponse> SigninApiV1AuthsSigninPostAsync(SigninForm signinForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Signin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="signinForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISigninApiV1AuthsSigninPostApiResponse"/>?&gt;</returns>
        Task<ISigninApiV1AuthsSigninPostApiResponse?> SigninApiV1AuthsSigninPostOrDefaultAsync(SigninForm signinForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Signout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISignoutApiV1AuthsSignoutGetApiResponse"/>&gt;</returns>
        Task<ISignoutApiV1AuthsSignoutGetApiResponse> SignoutApiV1AuthsSignoutGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Signout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISignoutApiV1AuthsSignoutGetApiResponse"/>?&gt;</returns>
        Task<ISignoutApiV1AuthsSignoutGetApiResponse?> SignoutApiV1AuthsSignoutGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Signup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISignupApiV1AuthsSignupPostApiResponse"/>&gt;</returns>
        Task<ISignupApiV1AuthsSignupPostApiResponse> SignupApiV1AuthsSignupPostAsync(SignupForm signupForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Signup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="signupForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISignupApiV1AuthsSignupPostApiResponse"/>?&gt;</returns>
        Task<ISignupApiV1AuthsSignupPostApiResponse?> SignupApiV1AuthsSignupPostOrDefaultAsync(SignupForm signupForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Admin Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminConfig"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse"/>&gt;</returns>
        Task<IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse> UpdateAdminConfigApiV1AuthsAdminConfigPostAsync(AdminConfig adminConfig, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Admin Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="adminConfig"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse"/>?&gt;</returns>
        Task<IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse?> UpdateAdminConfigApiV1AuthsAdminConfigPostOrDefaultAsync(AdminConfig adminConfig, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Ldap Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse"/>&gt;</returns>
        Task<IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse> UpdateLdapConfigApiV1AuthsAdminConfigLdapPostAsync(LdapConfigForm ldapConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Ldap Config
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="ldapConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse"/>?&gt;</returns>
        Task<IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse?> UpdateLdapConfigApiV1AuthsAdminConfigLdapPostOrDefaultAsync(LdapConfigForm ldapConfigForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Ldap Server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapServerConfig"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse"/>&gt;</returns>
        Task<IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse> UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostAsync(LdapServerConfig ldapServerConfig, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Ldap Server
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="ldapServerConfig"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse"/>?&gt;</returns>
        Task<IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse?> UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostOrDefaultAsync(LdapServerConfig ldapServerConfig, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse"/>&gt;</returns>
        Task<IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse> UpdatePasswordApiV1AuthsUpdatePasswordPostAsync(UpdatePasswordForm updatePasswordForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Password
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="updatePasswordForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse"/>?&gt;</returns>
        Task<IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse?> UpdatePasswordApiV1AuthsUpdatePasswordPostOrDefaultAsync(UpdatePasswordForm updatePasswordForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfileForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse"/>&gt;</returns>
        Task<IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse> UpdateProfileApiV1AuthsUpdateProfilePostAsync(UpdateProfileForm updateProfileForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="updateProfileForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse"/>?&gt;</returns>
        Task<IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse?> UpdateProfileApiV1AuthsUpdateProfilePostOrDefaultAsync(UpdateProfileForm updateProfileForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddUserApiV1AuthsAddPostApiResponse"/>
    /// </summary>
    public interface IAddUserApiV1AuthsAddPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SigninResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse"/>
    /// </summary>
    public interface IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ApiKey?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse"/>
    /// </summary>
    public interface IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse"/>
    /// </summary>
    public interface IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetApiKeyApiV1AuthsApiKeyGetApiResponse"/>
    /// </summary>
    public interface IGetApiKeyApiV1AuthsApiKeyGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ApiKey?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse"/>
    /// </summary>
    public interface IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse"/>
    /// </summary>
    public interface IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.LdapServerConfig?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetSessionUserApiV1AuthsGetApiResponse"/>
    /// </summary>
    public interface IGetSessionUserApiV1AuthsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SessionUserResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ILdapAuthApiV1AuthsLdapPostApiResponse"/>
    /// </summary>
    public interface ILdapAuthApiV1AuthsLdapPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SessionUserResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISigninApiV1AuthsSigninPostApiResponse"/>
    /// </summary>
    public interface ISigninApiV1AuthsSigninPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SessionUserResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ISignoutApiV1AuthsSignoutGetApiResponse"/>
    /// </summary>
    public interface ISignoutApiV1AuthsSignoutGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ISignupApiV1AuthsSignupPostApiResponse"/>
    /// </summary>
    public interface ISignupApiV1AuthsSignupPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.SessionUserResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse"/>
    /// </summary>
    public interface IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse"/>
    /// </summary>
    public interface IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse"/>
    /// </summary>
    public interface IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse"/>
    /// </summary>
    public interface IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse"/>
    /// </summary>
    public interface IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.OpenWebuiModelsAuthsUserResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AuthsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddUserApiV1AuthsAddPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddUserApiV1AuthsAddPost;

        internal void ExecuteOnAddUserApiV1AuthsAddPost(AuthsApi.AddUserApiV1AuthsAddPostApiResponse apiResponse)
        {
            OnAddUserApiV1AuthsAddPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddUserApiV1AuthsAddPost(Exception exception)
        {
            OnErrorAddUserApiV1AuthsAddPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteApiKeyApiV1AuthsApiKeyDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteApiKeyApiV1AuthsApiKeyDelete;

        internal void ExecuteOnDeleteApiKeyApiV1AuthsApiKeyDelete(AuthsApi.DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse apiResponse)
        {
            OnDeleteApiKeyApiV1AuthsApiKeyDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteApiKeyApiV1AuthsApiKeyDelete(Exception exception)
        {
            OnErrorDeleteApiKeyApiV1AuthsApiKeyDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateApiKeyApiV1AuthsApiKeyPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateApiKeyApiV1AuthsApiKeyPost;

        internal void ExecuteOnGenerateApiKeyApiV1AuthsApiKeyPost(AuthsApi.GenerateApiKeyApiV1AuthsApiKeyPostApiResponse apiResponse)
        {
            OnGenerateApiKeyApiV1AuthsApiKeyPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateApiKeyApiV1AuthsApiKeyPost(Exception exception)
        {
            OnErrorGenerateApiKeyApiV1AuthsApiKeyPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAdminConfigApiV1AuthsAdminConfigGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAdminConfigApiV1AuthsAdminConfigGet;

        internal void ExecuteOnGetAdminConfigApiV1AuthsAdminConfigGet(AuthsApi.GetAdminConfigApiV1AuthsAdminConfigGetApiResponse apiResponse)
        {
            OnGetAdminConfigApiV1AuthsAdminConfigGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAdminConfigApiV1AuthsAdminConfigGet(Exception exception)
        {
            OnErrorGetAdminConfigApiV1AuthsAdminConfigGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAdminDetailsApiV1AuthsAdminDetailsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAdminDetailsApiV1AuthsAdminDetailsGet;

        internal void ExecuteOnGetAdminDetailsApiV1AuthsAdminDetailsGet(AuthsApi.GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse apiResponse)
        {
            OnGetAdminDetailsApiV1AuthsAdminDetailsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAdminDetailsApiV1AuthsAdminDetailsGet(Exception exception)
        {
            OnErrorGetAdminDetailsApiV1AuthsAdminDetailsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetApiKeyApiV1AuthsApiKeyGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetApiKeyApiV1AuthsApiKeyGet;

        internal void ExecuteOnGetApiKeyApiV1AuthsApiKeyGet(AuthsApi.GetApiKeyApiV1AuthsApiKeyGetApiResponse apiResponse)
        {
            OnGetApiKeyApiV1AuthsApiKeyGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetApiKeyApiV1AuthsApiKeyGet(Exception exception)
        {
            OnErrorGetApiKeyApiV1AuthsApiKeyGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLdapConfigApiV1AuthsAdminConfigLdapGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLdapConfigApiV1AuthsAdminConfigLdapGet;

        internal void ExecuteOnGetLdapConfigApiV1AuthsAdminConfigLdapGet(AuthsApi.GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse apiResponse)
        {
            OnGetLdapConfigApiV1AuthsAdminConfigLdapGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLdapConfigApiV1AuthsAdminConfigLdapGet(Exception exception)
        {
            OnErrorGetLdapConfigApiV1AuthsAdminConfigLdapGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLdapServerApiV1AuthsAdminConfigLdapServerGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLdapServerApiV1AuthsAdminConfigLdapServerGet;

        internal void ExecuteOnGetLdapServerApiV1AuthsAdminConfigLdapServerGet(AuthsApi.GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse apiResponse)
        {
            OnGetLdapServerApiV1AuthsAdminConfigLdapServerGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLdapServerApiV1AuthsAdminConfigLdapServerGet(Exception exception)
        {
            OnErrorGetLdapServerApiV1AuthsAdminConfigLdapServerGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSessionUserApiV1AuthsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSessionUserApiV1AuthsGet;

        internal void ExecuteOnGetSessionUserApiV1AuthsGet(AuthsApi.GetSessionUserApiV1AuthsGetApiResponse apiResponse)
        {
            OnGetSessionUserApiV1AuthsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSessionUserApiV1AuthsGet(Exception exception)
        {
            OnErrorGetSessionUserApiV1AuthsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLdapAuthApiV1AuthsLdapPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLdapAuthApiV1AuthsLdapPost;

        internal void ExecuteOnLdapAuthApiV1AuthsLdapPost(AuthsApi.LdapAuthApiV1AuthsLdapPostApiResponse apiResponse)
        {
            OnLdapAuthApiV1AuthsLdapPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLdapAuthApiV1AuthsLdapPost(Exception exception)
        {
            OnErrorLdapAuthApiV1AuthsLdapPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSigninApiV1AuthsSigninPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSigninApiV1AuthsSigninPost;

        internal void ExecuteOnSigninApiV1AuthsSigninPost(AuthsApi.SigninApiV1AuthsSigninPostApiResponse apiResponse)
        {
            OnSigninApiV1AuthsSigninPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSigninApiV1AuthsSigninPost(Exception exception)
        {
            OnErrorSigninApiV1AuthsSigninPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSignoutApiV1AuthsSignoutGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSignoutApiV1AuthsSignoutGet;

        internal void ExecuteOnSignoutApiV1AuthsSignoutGet(AuthsApi.SignoutApiV1AuthsSignoutGetApiResponse apiResponse)
        {
            OnSignoutApiV1AuthsSignoutGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSignoutApiV1AuthsSignoutGet(Exception exception)
        {
            OnErrorSignoutApiV1AuthsSignoutGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSignupApiV1AuthsSignupPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSignupApiV1AuthsSignupPost;

        internal void ExecuteOnSignupApiV1AuthsSignupPost(AuthsApi.SignupApiV1AuthsSignupPostApiResponse apiResponse)
        {
            OnSignupApiV1AuthsSignupPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSignupApiV1AuthsSignupPost(Exception exception)
        {
            OnErrorSignupApiV1AuthsSignupPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateAdminConfigApiV1AuthsAdminConfigPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateAdminConfigApiV1AuthsAdminConfigPost;

        internal void ExecuteOnUpdateAdminConfigApiV1AuthsAdminConfigPost(AuthsApi.UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse apiResponse)
        {
            OnUpdateAdminConfigApiV1AuthsAdminConfigPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateAdminConfigApiV1AuthsAdminConfigPost(Exception exception)
        {
            OnErrorUpdateAdminConfigApiV1AuthsAdminConfigPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateLdapConfigApiV1AuthsAdminConfigLdapPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateLdapConfigApiV1AuthsAdminConfigLdapPost;

        internal void ExecuteOnUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(AuthsApi.UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse apiResponse)
        {
            OnUpdateLdapConfigApiV1AuthsAdminConfigLdapPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(Exception exception)
        {
            OnErrorUpdateLdapConfigApiV1AuthsAdminConfigLdapPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost;

        internal void ExecuteOnUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(AuthsApi.UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse apiResponse)
        {
            OnUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(Exception exception)
        {
            OnErrorUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdatePasswordApiV1AuthsUpdatePasswordPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdatePasswordApiV1AuthsUpdatePasswordPost;

        internal void ExecuteOnUpdatePasswordApiV1AuthsUpdatePasswordPost(AuthsApi.UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse apiResponse)
        {
            OnUpdatePasswordApiV1AuthsUpdatePasswordPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdatePasswordApiV1AuthsUpdatePasswordPost(Exception exception)
        {
            OnErrorUpdatePasswordApiV1AuthsUpdatePasswordPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateProfileApiV1AuthsUpdateProfilePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateProfileApiV1AuthsUpdateProfilePost;

        internal void ExecuteOnUpdateProfileApiV1AuthsUpdateProfilePost(AuthsApi.UpdateProfileApiV1AuthsUpdateProfilePostApiResponse apiResponse)
        {
            OnUpdateProfileApiV1AuthsUpdateProfilePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateProfileApiV1AuthsUpdateProfilePost(Exception exception)
        {
            OnErrorUpdateProfileApiV1AuthsUpdateProfilePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AuthsApi : IAuthsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AuthsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AuthsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthsApi(ILogger<AuthsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AuthsApiEvents authsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AuthsApi>();
            HttpClient = httpClient;
            Events = authsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAddUserApiV1AuthsAddPost(AddUserForm addUserForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addUserForm"></param>
        /// <returns></returns>
        private void ValidateAddUserApiV1AuthsAddPost(AddUserForm addUserForm)
        {
            if (addUserForm == null)
                throw new ArgumentNullException(nameof(addUserForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addUserForm"></param>
        private void AfterAddUserApiV1AuthsAddPostDefaultImplementation(IAddUserApiV1AuthsAddPostApiResponse apiResponseLocalVar, AddUserForm addUserForm)
        {
            bool suppressDefaultLog = false;
            AfterAddUserApiV1AuthsAddPost(ref suppressDefaultLog, apiResponseLocalVar, addUserForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addUserForm"></param>
        partial void AfterAddUserApiV1AuthsAddPost(ref bool suppressDefaultLog, IAddUserApiV1AuthsAddPostApiResponse apiResponseLocalVar, AddUserForm addUserForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addUserForm"></param>
        private void OnErrorAddUserApiV1AuthsAddPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddUserForm addUserForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddUserApiV1AuthsAddPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addUserForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addUserForm"></param>
        partial void OnErrorAddUserApiV1AuthsAddPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddUserForm addUserForm);

        /// <summary>
        /// Add User 
        /// </summary>
        /// <param name="addUserForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserApiV1AuthsAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddUserApiV1AuthsAddPostApiResponse?> AddUserApiV1AuthsAddPostOrDefaultAsync(AddUserForm addUserForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddUserApiV1AuthsAddPostAsync(addUserForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add User 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addUserForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserApiV1AuthsAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddUserApiV1AuthsAddPostApiResponse> AddUserApiV1AuthsAddPostAsync(AddUserForm addUserForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddUserApiV1AuthsAddPost(addUserForm);

                FormatAddUserApiV1AuthsAddPost(addUserForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/add"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/add");

                    httpRequestMessageLocalVar.Content = (addUserForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addUserForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddUserApiV1AuthsAddPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddUserApiV1AuthsAddPostApiResponse>();

                        AddUserApiV1AuthsAddPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddUserApiV1AuthsAddPostDefaultImplementation(apiResponseLocalVar, addUserForm);

                        Events.ExecuteOnAddUserApiV1AuthsAddPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddUserApiV1AuthsAddPostDefaultImplementation(e, "/api/v1/auths/add", uriBuilderLocalVar.Path, addUserForm);
                Events.ExecuteOnErrorAddUserApiV1AuthsAddPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddUserApiV1AuthsAddPostApiResponse"/>
        /// </summary>
        public partial class AddUserApiV1AuthsAddPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IAddUserApiV1AuthsAddPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddUserApiV1AuthsAddPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddUserApiV1AuthsAddPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUserApiV1AuthsAddPostApiResponse(ILogger<AddUserApiV1AuthsAddPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SigninResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SigninResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SigninResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDeleteApiKeyApiV1AuthsApiKeyDeleteDefaultImplementation(IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDeleteApiKeyApiV1AuthsApiKeyDelete(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDeleteApiKeyApiV1AuthsApiKeyDelete(ref bool suppressDefaultLog, IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDeleteApiKeyApiV1AuthsApiKeyDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteApiKeyApiV1AuthsApiKeyDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDeleteApiKeyApiV1AuthsApiKeyDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Delete Api Key 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse?> DeleteApiKeyApiV1AuthsApiKeyDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteApiKeyApiV1AuthsApiKeyDeleteAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Api Key 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse> DeleteApiKeyApiV1AuthsApiKeyDeleteAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/api_key"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/api_key");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse>();

                        DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/api_key", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteApiKeyApiV1AuthsApiKeyDeleteDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDeleteApiKeyApiV1AuthsApiKeyDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteApiKeyApiV1AuthsApiKeyDeleteDefaultImplementation(e, "/api/v1/auths/api_key", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDeleteApiKeyApiV1AuthsApiKeyDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse(ILogger<DeleteApiKeyApiV1AuthsApiKeyDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGenerateApiKeyApiV1AuthsApiKeyPostDefaultImplementation(IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGenerateApiKeyApiV1AuthsApiKeyPost(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGenerateApiKeyApiV1AuthsApiKeyPost(ref bool suppressDefaultLog, IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGenerateApiKeyApiV1AuthsApiKeyPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGenerateApiKeyApiV1AuthsApiKeyPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGenerateApiKeyApiV1AuthsApiKeyPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Generate Api Key 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse?> GenerateApiKeyApiV1AuthsApiKeyPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateApiKeyApiV1AuthsApiKeyPostAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generate Api Key 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse"/>&gt;</returns>
        public async Task<IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse> GenerateApiKeyApiV1AuthsApiKeyPostAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/api_key"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/api_key");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateApiKeyApiV1AuthsApiKeyPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateApiKeyApiV1AuthsApiKeyPostApiResponse>();

                        GenerateApiKeyApiV1AuthsApiKeyPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/api_key", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateApiKeyApiV1AuthsApiKeyPostDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGenerateApiKeyApiV1AuthsApiKeyPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateApiKeyApiV1AuthsApiKeyPostDefaultImplementation(e, "/api/v1/auths/api_key", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGenerateApiKeyApiV1AuthsApiKeyPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateApiKeyApiV1AuthsApiKeyPostApiResponse"/>
        /// </summary>
        public partial class GenerateApiKeyApiV1AuthsApiKeyPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IGenerateApiKeyApiV1AuthsApiKeyPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateApiKeyApiV1AuthsApiKeyPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateApiKeyApiV1AuthsApiKeyPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateApiKeyApiV1AuthsApiKeyPostApiResponse(ILogger<GenerateApiKeyApiV1AuthsApiKeyPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ApiKey? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ApiKey>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ApiKey? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAdminConfigApiV1AuthsAdminConfigGetDefaultImplementation(IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAdminConfigApiV1AuthsAdminConfigGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAdminConfigApiV1AuthsAdminConfigGet(ref bool suppressDefaultLog, IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAdminConfigApiV1AuthsAdminConfigGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAdminConfigApiV1AuthsAdminConfigGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAdminConfigApiV1AuthsAdminConfigGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Admin Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse?> GetAdminConfigApiV1AuthsAdminConfigGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAdminConfigApiV1AuthsAdminConfigGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Admin Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse"/>&gt;</returns>
        public async Task<IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse> GetAdminConfigApiV1AuthsAdminConfigGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/admin/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/admin/config");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAdminConfigApiV1AuthsAdminConfigGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAdminConfigApiV1AuthsAdminConfigGetApiResponse>();

                        GetAdminConfigApiV1AuthsAdminConfigGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/admin/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAdminConfigApiV1AuthsAdminConfigGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAdminConfigApiV1AuthsAdminConfigGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAdminConfigApiV1AuthsAdminConfigGetDefaultImplementation(e, "/api/v1/auths/admin/config", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAdminConfigApiV1AuthsAdminConfigGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAdminConfigApiV1AuthsAdminConfigGetApiResponse"/>
        /// </summary>
        public partial class GetAdminConfigApiV1AuthsAdminConfigGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAdminConfigApiV1AuthsAdminConfigGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAdminConfigApiV1AuthsAdminConfigGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAdminConfigApiV1AuthsAdminConfigGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAdminConfigApiV1AuthsAdminConfigGetApiResponse(ILogger<GetAdminConfigApiV1AuthsAdminConfigGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAdminDetailsApiV1AuthsAdminDetailsGetDefaultImplementation(IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAdminDetailsApiV1AuthsAdminDetailsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAdminDetailsApiV1AuthsAdminDetailsGet(ref bool suppressDefaultLog, IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAdminDetailsApiV1AuthsAdminDetailsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAdminDetailsApiV1AuthsAdminDetailsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAdminDetailsApiV1AuthsAdminDetailsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Admin Details 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse?> GetAdminDetailsApiV1AuthsAdminDetailsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAdminDetailsApiV1AuthsAdminDetailsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Admin Details 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse"/>&gt;</returns>
        public async Task<IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse> GetAdminDetailsApiV1AuthsAdminDetailsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/admin/details"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/admin/details");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse>();

                        GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/admin/details", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAdminDetailsApiV1AuthsAdminDetailsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAdminDetailsApiV1AuthsAdminDetailsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAdminDetailsApiV1AuthsAdminDetailsGetDefaultImplementation(e, "/api/v1/auths/admin/details", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAdminDetailsApiV1AuthsAdminDetailsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse"/>
        /// </summary>
        public partial class GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse(ILogger<GetAdminDetailsApiV1AuthsAdminDetailsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetApiKeyApiV1AuthsApiKeyGetDefaultImplementation(IGetApiKeyApiV1AuthsApiKeyGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetApiKeyApiV1AuthsApiKeyGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetApiKeyApiV1AuthsApiKeyGet(ref bool suppressDefaultLog, IGetApiKeyApiV1AuthsApiKeyGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetApiKeyApiV1AuthsApiKeyGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetApiKeyApiV1AuthsApiKeyGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetApiKeyApiV1AuthsApiKeyGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Api Key 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiKeyApiV1AuthsApiKeyGetApiResponse"/>&gt;</returns>
        public async Task<IGetApiKeyApiV1AuthsApiKeyGetApiResponse?> GetApiKeyApiV1AuthsApiKeyGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetApiKeyApiV1AuthsApiKeyGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Api Key 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetApiKeyApiV1AuthsApiKeyGetApiResponse"/>&gt;</returns>
        public async Task<IGetApiKeyApiV1AuthsApiKeyGetApiResponse> GetApiKeyApiV1AuthsApiKeyGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/api_key"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/api_key");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetApiKeyApiV1AuthsApiKeyGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetApiKeyApiV1AuthsApiKeyGetApiResponse>();

                        GetApiKeyApiV1AuthsApiKeyGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/api_key", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetApiKeyApiV1AuthsApiKeyGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetApiKeyApiV1AuthsApiKeyGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetApiKeyApiV1AuthsApiKeyGetDefaultImplementation(e, "/api/v1/auths/api_key", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetApiKeyApiV1AuthsApiKeyGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetApiKeyApiV1AuthsApiKeyGetApiResponse"/>
        /// </summary>
        public partial class GetApiKeyApiV1AuthsApiKeyGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetApiKeyApiV1AuthsApiKeyGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetApiKeyApiV1AuthsApiKeyGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetApiKeyApiV1AuthsApiKeyGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetApiKeyApiV1AuthsApiKeyGetApiResponse(ILogger<GetApiKeyApiV1AuthsApiKeyGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ApiKey? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ApiKey>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ApiKey? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetLdapConfigApiV1AuthsAdminConfigLdapGetDefaultImplementation(IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetLdapConfigApiV1AuthsAdminConfigLdapGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetLdapConfigApiV1AuthsAdminConfigLdapGet(ref bool suppressDefaultLog, IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetLdapConfigApiV1AuthsAdminConfigLdapGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLdapConfigApiV1AuthsAdminConfigLdapGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetLdapConfigApiV1AuthsAdminConfigLdapGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Ldap Config 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse"/>&gt;</returns>
        public async Task<IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse?> GetLdapConfigApiV1AuthsAdminConfigLdapGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLdapConfigApiV1AuthsAdminConfigLdapGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Ldap Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse"/>&gt;</returns>
        public async Task<IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse> GetLdapConfigApiV1AuthsAdminConfigLdapGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/admin/config/ldap"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/admin/config/ldap");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse>();

                        GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/admin/config/ldap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLdapConfigApiV1AuthsAdminConfigLdapGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetLdapConfigApiV1AuthsAdminConfigLdapGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLdapConfigApiV1AuthsAdminConfigLdapGetDefaultImplementation(e, "/api/v1/auths/admin/config/ldap", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetLdapConfigApiV1AuthsAdminConfigLdapGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse"/>
        /// </summary>
        public partial class GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse(ILogger<GetLdapConfigApiV1AuthsAdminConfigLdapGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetLdapServerApiV1AuthsAdminConfigLdapServerGetDefaultImplementation(IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetLdapServerApiV1AuthsAdminConfigLdapServerGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetLdapServerApiV1AuthsAdminConfigLdapServerGet(ref bool suppressDefaultLog, IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetLdapServerApiV1AuthsAdminConfigLdapServerGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetLdapServerApiV1AuthsAdminConfigLdapServerGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetLdapServerApiV1AuthsAdminConfigLdapServerGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Ldap Server 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse"/>&gt;</returns>
        public async Task<IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse?> GetLdapServerApiV1AuthsAdminConfigLdapServerGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLdapServerApiV1AuthsAdminConfigLdapServerGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Ldap Server 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse"/>&gt;</returns>
        public async Task<IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse> GetLdapServerApiV1AuthsAdminConfigLdapServerGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/admin/config/ldap/server"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/admin/config/ldap/server");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse>();

                        GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/admin/config/ldap/server", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLdapServerApiV1AuthsAdminConfigLdapServerGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetLdapServerApiV1AuthsAdminConfigLdapServerGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLdapServerApiV1AuthsAdminConfigLdapServerGetDefaultImplementation(e, "/api/v1/auths/admin/config/ldap/server", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetLdapServerApiV1AuthsAdminConfigLdapServerGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse"/>
        /// </summary>
        public partial class GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse(ILogger<GetLdapServerApiV1AuthsAdminConfigLdapServerGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.LdapServerConfig? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.LdapServerConfig>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.LdapServerConfig? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetSessionUserApiV1AuthsGetDefaultImplementation(IGetSessionUserApiV1AuthsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetSessionUserApiV1AuthsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetSessionUserApiV1AuthsGet(ref bool suppressDefaultLog, IGetSessionUserApiV1AuthsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetSessionUserApiV1AuthsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSessionUserApiV1AuthsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetSessionUserApiV1AuthsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Session User 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserApiV1AuthsGetApiResponse"/>&gt;</returns>
        public async Task<IGetSessionUserApiV1AuthsGetApiResponse?> GetSessionUserApiV1AuthsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSessionUserApiV1AuthsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Session User 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSessionUserApiV1AuthsGetApiResponse"/>&gt;</returns>
        public async Task<IGetSessionUserApiV1AuthsGetApiResponse> GetSessionUserApiV1AuthsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSessionUserApiV1AuthsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSessionUserApiV1AuthsGetApiResponse>();

                        GetSessionUserApiV1AuthsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSessionUserApiV1AuthsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetSessionUserApiV1AuthsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSessionUserApiV1AuthsGetDefaultImplementation(e, "/api/v1/auths/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetSessionUserApiV1AuthsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSessionUserApiV1AuthsGetApiResponse"/>
        /// </summary>
        public partial class GetSessionUserApiV1AuthsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSessionUserApiV1AuthsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSessionUserApiV1AuthsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSessionUserApiV1AuthsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSessionUserApiV1AuthsGetApiResponse(ILogger<GetSessionUserApiV1AuthsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SessionUserResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SessionUserResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SessionUserResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLdapAuthApiV1AuthsLdapPost(LdapForm ldapForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ldapForm"></param>
        /// <returns></returns>
        private void ValidateLdapAuthApiV1AuthsLdapPost(LdapForm ldapForm)
        {
            if (ldapForm == null)
                throw new ArgumentNullException(nameof(ldapForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ldapForm"></param>
        private void AfterLdapAuthApiV1AuthsLdapPostDefaultImplementation(ILdapAuthApiV1AuthsLdapPostApiResponse apiResponseLocalVar, LdapForm ldapForm)
        {
            bool suppressDefaultLog = false;
            AfterLdapAuthApiV1AuthsLdapPost(ref suppressDefaultLog, apiResponseLocalVar, ldapForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ldapForm"></param>
        partial void AfterLdapAuthApiV1AuthsLdapPost(ref bool suppressDefaultLog, ILdapAuthApiV1AuthsLdapPostApiResponse apiResponseLocalVar, LdapForm ldapForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ldapForm"></param>
        private void OnErrorLdapAuthApiV1AuthsLdapPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LdapForm ldapForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorLdapAuthApiV1AuthsLdapPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, ldapForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ldapForm"></param>
        partial void OnErrorLdapAuthApiV1AuthsLdapPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LdapForm ldapForm);

        /// <summary>
        /// Ldap Auth 
        /// </summary>
        /// <param name="ldapForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILdapAuthApiV1AuthsLdapPostApiResponse"/>&gt;</returns>
        public async Task<ILdapAuthApiV1AuthsLdapPostApiResponse?> LdapAuthApiV1AuthsLdapPostOrDefaultAsync(LdapForm ldapForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LdapAuthApiV1AuthsLdapPostAsync(ldapForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Ldap Auth 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILdapAuthApiV1AuthsLdapPostApiResponse"/>&gt;</returns>
        public async Task<ILdapAuthApiV1AuthsLdapPostApiResponse> LdapAuthApiV1AuthsLdapPostAsync(LdapForm ldapForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLdapAuthApiV1AuthsLdapPost(ldapForm);

                FormatLdapAuthApiV1AuthsLdapPost(ldapForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/ldap"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/ldap");

                    httpRequestMessageLocalVar.Content = (ldapForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ldapForm, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LdapAuthApiV1AuthsLdapPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LdapAuthApiV1AuthsLdapPostApiResponse>();

                        LdapAuthApiV1AuthsLdapPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/ldap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLdapAuthApiV1AuthsLdapPostDefaultImplementation(apiResponseLocalVar, ldapForm);

                        Events.ExecuteOnLdapAuthApiV1AuthsLdapPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLdapAuthApiV1AuthsLdapPostDefaultImplementation(e, "/api/v1/auths/ldap", uriBuilderLocalVar.Path, ldapForm);
                Events.ExecuteOnErrorLdapAuthApiV1AuthsLdapPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LdapAuthApiV1AuthsLdapPostApiResponse"/>
        /// </summary>
        public partial class LdapAuthApiV1AuthsLdapPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ILdapAuthApiV1AuthsLdapPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LdapAuthApiV1AuthsLdapPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LdapAuthApiV1AuthsLdapPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LdapAuthApiV1AuthsLdapPostApiResponse(ILogger<LdapAuthApiV1AuthsLdapPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SessionUserResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SessionUserResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SessionUserResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSigninApiV1AuthsSigninPost(SigninForm signinForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="signinForm"></param>
        /// <returns></returns>
        private void ValidateSigninApiV1AuthsSigninPost(SigninForm signinForm)
        {
            if (signinForm == null)
                throw new ArgumentNullException(nameof(signinForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="signinForm"></param>
        private void AfterSigninApiV1AuthsSigninPostDefaultImplementation(ISigninApiV1AuthsSigninPostApiResponse apiResponseLocalVar, SigninForm signinForm)
        {
            bool suppressDefaultLog = false;
            AfterSigninApiV1AuthsSigninPost(ref suppressDefaultLog, apiResponseLocalVar, signinForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="signinForm"></param>
        partial void AfterSigninApiV1AuthsSigninPost(ref bool suppressDefaultLog, ISigninApiV1AuthsSigninPostApiResponse apiResponseLocalVar, SigninForm signinForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="signinForm"></param>
        private void OnErrorSigninApiV1AuthsSigninPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SigninForm signinForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSigninApiV1AuthsSigninPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, signinForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="signinForm"></param>
        partial void OnErrorSigninApiV1AuthsSigninPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SigninForm signinForm);

        /// <summary>
        /// Signin 
        /// </summary>
        /// <param name="signinForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISigninApiV1AuthsSigninPostApiResponse"/>&gt;</returns>
        public async Task<ISigninApiV1AuthsSigninPostApiResponse?> SigninApiV1AuthsSigninPostOrDefaultAsync(SigninForm signinForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SigninApiV1AuthsSigninPostAsync(signinForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Signin 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="signinForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISigninApiV1AuthsSigninPostApiResponse"/>&gt;</returns>
        public async Task<ISigninApiV1AuthsSigninPostApiResponse> SigninApiV1AuthsSigninPostAsync(SigninForm signinForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSigninApiV1AuthsSigninPost(signinForm);

                FormatSigninApiV1AuthsSigninPost(signinForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/signin"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/signin");

                    httpRequestMessageLocalVar.Content = (signinForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(signinForm, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SigninApiV1AuthsSigninPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SigninApiV1AuthsSigninPostApiResponse>();

                        SigninApiV1AuthsSigninPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/signin", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSigninApiV1AuthsSigninPostDefaultImplementation(apiResponseLocalVar, signinForm);

                        Events.ExecuteOnSigninApiV1AuthsSigninPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSigninApiV1AuthsSigninPostDefaultImplementation(e, "/api/v1/auths/signin", uriBuilderLocalVar.Path, signinForm);
                Events.ExecuteOnErrorSigninApiV1AuthsSigninPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SigninApiV1AuthsSigninPostApiResponse"/>
        /// </summary>
        public partial class SigninApiV1AuthsSigninPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISigninApiV1AuthsSigninPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SigninApiV1AuthsSigninPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SigninApiV1AuthsSigninPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SigninApiV1AuthsSigninPostApiResponse(ILogger<SigninApiV1AuthsSigninPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SessionUserResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SessionUserResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SessionUserResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterSignoutApiV1AuthsSignoutGetDefaultImplementation(ISignoutApiV1AuthsSignoutGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterSignoutApiV1AuthsSignoutGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterSignoutApiV1AuthsSignoutGet(ref bool suppressDefaultLog, ISignoutApiV1AuthsSignoutGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorSignoutApiV1AuthsSignoutGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSignoutApiV1AuthsSignoutGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorSignoutApiV1AuthsSignoutGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Signout 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISignoutApiV1AuthsSignoutGetApiResponse"/>&gt;</returns>
        public async Task<ISignoutApiV1AuthsSignoutGetApiResponse?> SignoutApiV1AuthsSignoutGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SignoutApiV1AuthsSignoutGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Signout 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISignoutApiV1AuthsSignoutGetApiResponse"/>&gt;</returns>
        public async Task<ISignoutApiV1AuthsSignoutGetApiResponse> SignoutApiV1AuthsSignoutGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/signout"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/signout");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SignoutApiV1AuthsSignoutGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SignoutApiV1AuthsSignoutGetApiResponse>();

                        SignoutApiV1AuthsSignoutGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/signout", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSignoutApiV1AuthsSignoutGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnSignoutApiV1AuthsSignoutGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSignoutApiV1AuthsSignoutGetDefaultImplementation(e, "/api/v1/auths/signout", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorSignoutApiV1AuthsSignoutGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SignoutApiV1AuthsSignoutGetApiResponse"/>
        /// </summary>
        public partial class SignoutApiV1AuthsSignoutGetApiResponse : Org.OpenAPITools.Client.ApiResponse, ISignoutApiV1AuthsSignoutGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SignoutApiV1AuthsSignoutGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SignoutApiV1AuthsSignoutGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SignoutApiV1AuthsSignoutGetApiResponse(ILogger<SignoutApiV1AuthsSignoutGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSignupApiV1AuthsSignupPost(SignupForm signupForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="signupForm"></param>
        /// <returns></returns>
        private void ValidateSignupApiV1AuthsSignupPost(SignupForm signupForm)
        {
            if (signupForm == null)
                throw new ArgumentNullException(nameof(signupForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="signupForm"></param>
        private void AfterSignupApiV1AuthsSignupPostDefaultImplementation(ISignupApiV1AuthsSignupPostApiResponse apiResponseLocalVar, SignupForm signupForm)
        {
            bool suppressDefaultLog = false;
            AfterSignupApiV1AuthsSignupPost(ref suppressDefaultLog, apiResponseLocalVar, signupForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="signupForm"></param>
        partial void AfterSignupApiV1AuthsSignupPost(ref bool suppressDefaultLog, ISignupApiV1AuthsSignupPostApiResponse apiResponseLocalVar, SignupForm signupForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="signupForm"></param>
        private void OnErrorSignupApiV1AuthsSignupPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SignupForm signupForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSignupApiV1AuthsSignupPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, signupForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="signupForm"></param>
        partial void OnErrorSignupApiV1AuthsSignupPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SignupForm signupForm);

        /// <summary>
        /// Signup 
        /// </summary>
        /// <param name="signupForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISignupApiV1AuthsSignupPostApiResponse"/>&gt;</returns>
        public async Task<ISignupApiV1AuthsSignupPostApiResponse?> SignupApiV1AuthsSignupPostOrDefaultAsync(SignupForm signupForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SignupApiV1AuthsSignupPostAsync(signupForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Signup 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISignupApiV1AuthsSignupPostApiResponse"/>&gt;</returns>
        public async Task<ISignupApiV1AuthsSignupPostApiResponse> SignupApiV1AuthsSignupPostAsync(SignupForm signupForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSignupApiV1AuthsSignupPost(signupForm);

                FormatSignupApiV1AuthsSignupPost(signupForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/signup"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/signup");

                    httpRequestMessageLocalVar.Content = (signupForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(signupForm, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SignupApiV1AuthsSignupPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SignupApiV1AuthsSignupPostApiResponse>();

                        SignupApiV1AuthsSignupPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/signup", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSignupApiV1AuthsSignupPostDefaultImplementation(apiResponseLocalVar, signupForm);

                        Events.ExecuteOnSignupApiV1AuthsSignupPost(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSignupApiV1AuthsSignupPostDefaultImplementation(e, "/api/v1/auths/signup", uriBuilderLocalVar.Path, signupForm);
                Events.ExecuteOnErrorSignupApiV1AuthsSignupPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SignupApiV1AuthsSignupPostApiResponse"/>
        /// </summary>
        public partial class SignupApiV1AuthsSignupPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ISignupApiV1AuthsSignupPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SignupApiV1AuthsSignupPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SignupApiV1AuthsSignupPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SignupApiV1AuthsSignupPostApiResponse(ILogger<SignupApiV1AuthsSignupPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.SessionUserResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.SessionUserResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.SessionUserResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateAdminConfigApiV1AuthsAdminConfigPost(AdminConfig adminConfig);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="adminConfig"></param>
        /// <returns></returns>
        private void ValidateUpdateAdminConfigApiV1AuthsAdminConfigPost(AdminConfig adminConfig)
        {
            if (adminConfig == null)
                throw new ArgumentNullException(nameof(adminConfig));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="adminConfig"></param>
        private void AfterUpdateAdminConfigApiV1AuthsAdminConfigPostDefaultImplementation(IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse apiResponseLocalVar, AdminConfig adminConfig)
        {
            bool suppressDefaultLog = false;
            AfterUpdateAdminConfigApiV1AuthsAdminConfigPost(ref suppressDefaultLog, apiResponseLocalVar, adminConfig);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="adminConfig"></param>
        partial void AfterUpdateAdminConfigApiV1AuthsAdminConfigPost(ref bool suppressDefaultLog, IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse apiResponseLocalVar, AdminConfig adminConfig);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="adminConfig"></param>
        private void OnErrorUpdateAdminConfigApiV1AuthsAdminConfigPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AdminConfig adminConfig)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateAdminConfigApiV1AuthsAdminConfigPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, adminConfig);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="adminConfig"></param>
        partial void OnErrorUpdateAdminConfigApiV1AuthsAdminConfigPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AdminConfig adminConfig);

        /// <summary>
        /// Update Admin Config 
        /// </summary>
        /// <param name="adminConfig"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse?> UpdateAdminConfigApiV1AuthsAdminConfigPostOrDefaultAsync(AdminConfig adminConfig, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateAdminConfigApiV1AuthsAdminConfigPostAsync(adminConfig, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Admin Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="adminConfig"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse> UpdateAdminConfigApiV1AuthsAdminConfigPostAsync(AdminConfig adminConfig, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateAdminConfigApiV1AuthsAdminConfigPost(adminConfig);

                FormatUpdateAdminConfigApiV1AuthsAdminConfigPost(adminConfig);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/admin/config"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/admin/config");

                    httpRequestMessageLocalVar.Content = (adminConfig as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(adminConfig, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse>();

                        UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/admin/config", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateAdminConfigApiV1AuthsAdminConfigPostDefaultImplementation(apiResponseLocalVar, adminConfig);

                        Events.ExecuteOnUpdateAdminConfigApiV1AuthsAdminConfigPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateAdminConfigApiV1AuthsAdminConfigPostDefaultImplementation(e, "/api/v1/auths/admin/config", uriBuilderLocalVar.Path, adminConfig);
                Events.ExecuteOnErrorUpdateAdminConfigApiV1AuthsAdminConfigPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse"/>
        /// </summary>
        public partial class UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse(ILogger<UpdateAdminConfigApiV1AuthsAdminConfigPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(LdapConfigForm ldapConfigForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ldapConfigForm"></param>
        /// <returns></returns>
        private void ValidateUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(LdapConfigForm ldapConfigForm)
        {
            if (ldapConfigForm == null)
                throw new ArgumentNullException(nameof(ldapConfigForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ldapConfigForm"></param>
        private void AfterUpdateLdapConfigApiV1AuthsAdminConfigLdapPostDefaultImplementation(IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse apiResponseLocalVar, LdapConfigForm ldapConfigForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(ref suppressDefaultLog, apiResponseLocalVar, ldapConfigForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ldapConfigForm"></param>
        partial void AfterUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(ref bool suppressDefaultLog, IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse apiResponseLocalVar, LdapConfigForm ldapConfigForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ldapConfigForm"></param>
        private void OnErrorUpdateLdapConfigApiV1AuthsAdminConfigLdapPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LdapConfigForm ldapConfigForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, ldapConfigForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ldapConfigForm"></param>
        partial void OnErrorUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LdapConfigForm ldapConfigForm);

        /// <summary>
        /// Update Ldap Config 
        /// </summary>
        /// <param name="ldapConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse?> UpdateLdapConfigApiV1AuthsAdminConfigLdapPostOrDefaultAsync(LdapConfigForm ldapConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateLdapConfigApiV1AuthsAdminConfigLdapPostAsync(ldapConfigForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Ldap Config 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapConfigForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse> UpdateLdapConfigApiV1AuthsAdminConfigLdapPostAsync(LdapConfigForm ldapConfigForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(ldapConfigForm);

                FormatUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(ldapConfigForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/admin/config/ldap"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/admin/config/ldap");

                    httpRequestMessageLocalVar.Content = (ldapConfigForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ldapConfigForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse>();

                        UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/admin/config/ldap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateLdapConfigApiV1AuthsAdminConfigLdapPostDefaultImplementation(apiResponseLocalVar, ldapConfigForm);

                        Events.ExecuteOnUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateLdapConfigApiV1AuthsAdminConfigLdapPostDefaultImplementation(e, "/api/v1/auths/admin/config/ldap", uriBuilderLocalVar.Path, ldapConfigForm);
                Events.ExecuteOnErrorUpdateLdapConfigApiV1AuthsAdminConfigLdapPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse"/>
        /// </summary>
        public partial class UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse(ILogger<UpdateLdapConfigApiV1AuthsAdminConfigLdapPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(LdapServerConfig ldapServerConfig);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="ldapServerConfig"></param>
        /// <returns></returns>
        private void ValidateUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(LdapServerConfig ldapServerConfig)
        {
            if (ldapServerConfig == null)
                throw new ArgumentNullException(nameof(ldapServerConfig));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ldapServerConfig"></param>
        private void AfterUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostDefaultImplementation(IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse apiResponseLocalVar, LdapServerConfig ldapServerConfig)
        {
            bool suppressDefaultLog = false;
            AfterUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(ref suppressDefaultLog, apiResponseLocalVar, ldapServerConfig);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="ldapServerConfig"></param>
        partial void AfterUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(ref bool suppressDefaultLog, IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse apiResponseLocalVar, LdapServerConfig ldapServerConfig);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ldapServerConfig"></param>
        private void OnErrorUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LdapServerConfig ldapServerConfig)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, ldapServerConfig);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="ldapServerConfig"></param>
        partial void OnErrorUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LdapServerConfig ldapServerConfig);

        /// <summary>
        /// Update Ldap Server 
        /// </summary>
        /// <param name="ldapServerConfig"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse?> UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostOrDefaultAsync(LdapServerConfig ldapServerConfig, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostAsync(ldapServerConfig, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Ldap Server 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ldapServerConfig"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse> UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostAsync(LdapServerConfig ldapServerConfig, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(ldapServerConfig);

                FormatUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(ldapServerConfig);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/admin/config/ldap/server"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/admin/config/ldap/server");

                    httpRequestMessageLocalVar.Content = (ldapServerConfig as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(ldapServerConfig, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse>();

                        UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/admin/config/ldap/server", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostDefaultImplementation(apiResponseLocalVar, ldapServerConfig);

                        Events.ExecuteOnUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostDefaultImplementation(e, "/api/v1/auths/admin/config/ldap/server", uriBuilderLocalVar.Path, ldapServerConfig);
                Events.ExecuteOnErrorUpdateLdapServerApiV1AuthsAdminConfigLdapServerPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse"/>
        /// </summary>
        public partial class UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse(ILogger<UpdateLdapServerApiV1AuthsAdminConfigLdapServerPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdatePasswordApiV1AuthsUpdatePasswordPost(UpdatePasswordForm updatePasswordForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updatePasswordForm"></param>
        /// <returns></returns>
        private void ValidateUpdatePasswordApiV1AuthsUpdatePasswordPost(UpdatePasswordForm updatePasswordForm)
        {
            if (updatePasswordForm == null)
                throw new ArgumentNullException(nameof(updatePasswordForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updatePasswordForm"></param>
        private void AfterUpdatePasswordApiV1AuthsUpdatePasswordPostDefaultImplementation(IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse apiResponseLocalVar, UpdatePasswordForm updatePasswordForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdatePasswordApiV1AuthsUpdatePasswordPost(ref suppressDefaultLog, apiResponseLocalVar, updatePasswordForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updatePasswordForm"></param>
        partial void AfterUpdatePasswordApiV1AuthsUpdatePasswordPost(ref bool suppressDefaultLog, IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse apiResponseLocalVar, UpdatePasswordForm updatePasswordForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updatePasswordForm"></param>
        private void OnErrorUpdatePasswordApiV1AuthsUpdatePasswordPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UpdatePasswordForm updatePasswordForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdatePasswordApiV1AuthsUpdatePasswordPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, updatePasswordForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updatePasswordForm"></param>
        partial void OnErrorUpdatePasswordApiV1AuthsUpdatePasswordPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UpdatePasswordForm updatePasswordForm);

        /// <summary>
        /// Update Password 
        /// </summary>
        /// <param name="updatePasswordForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse"/>&gt;</returns>
        public async Task<IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse?> UpdatePasswordApiV1AuthsUpdatePasswordPostOrDefaultAsync(UpdatePasswordForm updatePasswordForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdatePasswordApiV1AuthsUpdatePasswordPostAsync(updatePasswordForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Password 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse"/>&gt;</returns>
        public async Task<IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse> UpdatePasswordApiV1AuthsUpdatePasswordPostAsync(UpdatePasswordForm updatePasswordForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdatePasswordApiV1AuthsUpdatePasswordPost(updatePasswordForm);

                FormatUpdatePasswordApiV1AuthsUpdatePasswordPost(updatePasswordForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/update/password"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/update/password");

                    httpRequestMessageLocalVar.Content = (updatePasswordForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updatePasswordForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse>();

                        UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/update/password", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdatePasswordApiV1AuthsUpdatePasswordPostDefaultImplementation(apiResponseLocalVar, updatePasswordForm);

                        Events.ExecuteOnUpdatePasswordApiV1AuthsUpdatePasswordPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdatePasswordApiV1AuthsUpdatePasswordPostDefaultImplementation(e, "/api/v1/auths/update/password", uriBuilderLocalVar.Path, updatePasswordForm);
                Events.ExecuteOnErrorUpdatePasswordApiV1AuthsUpdatePasswordPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse"/>
        /// </summary>
        public partial class UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse(ILogger<UpdatePasswordApiV1AuthsUpdatePasswordPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateProfileApiV1AuthsUpdateProfilePost(UpdateProfileForm updateProfileForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="updateProfileForm"></param>
        /// <returns></returns>
        private void ValidateUpdateProfileApiV1AuthsUpdateProfilePost(UpdateProfileForm updateProfileForm)
        {
            if (updateProfileForm == null)
                throw new ArgumentNullException(nameof(updateProfileForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateProfileForm"></param>
        private void AfterUpdateProfileApiV1AuthsUpdateProfilePostDefaultImplementation(IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse apiResponseLocalVar, UpdateProfileForm updateProfileForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateProfileApiV1AuthsUpdateProfilePost(ref suppressDefaultLog, apiResponseLocalVar, updateProfileForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="updateProfileForm"></param>
        partial void AfterUpdateProfileApiV1AuthsUpdateProfilePost(ref bool suppressDefaultLog, IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse apiResponseLocalVar, UpdateProfileForm updateProfileForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updateProfileForm"></param>
        private void OnErrorUpdateProfileApiV1AuthsUpdateProfilePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UpdateProfileForm updateProfileForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateProfileApiV1AuthsUpdateProfilePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, updateProfileForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="updateProfileForm"></param>
        partial void OnErrorUpdateProfileApiV1AuthsUpdateProfilePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, UpdateProfileForm updateProfileForm);

        /// <summary>
        /// Update Profile 
        /// </summary>
        /// <param name="updateProfileForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse?> UpdateProfileApiV1AuthsUpdateProfilePostOrDefaultAsync(UpdateProfileForm updateProfileForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateProfileApiV1AuthsUpdateProfilePostAsync(updateProfileForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Profile 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProfileForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse> UpdateProfileApiV1AuthsUpdateProfilePostAsync(UpdateProfileForm updateProfileForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateProfileApiV1AuthsUpdateProfilePost(updateProfileForm);

                FormatUpdateProfileApiV1AuthsUpdateProfilePost(updateProfileForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/auths/update/profile"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/auths/update/profile");

                    httpRequestMessageLocalVar.Content = (updateProfileForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateProfileForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateProfileApiV1AuthsUpdateProfilePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateProfileApiV1AuthsUpdateProfilePostApiResponse>();

                        UpdateProfileApiV1AuthsUpdateProfilePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/auths/update/profile", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateProfileApiV1AuthsUpdateProfilePostDefaultImplementation(apiResponseLocalVar, updateProfileForm);

                        Events.ExecuteOnUpdateProfileApiV1AuthsUpdateProfilePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateProfileApiV1AuthsUpdateProfilePostDefaultImplementation(e, "/api/v1/auths/update/profile", uriBuilderLocalVar.Path, updateProfileForm);
                Events.ExecuteOnErrorUpdateProfileApiV1AuthsUpdateProfilePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateProfileApiV1AuthsUpdateProfilePostApiResponse"/>
        /// </summary>
        public partial class UpdateProfileApiV1AuthsUpdateProfilePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateProfileApiV1AuthsUpdateProfilePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateProfileApiV1AuthsUpdateProfilePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateProfileApiV1AuthsUpdateProfilePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateProfileApiV1AuthsUpdateProfilePostApiResponse(ILogger<UpdateProfileApiV1AuthsUpdateProfilePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.OpenWebuiModelsAuthsUserResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.OpenWebuiModelsAuthsUserResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.OpenWebuiModelsAuthsUserResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
