// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IChannelsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ChannelsApiEvents Events { get; }

        /// <summary>
        /// Add Reaction To Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse"/>&gt;</returns>
        Task<IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse> AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostAsync(string id, string messageId, ReactionForm reactionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Reaction To Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse"/>?&gt;</returns>
        Task<IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse?> AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostOrDefaultAsync(string id, string messageId, ReactionForm reactionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewChannelApiV1ChannelsCreatePostApiResponse"/>&gt;</returns>
        Task<ICreateNewChannelApiV1ChannelsCreatePostApiResponse> CreateNewChannelApiV1ChannelsCreatePostAsync(ChannelForm channelForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Channel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="channelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewChannelApiV1ChannelsCreatePostApiResponse"/>?&gt;</returns>
        Task<ICreateNewChannelApiV1ChannelsCreatePostApiResponse?> CreateNewChannelApiV1ChannelsCreatePostOrDefaultAsync(ChannelForm channelForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Channel By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse> DeleteChannelByIdApiV1ChannelsIdDeleteDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Channel By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse?> DeleteChannelByIdApiV1ChannelsIdDeleteDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Message By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse> DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteAsync(string id, string messageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Message By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse?> DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteOrDefaultAsync(string id, string messageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelByIdApiV1ChannelsIdGetApiResponse"/>&gt;</returns>
        Task<IGetChannelByIdApiV1ChannelsIdGetApiResponse> GetChannelByIdApiV1ChannelsIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelByIdApiV1ChannelsIdGetApiResponse"/>?&gt;</returns>
        Task<IGetChannelByIdApiV1ChannelsIdGetApiResponse?> GetChannelByIdApiV1ChannelsIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse"/>&gt;</returns>
        Task<IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse> GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetAsync(string id, string messageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse"/>?&gt;</returns>
        Task<IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse?> GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetOrDefaultAsync(string id, string messageId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse"/>&gt;</returns>
        Task<IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse> GetChannelMessagesApiV1ChannelsIdMessagesGetAsync(string id, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse"/>?&gt;</returns>
        Task<IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse?> GetChannelMessagesApiV1ChannelsIdMessagesGetOrDefaultAsync(string id, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel Thread Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse"/>&gt;</returns>
        Task<IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse> GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetAsync(string id, string messageId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channel Thread Messages
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse"/>?&gt;</returns>
        Task<IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse?> GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetOrDefaultAsync(string id, string messageId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelsApiV1ChannelsGetApiResponse"/>&gt;</returns>
        Task<IGetChannelsApiV1ChannelsGetApiResponse> GetChannelsApiV1ChannelsGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelsApiV1ChannelsGetApiResponse"/>?&gt;</returns>
        Task<IGetChannelsApiV1ChannelsGetApiResponse?> GetChannelsApiV1ChannelsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Post New Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse"/>&gt;</returns>
        Task<IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse> PostNewMessageApiV1ChannelsIdMessagesPostPostAsync(string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Post New Message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse"/>?&gt;</returns>
        Task<IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse?> PostNewMessageApiV1ChannelsIdMessagesPostPostOrDefaultAsync(string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove Reaction By Id And User Id And Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse"/>&gt;</returns>
        Task<IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse> RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostAsync(string id, string messageId, ReactionForm reactionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove Reaction By Id And User Id And Name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse"/>?&gt;</returns>
        Task<IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse?> RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostOrDefaultAsync(string id, string messageId, ReactionForm reactionForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Channel By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse> UpdateChannelByIdApiV1ChannelsIdUpdatePostAsync(string id, ChannelForm channelForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Channel By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse?> UpdateChannelByIdApiV1ChannelsIdUpdatePostOrDefaultAsync(string id, ChannelForm channelForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Message By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse> UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostAsync(string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Message By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse?> UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostOrDefaultAsync(string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse"/>
    /// </summary>
    public interface IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNewChannelApiV1ChannelsCreatePostApiResponse"/>
    /// </summary>
    public interface ICreateNewChannelApiV1ChannelsCreatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChannelModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelByIdApiV1ChannelsIdGetApiResponse"/>
    /// </summary>
    public interface IGetChannelByIdApiV1ChannelsIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChannelModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse"/>
    /// </summary>
    public interface IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MessageUserResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse"/>
    /// </summary>
    public interface IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<MessageUserResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse"/>
    /// </summary>
    public interface IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<MessageUserResponse>?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelsApiV1ChannelsGetApiResponse"/>
    /// </summary>
    public interface IGetChannelsApiV1ChannelsGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<ChannelModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse"/>
    /// </summary>
    public interface IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MessageModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse"/>
    /// </summary>
    public interface IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.ChannelModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MessageModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ChannelsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost;

        internal void ExecuteOnAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(ChannelsApi.AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse apiResponse)
        {
            OnAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(Exception exception)
        {
            OnErrorAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNewChannelApiV1ChannelsCreatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNewChannelApiV1ChannelsCreatePost;

        internal void ExecuteOnCreateNewChannelApiV1ChannelsCreatePost(ChannelsApi.CreateNewChannelApiV1ChannelsCreatePostApiResponse apiResponse)
        {
            OnCreateNewChannelApiV1ChannelsCreatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewChannelApiV1ChannelsCreatePost(Exception exception)
        {
            OnErrorCreateNewChannelApiV1ChannelsCreatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteChannelByIdApiV1ChannelsIdDeleteDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteChannelByIdApiV1ChannelsIdDeleteDelete;

        internal void ExecuteOnDeleteChannelByIdApiV1ChannelsIdDeleteDelete(ChannelsApi.DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse apiResponse)
        {
            OnDeleteChannelByIdApiV1ChannelsIdDeleteDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteChannelByIdApiV1ChannelsIdDeleteDelete(Exception exception)
        {
            OnErrorDeleteChannelByIdApiV1ChannelsIdDeleteDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete;

        internal void ExecuteOnDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(ChannelsApi.DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse apiResponse)
        {
            OnDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(Exception exception)
        {
            OnErrorDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelByIdApiV1ChannelsIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelByIdApiV1ChannelsIdGet;

        internal void ExecuteOnGetChannelByIdApiV1ChannelsIdGet(ChannelsApi.GetChannelByIdApiV1ChannelsIdGetApiResponse apiResponse)
        {
            OnGetChannelByIdApiV1ChannelsIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelByIdApiV1ChannelsIdGet(Exception exception)
        {
            OnErrorGetChannelByIdApiV1ChannelsIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet;

        internal void ExecuteOnGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(ChannelsApi.GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse apiResponse)
        {
            OnGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(Exception exception)
        {
            OnErrorGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelMessagesApiV1ChannelsIdMessagesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelMessagesApiV1ChannelsIdMessagesGet;

        internal void ExecuteOnGetChannelMessagesApiV1ChannelsIdMessagesGet(ChannelsApi.GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse apiResponse)
        {
            OnGetChannelMessagesApiV1ChannelsIdMessagesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelMessagesApiV1ChannelsIdMessagesGet(Exception exception)
        {
            OnErrorGetChannelMessagesApiV1ChannelsIdMessagesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet;

        internal void ExecuteOnGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(ChannelsApi.GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse apiResponse)
        {
            OnGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(Exception exception)
        {
            OnErrorGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelsApiV1ChannelsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelsApiV1ChannelsGet;

        internal void ExecuteOnGetChannelsApiV1ChannelsGet(ChannelsApi.GetChannelsApiV1ChannelsGetApiResponse apiResponse)
        {
            OnGetChannelsApiV1ChannelsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelsApiV1ChannelsGet(Exception exception)
        {
            OnErrorGetChannelsApiV1ChannelsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostNewMessageApiV1ChannelsIdMessagesPostPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostNewMessageApiV1ChannelsIdMessagesPostPost;

        internal void ExecuteOnPostNewMessageApiV1ChannelsIdMessagesPostPost(ChannelsApi.PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse apiResponse)
        {
            OnPostNewMessageApiV1ChannelsIdMessagesPostPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostNewMessageApiV1ChannelsIdMessagesPostPost(Exception exception)
        {
            OnErrorPostNewMessageApiV1ChannelsIdMessagesPostPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost;

        internal void ExecuteOnRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(ChannelsApi.RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse apiResponse)
        {
            OnRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(Exception exception)
        {
            OnErrorRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateChannelByIdApiV1ChannelsIdUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateChannelByIdApiV1ChannelsIdUpdatePost;

        internal void ExecuteOnUpdateChannelByIdApiV1ChannelsIdUpdatePost(ChannelsApi.UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse apiResponse)
        {
            OnUpdateChannelByIdApiV1ChannelsIdUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateChannelByIdApiV1ChannelsIdUpdatePost(Exception exception)
        {
            OnErrorUpdateChannelByIdApiV1ChannelsIdUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost;

        internal void ExecuteOnUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(ChannelsApi.UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse apiResponse)
        {
            OnUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(Exception exception)
        {
            OnErrorUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ChannelsApi : IChannelsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ChannelsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ChannelsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsApi(ILogger<ChannelsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ChannelsApiEvents channelsApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ChannelsApi>();
            HttpClient = httpClient;
            Events = channelsApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(ref string id, ref string messageId, ReactionForm reactionForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <returns></returns>
        private void ValidateAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(string id, string messageId, ReactionForm reactionForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (messageId == null)
                throw new ArgumentNullException(nameof(messageId));

            if (reactionForm == null)
                throw new ArgumentNullException(nameof(reactionForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        private void AfterAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostDefaultImplementation(IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse apiResponseLocalVar, string id, string messageId, ReactionForm reactionForm)
        {
            bool suppressDefaultLog = false;
            AfterAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(ref suppressDefaultLog, apiResponseLocalVar, id, messageId, reactionForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        partial void AfterAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(ref bool suppressDefaultLog, IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse apiResponseLocalVar, string id, string messageId, ReactionForm reactionForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        private void OnErrorAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, ReactionForm reactionForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, messageId, reactionForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        partial void OnErrorAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, ReactionForm reactionForm);

        /// <summary>
        /// Add Reaction To Message 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse?> AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostOrDefaultAsync(string id, string messageId, ReactionForm reactionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostAsync(id, messageId, reactionForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Reaction To Message 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse> AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostAsync(string id, string messageId, ReactionForm reactionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(id, messageId, reactionForm);

                FormatAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(ref id, ref messageId, reactionForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/messages/{message_id}/reactions/add"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/messages/{message_id}/reactions/add");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmessage_id%7D", Uri.EscapeDataString(messageId.ToString()));

                    httpRequestMessageLocalVar.Content = (reactionForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(reactionForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse>();

                        AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/messages/{message_id}/reactions/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostDefaultImplementation(apiResponseLocalVar, id, messageId, reactionForm);

                        Events.ExecuteOnAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostDefaultImplementation(e, "/api/v1/channels/{id}/messages/{message_id}/reactions/add", uriBuilderLocalVar.Path, id, messageId, reactionForm);
                Events.ExecuteOnErrorAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse"/>
        /// </summary>
        public partial class AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IAddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse(ILogger<AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateNewChannelApiV1ChannelsCreatePost(ChannelForm channelForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="channelForm"></param>
        /// <returns></returns>
        private void ValidateCreateNewChannelApiV1ChannelsCreatePost(ChannelForm channelForm)
        {
            if (channelForm == null)
                throw new ArgumentNullException(nameof(channelForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelForm"></param>
        private void AfterCreateNewChannelApiV1ChannelsCreatePostDefaultImplementation(ICreateNewChannelApiV1ChannelsCreatePostApiResponse apiResponseLocalVar, ChannelForm channelForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewChannelApiV1ChannelsCreatePost(ref suppressDefaultLog, apiResponseLocalVar, channelForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelForm"></param>
        partial void AfterCreateNewChannelApiV1ChannelsCreatePost(ref bool suppressDefaultLog, ICreateNewChannelApiV1ChannelsCreatePostApiResponse apiResponseLocalVar, ChannelForm channelForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="channelForm"></param>
        private void OnErrorCreateNewChannelApiV1ChannelsCreatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ChannelForm channelForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewChannelApiV1ChannelsCreatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, channelForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="channelForm"></param>
        partial void OnErrorCreateNewChannelApiV1ChannelsCreatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ChannelForm channelForm);

        /// <summary>
        /// Create New Channel 
        /// </summary>
        /// <param name="channelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewChannelApiV1ChannelsCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewChannelApiV1ChannelsCreatePostApiResponse?> CreateNewChannelApiV1ChannelsCreatePostOrDefaultAsync(ChannelForm channelForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewChannelApiV1ChannelsCreatePostAsync(channelForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create New Channel 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewChannelApiV1ChannelsCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewChannelApiV1ChannelsCreatePostApiResponse> CreateNewChannelApiV1ChannelsCreatePostAsync(ChannelForm channelForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewChannelApiV1ChannelsCreatePost(channelForm);

                FormatCreateNewChannelApiV1ChannelsCreatePost(channelForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/create");

                    httpRequestMessageLocalVar.Content = (channelForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(channelForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNewChannelApiV1ChannelsCreatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewChannelApiV1ChannelsCreatePostApiResponse>();

                        CreateNewChannelApiV1ChannelsCreatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewChannelApiV1ChannelsCreatePostDefaultImplementation(apiResponseLocalVar, channelForm);

                        Events.ExecuteOnCreateNewChannelApiV1ChannelsCreatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewChannelApiV1ChannelsCreatePostDefaultImplementation(e, "/api/v1/channels/create", uriBuilderLocalVar.Path, channelForm);
                Events.ExecuteOnErrorCreateNewChannelApiV1ChannelsCreatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewChannelApiV1ChannelsCreatePostApiResponse"/>
        /// </summary>
        public partial class CreateNewChannelApiV1ChannelsCreatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateNewChannelApiV1ChannelsCreatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewChannelApiV1ChannelsCreatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewChannelApiV1ChannelsCreatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewChannelApiV1ChannelsCreatePostApiResponse(ILogger<CreateNewChannelApiV1ChannelsCreatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChannelModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChannelModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChannelModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteChannelByIdApiV1ChannelsIdDeleteDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteChannelByIdApiV1ChannelsIdDeleteDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteChannelByIdApiV1ChannelsIdDeleteDeleteDefaultImplementation(IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteChannelByIdApiV1ChannelsIdDeleteDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteChannelByIdApiV1ChannelsIdDeleteDelete(ref bool suppressDefaultLog, IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteChannelByIdApiV1ChannelsIdDeleteDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteChannelByIdApiV1ChannelsIdDeleteDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteChannelByIdApiV1ChannelsIdDeleteDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete Channel By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse?> DeleteChannelByIdApiV1ChannelsIdDeleteDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteChannelByIdApiV1ChannelsIdDeleteDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Channel By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse> DeleteChannelByIdApiV1ChannelsIdDeleteDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteChannelByIdApiV1ChannelsIdDeleteDelete(id);

                FormatDeleteChannelByIdApiV1ChannelsIdDeleteDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/delete");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse>();

                        DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteChannelByIdApiV1ChannelsIdDeleteDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteChannelByIdApiV1ChannelsIdDeleteDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteChannelByIdApiV1ChannelsIdDeleteDeleteDefaultImplementation(e, "/api/v1/channels/{id}/delete", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteChannelByIdApiV1ChannelsIdDeleteDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse(ILogger<DeleteChannelByIdApiV1ChannelsIdDeleteDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(ref string id, ref string messageId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <returns></returns>
        private void ValidateDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(string id, string messageId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (messageId == null)
                throw new ArgumentNullException(nameof(messageId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        private void AfterDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteDefaultImplementation(IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse apiResponseLocalVar, string id, string messageId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(ref suppressDefaultLog, apiResponseLocalVar, id, messageId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        partial void AfterDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(ref bool suppressDefaultLog, IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse apiResponseLocalVar, string id, string messageId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        private void OnErrorDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, messageId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        partial void OnErrorDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId);

        /// <summary>
        /// Delete Message By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse?> DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteOrDefaultAsync(string id, string messageId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteAsync(id, messageId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Message By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse> DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteAsync(string id, string messageId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(id, messageId);

                FormatDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(ref id, ref messageId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/messages/{message_id}/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/messages/{message_id}/delete");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmessage_id%7D", Uri.EscapeDataString(messageId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse>();

                        DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/messages/{message_id}/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteDefaultImplementation(apiResponseLocalVar, id, messageId);

                        Events.ExecuteOnDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteDefaultImplementation(e, "/api/v1/channels/{id}/messages/{message_id}/delete", uriBuilderLocalVar.Path, id, messageId);
                Events.ExecuteOnErrorDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse(ILogger<DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelByIdApiV1ChannelsIdGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetChannelByIdApiV1ChannelsIdGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetChannelByIdApiV1ChannelsIdGetDefaultImplementation(IGetChannelByIdApiV1ChannelsIdGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelByIdApiV1ChannelsIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetChannelByIdApiV1ChannelsIdGet(ref bool suppressDefaultLog, IGetChannelByIdApiV1ChannelsIdGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetChannelByIdApiV1ChannelsIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChannelByIdApiV1ChannelsIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetChannelByIdApiV1ChannelsIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Channel By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelByIdApiV1ChannelsIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelByIdApiV1ChannelsIdGetApiResponse?> GetChannelByIdApiV1ChannelsIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelByIdApiV1ChannelsIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Channel By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelByIdApiV1ChannelsIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelByIdApiV1ChannelsIdGetApiResponse> GetChannelByIdApiV1ChannelsIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChannelByIdApiV1ChannelsIdGet(id);

                FormatGetChannelByIdApiV1ChannelsIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelByIdApiV1ChannelsIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelByIdApiV1ChannelsIdGetApiResponse>();

                        GetChannelByIdApiV1ChannelsIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelByIdApiV1ChannelsIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetChannelByIdApiV1ChannelsIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelByIdApiV1ChannelsIdGetDefaultImplementation(e, "/api/v1/channels/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetChannelByIdApiV1ChannelsIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelByIdApiV1ChannelsIdGetApiResponse"/>
        /// </summary>
        public partial class GetChannelByIdApiV1ChannelsIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetChannelByIdApiV1ChannelsIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelByIdApiV1ChannelsIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelByIdApiV1ChannelsIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelByIdApiV1ChannelsIdGetApiResponse(ILogger<GetChannelByIdApiV1ChannelsIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChannelModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChannelModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChannelModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(ref string id, ref string messageId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <returns></returns>
        private void ValidateGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(string id, string messageId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (messageId == null)
                throw new ArgumentNullException(nameof(messageId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        private void AfterGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetDefaultImplementation(IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse apiResponseLocalVar, string id, string messageId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(ref suppressDefaultLog, apiResponseLocalVar, id, messageId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        partial void AfterGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(ref bool suppressDefaultLog, IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse apiResponseLocalVar, string id, string messageId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        private void OnErrorGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, messageId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        partial void OnErrorGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId);

        /// <summary>
        /// Get Channel Message 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse?> GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetOrDefaultAsync(string id, string messageId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetAsync(id, messageId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Channel Message 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse> GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetAsync(string id, string messageId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(id, messageId);

                FormatGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(ref id, ref messageId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/messages/{message_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/messages/{message_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmessage_id%7D", Uri.EscapeDataString(messageId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse>();

                        GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/messages/{message_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetDefaultImplementation(apiResponseLocalVar, id, messageId);

                        Events.ExecuteOnGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetDefaultImplementation(e, "/api/v1/channels/{id}/messages/{message_id}", uriBuilderLocalVar.Path, id, messageId);
                Events.ExecuteOnErrorGetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse"/>
        /// </summary>
        public partial class GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse(ILogger<GetChannelMessageApiV1ChannelsIdMessagesMessageIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MessageUserResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MessageUserResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MessageUserResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelMessagesApiV1ChannelsIdMessagesGet(ref string id, ref Option<int> skip, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetChannelMessagesApiV1ChannelsIdMessagesGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void AfterGetChannelMessagesApiV1ChannelsIdMessagesGetDefaultImplementation(IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse apiResponseLocalVar, string id, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelMessagesApiV1ChannelsIdMessagesGet(ref suppressDefaultLog, apiResponseLocalVar, id, skip, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void AfterGetChannelMessagesApiV1ChannelsIdMessagesGet(ref bool suppressDefaultLog, IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse apiResponseLocalVar, string id, Option<int> skip, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void OnErrorGetChannelMessagesApiV1ChannelsIdMessagesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChannelMessagesApiV1ChannelsIdMessagesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, skip, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void OnErrorGetChannelMessagesApiV1ChannelsIdMessagesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<int> skip, Option<int> limit);

        /// <summary>
        /// Get Channel Messages 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse?> GetChannelMessagesApiV1ChannelsIdMessagesGetOrDefaultAsync(string id, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelMessagesApiV1ChannelsIdMessagesGetAsync(id, skip, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Channel Messages 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse> GetChannelMessagesApiV1ChannelsIdMessagesGetAsync(string id, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChannelMessagesApiV1ChannelsIdMessagesGet(id);

                FormatGetChannelMessagesApiV1ChannelsIdMessagesGet(ref id, ref skip, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/messages"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/messages");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse>();

                        GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelMessagesApiV1ChannelsIdMessagesGetDefaultImplementation(apiResponseLocalVar, id, skip, limit);

                        Events.ExecuteOnGetChannelMessagesApiV1ChannelsIdMessagesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelMessagesApiV1ChannelsIdMessagesGetDefaultImplementation(e, "/api/v1/channels/{id}/messages", uriBuilderLocalVar.Path, id, skip, limit);
                Events.ExecuteOnErrorGetChannelMessagesApiV1ChannelsIdMessagesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse"/>
        /// </summary>
        public partial class GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse(ILogger<GetChannelMessagesApiV1ChannelsIdMessagesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<MessageUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<MessageUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<MessageUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(ref string id, ref string messageId, ref Option<int> skip, ref Option<int> limit);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <returns></returns>
        private void ValidateGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(string id, string messageId)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (messageId == null)
                throw new ArgumentNullException(nameof(messageId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void AfterGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetDefaultImplementation(IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse apiResponseLocalVar, string id, string messageId, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(ref suppressDefaultLog, apiResponseLocalVar, id, messageId, skip, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void AfterGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(ref bool suppressDefaultLog, IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse apiResponseLocalVar, string id, string messageId, Option<int> skip, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        private void OnErrorGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, Option<int> skip, Option<int> limit)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, messageId, skip, limit);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="skip"></param>
        /// <param name="limit"></param>
        partial void OnErrorGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, Option<int> skip, Option<int> limit);

        /// <summary>
        /// Get Channel Thread Messages 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse?> GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetOrDefaultAsync(string id, string messageId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetAsync(id, messageId, skip, limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Channel Thread Messages 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="skip"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse> GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetAsync(string id, string messageId, Option<int> skip = default, Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(id, messageId);

                FormatGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(ref id, ref messageId, ref skip, ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/messages/{message_id}/thread"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/messages/{message_id}/thread");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmessage_id%7D", Uri.EscapeDataString(messageId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (skip.IsSet)
                        parseQueryStringLocalVar["skip"] = ClientUtils.ParameterToString(skip.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse>();

                        GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/messages/{message_id}/thread", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetDefaultImplementation(apiResponseLocalVar, id, messageId, skip, limit);

                        Events.ExecuteOnGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetDefaultImplementation(e, "/api/v1/channels/{id}/messages/{message_id}/thread", uriBuilderLocalVar.Path, id, messageId, skip, limit);
                Events.ExecuteOnErrorGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse"/>
        /// </summary>
        public partial class GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse(ILogger<GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<MessageUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<MessageUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<MessageUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetChannelsApiV1ChannelsGetDefaultImplementation(IGetChannelsApiV1ChannelsGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelsApiV1ChannelsGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetChannelsApiV1ChannelsGet(ref bool suppressDefaultLog, IGetChannelsApiV1ChannelsGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetChannelsApiV1ChannelsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChannelsApiV1ChannelsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetChannelsApiV1ChannelsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Channels 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelsApiV1ChannelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelsApiV1ChannelsGetApiResponse?> GetChannelsApiV1ChannelsGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelsApiV1ChannelsGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Channels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelsApiV1ChannelsGetApiResponse"/>&gt;</returns>
        public async Task<IGetChannelsApiV1ChannelsGetApiResponse> GetChannelsApiV1ChannelsGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelsApiV1ChannelsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelsApiV1ChannelsGetApiResponse>();

                        GetChannelsApiV1ChannelsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelsApiV1ChannelsGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetChannelsApiV1ChannelsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelsApiV1ChannelsGetDefaultImplementation(e, "/api/v1/channels/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetChannelsApiV1ChannelsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelsApiV1ChannelsGetApiResponse"/>
        /// </summary>
        public partial class GetChannelsApiV1ChannelsGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetChannelsApiV1ChannelsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelsApiV1ChannelsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelsApiV1ChannelsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelsApiV1ChannelsGetApiResponse(ILogger<GetChannelsApiV1ChannelsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChannelModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChannelModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChannelModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostNewMessageApiV1ChannelsIdMessagesPostPost(ref string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <returns></returns>
        private void ValidatePostNewMessageApiV1ChannelsIdMessagesPostPost(string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (openWebuiModelsMessagesMessageForm == null)
                throw new ArgumentNullException(nameof(openWebuiModelsMessagesMessageForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        private void AfterPostNewMessageApiV1ChannelsIdMessagesPostPostDefaultImplementation(IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse apiResponseLocalVar, string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm)
        {
            bool suppressDefaultLog = false;
            AfterPostNewMessageApiV1ChannelsIdMessagesPostPost(ref suppressDefaultLog, apiResponseLocalVar, id, openWebuiModelsMessagesMessageForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        partial void AfterPostNewMessageApiV1ChannelsIdMessagesPostPost(ref bool suppressDefaultLog, IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse apiResponseLocalVar, string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        private void OnErrorPostNewMessageApiV1ChannelsIdMessagesPostPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostNewMessageApiV1ChannelsIdMessagesPostPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, openWebuiModelsMessagesMessageForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        partial void OnErrorPostNewMessageApiV1ChannelsIdMessagesPostPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm);

        /// <summary>
        /// Post New Message 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse"/>&gt;</returns>
        public async Task<IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse?> PostNewMessageApiV1ChannelsIdMessagesPostPostOrDefaultAsync(string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostNewMessageApiV1ChannelsIdMessagesPostPostAsync(id, openWebuiModelsMessagesMessageForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Post New Message 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse"/>&gt;</returns>
        public async Task<IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse> PostNewMessageApiV1ChannelsIdMessagesPostPostAsync(string id, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostNewMessageApiV1ChannelsIdMessagesPostPost(id, openWebuiModelsMessagesMessageForm);

                FormatPostNewMessageApiV1ChannelsIdMessagesPostPost(ref id, openWebuiModelsMessagesMessageForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/messages/post"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/messages/post");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (openWebuiModelsMessagesMessageForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(openWebuiModelsMessagesMessageForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse>();

                        PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/messages/post", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostNewMessageApiV1ChannelsIdMessagesPostPostDefaultImplementation(apiResponseLocalVar, id, openWebuiModelsMessagesMessageForm);

                        Events.ExecuteOnPostNewMessageApiV1ChannelsIdMessagesPostPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostNewMessageApiV1ChannelsIdMessagesPostPostDefaultImplementation(e, "/api/v1/channels/{id}/messages/post", uriBuilderLocalVar.Path, id, openWebuiModelsMessagesMessageForm);
                Events.ExecuteOnErrorPostNewMessageApiV1ChannelsIdMessagesPostPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse"/>
        /// </summary>
        public partial class PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IPostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse(ILogger<PostNewMessageApiV1ChannelsIdMessagesPostPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MessageModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MessageModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MessageModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(ref string id, ref string messageId, ReactionForm reactionForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <returns></returns>
        private void ValidateRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(string id, string messageId, ReactionForm reactionForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (messageId == null)
                throw new ArgumentNullException(nameof(messageId));

            if (reactionForm == null)
                throw new ArgumentNullException(nameof(reactionForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        private void AfterRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostDefaultImplementation(IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse apiResponseLocalVar, string id, string messageId, ReactionForm reactionForm)
        {
            bool suppressDefaultLog = false;
            AfterRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(ref suppressDefaultLog, apiResponseLocalVar, id, messageId, reactionForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        partial void AfterRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(ref bool suppressDefaultLog, IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse apiResponseLocalVar, string id, string messageId, ReactionForm reactionForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        private void OnErrorRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, ReactionForm reactionForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, messageId, reactionForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        partial void OnErrorRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, ReactionForm reactionForm);

        /// <summary>
        /// Remove Reaction By Id And User Id And Name 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse"/>&gt;</returns>
        public async Task<IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse?> RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostOrDefaultAsync(string id, string messageId, ReactionForm reactionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostAsync(id, messageId, reactionForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove Reaction By Id And User Id And Name 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="reactionForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse"/>&gt;</returns>
        public async Task<IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse> RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostAsync(string id, string messageId, ReactionForm reactionForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(id, messageId, reactionForm);

                FormatRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(ref id, ref messageId, reactionForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/messages/{message_id}/reactions/remove"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/messages/{message_id}/reactions/remove");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmessage_id%7D", Uri.EscapeDataString(messageId.ToString()));

                    httpRequestMessageLocalVar.Content = (reactionForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(reactionForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse>();

                        RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/messages/{message_id}/reactions/remove", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostDefaultImplementation(apiResponseLocalVar, id, messageId, reactionForm);

                        Events.ExecuteOnRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostDefaultImplementation(e, "/api/v1/channels/{id}/messages/{message_id}/reactions/remove", uriBuilderLocalVar.Path, id, messageId, reactionForm);
                Events.ExecuteOnErrorRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse"/>
        /// </summary>
        public partial class RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IRemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse(ILogger<RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateChannelByIdApiV1ChannelsIdUpdatePost(ref string id, ChannelForm channelForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        /// <returns></returns>
        private void ValidateUpdateChannelByIdApiV1ChannelsIdUpdatePost(string id, ChannelForm channelForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (channelForm == null)
                throw new ArgumentNullException(nameof(channelForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        private void AfterUpdateChannelByIdApiV1ChannelsIdUpdatePostDefaultImplementation(IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse apiResponseLocalVar, string id, ChannelForm channelForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateChannelByIdApiV1ChannelsIdUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, channelForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        partial void AfterUpdateChannelByIdApiV1ChannelsIdUpdatePost(ref bool suppressDefaultLog, IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse apiResponseLocalVar, string id, ChannelForm channelForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        private void OnErrorUpdateChannelByIdApiV1ChannelsIdUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ChannelForm channelForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateChannelByIdApiV1ChannelsIdUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, channelForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        partial void OnErrorUpdateChannelByIdApiV1ChannelsIdUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, ChannelForm channelForm);

        /// <summary>
        /// Update Channel By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse?> UpdateChannelByIdApiV1ChannelsIdUpdatePostOrDefaultAsync(string id, ChannelForm channelForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateChannelByIdApiV1ChannelsIdUpdatePostAsync(id, channelForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Channel By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="channelForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse> UpdateChannelByIdApiV1ChannelsIdUpdatePostAsync(string id, ChannelForm channelForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateChannelByIdApiV1ChannelsIdUpdatePost(id, channelForm);

                FormatUpdateChannelByIdApiV1ChannelsIdUpdatePost(ref id, channelForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (channelForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(channelForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse>();

                        UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateChannelByIdApiV1ChannelsIdUpdatePostDefaultImplementation(apiResponseLocalVar, id, channelForm);

                        Events.ExecuteOnUpdateChannelByIdApiV1ChannelsIdUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateChannelByIdApiV1ChannelsIdUpdatePostDefaultImplementation(e, "/api/v1/channels/{id}/update", uriBuilderLocalVar.Path, id, channelForm);
                Events.ExecuteOnErrorUpdateChannelByIdApiV1ChannelsIdUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse(ILogger<UpdateChannelByIdApiV1ChannelsIdUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.ChannelModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.ChannelModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.ChannelModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(ref string id, ref string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <returns></returns>
        private void ValidateUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (messageId == null)
                throw new ArgumentNullException(nameof(messageId));

            if (openWebuiModelsMessagesMessageForm == null)
                throw new ArgumentNullException(nameof(openWebuiModelsMessagesMessageForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        private void AfterUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostDefaultImplementation(IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse apiResponseLocalVar, string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, messageId, openWebuiModelsMessagesMessageForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        partial void AfterUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(ref bool suppressDefaultLog, IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse apiResponseLocalVar, string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        private void OnErrorUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, messageId, openWebuiModelsMessagesMessageForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        partial void OnErrorUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm);

        /// <summary>
        /// Update Message By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse?> UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostOrDefaultAsync(string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostAsync(id, messageId, openWebuiModelsMessagesMessageForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Message By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="messageId"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse> UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostAsync(string id, string messageId, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(id, messageId, openWebuiModelsMessagesMessageForm);

                FormatUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(ref id, ref messageId, openWebuiModelsMessagesMessageForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/channels/{id}/messages/{message_id}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/channels/{id}/messages/{message_id}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmessage_id%7D", Uri.EscapeDataString(messageId.ToString()));

                    httpRequestMessageLocalVar.Content = (openWebuiModelsMessagesMessageForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(openWebuiModelsMessagesMessageForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse>();

                        UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/channels/{id}/messages/{message_id}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostDefaultImplementation(apiResponseLocalVar, id, messageId, openWebuiModelsMessagesMessageForm);

                        Events.ExecuteOnUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostDefaultImplementation(e, "/api/v1/channels/{id}/messages/{message_id}/update", uriBuilderLocalVar.Path, id, messageId, openWebuiModelsMessagesMessageForm);
                Events.ExecuteOnErrorUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse(ILogger<UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MessageModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MessageModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MessageModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
