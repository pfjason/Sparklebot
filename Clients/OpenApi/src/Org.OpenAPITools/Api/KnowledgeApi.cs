// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IKnowledgeApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        KnowledgeApiEvents Events { get; }

        /// <summary>
        /// Add File To Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse"/>&gt;</returns>
        Task<IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse> AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add File To Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse"/>?&gt;</returns>
        Task<IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse?> AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostOrDefaultAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Files To Knowledge Batch
        /// </summary>
        /// <remarks>
        /// Add multiple files to a knowledge base
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse"/>&gt;</returns>
        Task<IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse> AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostAsync(string id, List<KnowledgeFileIdForm> knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Files To Knowledge Batch
        /// </summary>
        /// <remarks>
        /// Add multiple files to a knowledge base
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse"/>?&gt;</returns>
        Task<IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse?> AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostOrDefaultAsync(string id, List<KnowledgeFileIdForm> knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Knowledge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse"/>&gt;</returns>
        Task<ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse> CreateNewKnowledgeApiV1KnowledgeCreatePostAsync(KnowledgeForm knowledgeForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create New Knowledge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="knowledgeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse"/>?&gt;</returns>
        Task<ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse?> CreateNewKnowledgeApiV1KnowledgeCreatePostOrDefaultAsync(KnowledgeForm knowledgeForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse> DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse?> DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Knowledge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeApiV1KnowledgeGetApiResponse"/>&gt;</returns>
        Task<IGetKnowledgeApiV1KnowledgeGetApiResponse> GetKnowledgeApiV1KnowledgeGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Knowledge
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeApiV1KnowledgeGetApiResponse"/>?&gt;</returns>
        Task<IGetKnowledgeApiV1KnowledgeGetApiResponse?> GetKnowledgeApiV1KnowledgeGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse"/>&gt;</returns>
        Task<IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse> GetKnowledgeByIdApiV1KnowledgeIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse"/>?&gt;</returns>
        Task<IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse?> GetKnowledgeByIdApiV1KnowledgeIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Knowledge List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeListApiV1KnowledgeListGetApiResponse"/>&gt;</returns>
        Task<IGetKnowledgeListApiV1KnowledgeListGetApiResponse> GetKnowledgeListApiV1KnowledgeListGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Knowledge List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeListApiV1KnowledgeListGetApiResponse"/>?&gt;</returns>
        Task<IGetKnowledgeListApiV1KnowledgeListGetApiResponse?> GetKnowledgeListApiV1KnowledgeListGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reindex Knowledge Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse"/>&gt;</returns>
        Task<IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse> ReindexKnowledgeFilesApiV1KnowledgeReindexPostAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reindex Knowledge Files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse"/>?&gt;</returns>
        Task<IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse?> ReindexKnowledgeFilesApiV1KnowledgeReindexPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove File From Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse"/>&gt;</returns>
        Task<IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse> RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove File From Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse"/>?&gt;</returns>
        Task<IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse?> RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostOrDefaultAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse"/>&gt;</returns>
        Task<IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse> ResetKnowledgeByIdApiV1KnowledgeIdResetPostAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse"/>?&gt;</returns>
        Task<IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse?> ResetKnowledgeByIdApiV1KnowledgeIdResetPostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update File From Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse> UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update File From Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse?> UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostOrDefaultAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse> UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostAsync(string id, KnowledgeForm knowledgeForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Knowledge By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse?> UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostOrDefaultAsync(string id, KnowledgeForm knowledgeForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse"/>
    /// </summary>
    public interface IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.KnowledgeFilesResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse"/>
    /// </summary>
    public interface IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.KnowledgeFilesResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse"/>
    /// </summary>
    public interface ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.KnowledgeResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetKnowledgeApiV1KnowledgeGetApiResponse"/>
    /// </summary>
    public interface IGetKnowledgeApiV1KnowledgeGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<KnowledgeUserResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse"/>
    /// </summary>
    public interface IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.KnowledgeFilesResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetKnowledgeListApiV1KnowledgeListGetApiResponse"/>
    /// </summary>
    public interface IGetKnowledgeListApiV1KnowledgeListGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<KnowledgeUserResponse>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse"/>
    /// </summary>
    public interface IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse"/>
    /// </summary>
    public interface IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.KnowledgeFilesResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse"/>
    /// </summary>
    public interface IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.KnowledgeResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.KnowledgeFilesResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.KnowledgeFilesResponse?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class KnowledgeApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost;

        internal void ExecuteOnAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(KnowledgeApi.AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse apiResponse)
        {
            OnAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(Exception exception)
        {
            OnErrorAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost;

        internal void ExecuteOnAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(KnowledgeApi.AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse apiResponse)
        {
            OnAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(Exception exception)
        {
            OnErrorAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNewKnowledgeApiV1KnowledgeCreatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNewKnowledgeApiV1KnowledgeCreatePost;

        internal void ExecuteOnCreateNewKnowledgeApiV1KnowledgeCreatePost(KnowledgeApi.CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse apiResponse)
        {
            OnCreateNewKnowledgeApiV1KnowledgeCreatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNewKnowledgeApiV1KnowledgeCreatePost(Exception exception)
        {
            OnErrorCreateNewKnowledgeApiV1KnowledgeCreatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete;

        internal void ExecuteOnDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(KnowledgeApi.DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse apiResponse)
        {
            OnDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(Exception exception)
        {
            OnErrorDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetKnowledgeApiV1KnowledgeGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetKnowledgeApiV1KnowledgeGet;

        internal void ExecuteOnGetKnowledgeApiV1KnowledgeGet(KnowledgeApi.GetKnowledgeApiV1KnowledgeGetApiResponse apiResponse)
        {
            OnGetKnowledgeApiV1KnowledgeGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetKnowledgeApiV1KnowledgeGet(Exception exception)
        {
            OnErrorGetKnowledgeApiV1KnowledgeGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetKnowledgeByIdApiV1KnowledgeIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetKnowledgeByIdApiV1KnowledgeIdGet;

        internal void ExecuteOnGetKnowledgeByIdApiV1KnowledgeIdGet(KnowledgeApi.GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse apiResponse)
        {
            OnGetKnowledgeByIdApiV1KnowledgeIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetKnowledgeByIdApiV1KnowledgeIdGet(Exception exception)
        {
            OnErrorGetKnowledgeByIdApiV1KnowledgeIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetKnowledgeListApiV1KnowledgeListGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetKnowledgeListApiV1KnowledgeListGet;

        internal void ExecuteOnGetKnowledgeListApiV1KnowledgeListGet(KnowledgeApi.GetKnowledgeListApiV1KnowledgeListGetApiResponse apiResponse)
        {
            OnGetKnowledgeListApiV1KnowledgeListGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetKnowledgeListApiV1KnowledgeListGet(Exception exception)
        {
            OnErrorGetKnowledgeListApiV1KnowledgeListGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReindexKnowledgeFilesApiV1KnowledgeReindexPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReindexKnowledgeFilesApiV1KnowledgeReindexPost;

        internal void ExecuteOnReindexKnowledgeFilesApiV1KnowledgeReindexPost(KnowledgeApi.ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse apiResponse)
        {
            OnReindexKnowledgeFilesApiV1KnowledgeReindexPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReindexKnowledgeFilesApiV1KnowledgeReindexPost(Exception exception)
        {
            OnErrorReindexKnowledgeFilesApiV1KnowledgeReindexPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost;

        internal void ExecuteOnRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(KnowledgeApi.RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse apiResponse)
        {
            OnRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(Exception exception)
        {
            OnErrorRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResetKnowledgeByIdApiV1KnowledgeIdResetPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResetKnowledgeByIdApiV1KnowledgeIdResetPost;

        internal void ExecuteOnResetKnowledgeByIdApiV1KnowledgeIdResetPost(KnowledgeApi.ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse apiResponse)
        {
            OnResetKnowledgeByIdApiV1KnowledgeIdResetPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResetKnowledgeByIdApiV1KnowledgeIdResetPost(Exception exception)
        {
            OnErrorResetKnowledgeByIdApiV1KnowledgeIdResetPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost;

        internal void ExecuteOnUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(KnowledgeApi.UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse apiResponse)
        {
            OnUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(Exception exception)
        {
            OnErrorUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost;

        internal void ExecuteOnUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(KnowledgeApi.UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse apiResponse)
        {
            OnUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(Exception exception)
        {
            OnErrorUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class KnowledgeApi : IKnowledgeApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<KnowledgeApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public KnowledgeApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="KnowledgeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KnowledgeApi(ILogger<KnowledgeApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, KnowledgeApiEvents knowledgeApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<KnowledgeApi>();
            HttpClient = httpClient;
            Events = knowledgeApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(ref string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <returns></returns>
        private void ValidateAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (knowledgeFileIdForm == null)
                throw new ArgumentNullException(nameof(knowledgeFileIdForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        private void AfterAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostDefaultImplementation(IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse apiResponseLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            bool suppressDefaultLog = false;
            AfterAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(ref suppressDefaultLog, apiResponseLocalVar, id, knowledgeFileIdForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        partial void AfterAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(ref bool suppressDefaultLog, IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse apiResponseLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        private void OnErrorAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, knowledgeFileIdForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        partial void OnErrorAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Add File To Knowledge By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse?> AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostOrDefaultAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostAsync(id, knowledgeFileIdForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add File To Knowledge By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse> AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(id, knowledgeFileIdForm);

                FormatAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(ref id, knowledgeFileIdForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/{id}/file/add"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/{id}/file/add");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (knowledgeFileIdForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(knowledgeFileIdForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse>();

                        AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/{id}/file/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostDefaultImplementation(apiResponseLocalVar, id, knowledgeFileIdForm);

                        Events.ExecuteOnAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostDefaultImplementation(e, "/api/v1/knowledge/{id}/file/add", uriBuilderLocalVar.Path, id, knowledgeFileIdForm);
                Events.ExecuteOnErrorAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse"/>
        /// </summary>
        public partial class AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse(ILogger<AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.KnowledgeFilesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.KnowledgeFilesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.KnowledgeFilesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(ref string id, List<KnowledgeFileIdForm> knowledgeFileIdForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <returns></returns>
        private void ValidateAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(string id, List<KnowledgeFileIdForm> knowledgeFileIdForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (knowledgeFileIdForm == null)
                throw new ArgumentNullException(nameof(knowledgeFileIdForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        private void AfterAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostDefaultImplementation(IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse apiResponseLocalVar, string id, List<KnowledgeFileIdForm> knowledgeFileIdForm)
        {
            bool suppressDefaultLog = false;
            AfterAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(ref suppressDefaultLog, apiResponseLocalVar, id, knowledgeFileIdForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        partial void AfterAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(ref bool suppressDefaultLog, IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse apiResponseLocalVar, string id, List<KnowledgeFileIdForm> knowledgeFileIdForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        private void OnErrorAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, List<KnowledgeFileIdForm> knowledgeFileIdForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, knowledgeFileIdForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        partial void OnErrorAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, List<KnowledgeFileIdForm> knowledgeFileIdForm);

        /// <summary>
        /// Add Files To Knowledge Batch Add multiple files to a knowledge base
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse?> AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostOrDefaultAsync(string id, List<KnowledgeFileIdForm> knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostAsync(id, knowledgeFileIdForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Files To Knowledge Batch Add multiple files to a knowledge base
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse> AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostAsync(string id, List<KnowledgeFileIdForm> knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(id, knowledgeFileIdForm);

                FormatAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(ref id, knowledgeFileIdForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/{id}/files/batch/add"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/{id}/files/batch/add");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (knowledgeFileIdForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(knowledgeFileIdForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse>();

                        AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/{id}/files/batch/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostDefaultImplementation(apiResponseLocalVar, id, knowledgeFileIdForm);

                        Events.ExecuteOnAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostDefaultImplementation(e, "/api/v1/knowledge/{id}/files/batch/add", uriBuilderLocalVar.Path, id, knowledgeFileIdForm);
                Events.ExecuteOnErrorAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse"/>
        /// </summary>
        public partial class AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse(ILogger<AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.KnowledgeFilesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.KnowledgeFilesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.KnowledgeFilesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateNewKnowledgeApiV1KnowledgeCreatePost(KnowledgeForm knowledgeForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="knowledgeForm"></param>
        /// <returns></returns>
        private void ValidateCreateNewKnowledgeApiV1KnowledgeCreatePost(KnowledgeForm knowledgeForm)
        {
            if (knowledgeForm == null)
                throw new ArgumentNullException(nameof(knowledgeForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="knowledgeForm"></param>
        private void AfterCreateNewKnowledgeApiV1KnowledgeCreatePostDefaultImplementation(ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse apiResponseLocalVar, KnowledgeForm knowledgeForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateNewKnowledgeApiV1KnowledgeCreatePost(ref suppressDefaultLog, apiResponseLocalVar, knowledgeForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="knowledgeForm"></param>
        partial void AfterCreateNewKnowledgeApiV1KnowledgeCreatePost(ref bool suppressDefaultLog, ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse apiResponseLocalVar, KnowledgeForm knowledgeForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="knowledgeForm"></param>
        private void OnErrorCreateNewKnowledgeApiV1KnowledgeCreatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, KnowledgeForm knowledgeForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateNewKnowledgeApiV1KnowledgeCreatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, knowledgeForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="knowledgeForm"></param>
        partial void OnErrorCreateNewKnowledgeApiV1KnowledgeCreatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, KnowledgeForm knowledgeForm);

        /// <summary>
        /// Create New Knowledge 
        /// </summary>
        /// <param name="knowledgeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse?> CreateNewKnowledgeApiV1KnowledgeCreatePostOrDefaultAsync(KnowledgeForm knowledgeForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNewKnowledgeApiV1KnowledgeCreatePostAsync(knowledgeForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create New Knowledge 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="knowledgeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse"/>&gt;</returns>
        public async Task<ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse> CreateNewKnowledgeApiV1KnowledgeCreatePostAsync(KnowledgeForm knowledgeForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNewKnowledgeApiV1KnowledgeCreatePost(knowledgeForm);

                FormatCreateNewKnowledgeApiV1KnowledgeCreatePost(knowledgeForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/create"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/create");

                    httpRequestMessageLocalVar.Content = (knowledgeForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(knowledgeForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse>();

                        CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/create", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNewKnowledgeApiV1KnowledgeCreatePostDefaultImplementation(apiResponseLocalVar, knowledgeForm);

                        Events.ExecuteOnCreateNewKnowledgeApiV1KnowledgeCreatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNewKnowledgeApiV1KnowledgeCreatePostDefaultImplementation(e, "/api/v1/knowledge/create", uriBuilderLocalVar.Path, knowledgeForm);
                Events.ExecuteOnErrorCreateNewKnowledgeApiV1KnowledgeCreatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse"/>
        /// </summary>
        public partial class CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse(ILogger<CreateNewKnowledgeApiV1KnowledgeCreatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.KnowledgeResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.KnowledgeResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.KnowledgeResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteDefaultImplementation(IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(ref bool suppressDefaultLog, IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete Knowledge By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse?> DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Knowledge By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse> DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(id);

                FormatDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/{id}/delete"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/{id}/delete");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse>();

                        DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/{id}/delete", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteDefaultImplementation(e, "/api/v1/knowledge/{id}/delete", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse(ILogger<DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetKnowledgeApiV1KnowledgeGetDefaultImplementation(IGetKnowledgeApiV1KnowledgeGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetKnowledgeApiV1KnowledgeGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetKnowledgeApiV1KnowledgeGet(ref bool suppressDefaultLog, IGetKnowledgeApiV1KnowledgeGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetKnowledgeApiV1KnowledgeGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetKnowledgeApiV1KnowledgeGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetKnowledgeApiV1KnowledgeGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Knowledge 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeApiV1KnowledgeGetApiResponse"/>&gt;</returns>
        public async Task<IGetKnowledgeApiV1KnowledgeGetApiResponse?> GetKnowledgeApiV1KnowledgeGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetKnowledgeApiV1KnowledgeGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Knowledge 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeApiV1KnowledgeGetApiResponse"/>&gt;</returns>
        public async Task<IGetKnowledgeApiV1KnowledgeGetApiResponse> GetKnowledgeApiV1KnowledgeGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetKnowledgeApiV1KnowledgeGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetKnowledgeApiV1KnowledgeGetApiResponse>();

                        GetKnowledgeApiV1KnowledgeGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetKnowledgeApiV1KnowledgeGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetKnowledgeApiV1KnowledgeGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetKnowledgeApiV1KnowledgeGetDefaultImplementation(e, "/api/v1/knowledge/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetKnowledgeApiV1KnowledgeGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetKnowledgeApiV1KnowledgeGetApiResponse"/>
        /// </summary>
        public partial class GetKnowledgeApiV1KnowledgeGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetKnowledgeApiV1KnowledgeGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetKnowledgeApiV1KnowledgeGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetKnowledgeApiV1KnowledgeGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetKnowledgeApiV1KnowledgeGetApiResponse(ILogger<GetKnowledgeApiV1KnowledgeGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<KnowledgeUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<KnowledgeUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<KnowledgeUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetKnowledgeByIdApiV1KnowledgeIdGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetKnowledgeByIdApiV1KnowledgeIdGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetKnowledgeByIdApiV1KnowledgeIdGetDefaultImplementation(IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetKnowledgeByIdApiV1KnowledgeIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetKnowledgeByIdApiV1KnowledgeIdGet(ref bool suppressDefaultLog, IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetKnowledgeByIdApiV1KnowledgeIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetKnowledgeByIdApiV1KnowledgeIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetKnowledgeByIdApiV1KnowledgeIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Knowledge By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse?> GetKnowledgeByIdApiV1KnowledgeIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetKnowledgeByIdApiV1KnowledgeIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Knowledge By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse> GetKnowledgeByIdApiV1KnowledgeIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetKnowledgeByIdApiV1KnowledgeIdGet(id);

                FormatGetKnowledgeByIdApiV1KnowledgeIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse>();

                        GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetKnowledgeByIdApiV1KnowledgeIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetKnowledgeByIdApiV1KnowledgeIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetKnowledgeByIdApiV1KnowledgeIdGetDefaultImplementation(e, "/api/v1/knowledge/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetKnowledgeByIdApiV1KnowledgeIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse"/>
        /// </summary>
        public partial class GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetKnowledgeByIdApiV1KnowledgeIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse(ILogger<GetKnowledgeByIdApiV1KnowledgeIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.KnowledgeFilesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.KnowledgeFilesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.KnowledgeFilesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetKnowledgeListApiV1KnowledgeListGetDefaultImplementation(IGetKnowledgeListApiV1KnowledgeListGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetKnowledgeListApiV1KnowledgeListGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetKnowledgeListApiV1KnowledgeListGet(ref bool suppressDefaultLog, IGetKnowledgeListApiV1KnowledgeListGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetKnowledgeListApiV1KnowledgeListGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetKnowledgeListApiV1KnowledgeListGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetKnowledgeListApiV1KnowledgeListGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Knowledge List 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeListApiV1KnowledgeListGetApiResponse"/>&gt;</returns>
        public async Task<IGetKnowledgeListApiV1KnowledgeListGetApiResponse?> GetKnowledgeListApiV1KnowledgeListGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetKnowledgeListApiV1KnowledgeListGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Knowledge List 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetKnowledgeListApiV1KnowledgeListGetApiResponse"/>&gt;</returns>
        public async Task<IGetKnowledgeListApiV1KnowledgeListGetApiResponse> GetKnowledgeListApiV1KnowledgeListGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/list"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/list");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetKnowledgeListApiV1KnowledgeListGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetKnowledgeListApiV1KnowledgeListGetApiResponse>();

                        GetKnowledgeListApiV1KnowledgeListGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/list", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetKnowledgeListApiV1KnowledgeListGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetKnowledgeListApiV1KnowledgeListGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetKnowledgeListApiV1KnowledgeListGetDefaultImplementation(e, "/api/v1/knowledge/list", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetKnowledgeListApiV1KnowledgeListGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetKnowledgeListApiV1KnowledgeListGetApiResponse"/>
        /// </summary>
        public partial class GetKnowledgeListApiV1KnowledgeListGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetKnowledgeListApiV1KnowledgeListGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetKnowledgeListApiV1KnowledgeListGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetKnowledgeListApiV1KnowledgeListGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetKnowledgeListApiV1KnowledgeListGetApiResponse(ILogger<GetKnowledgeListApiV1KnowledgeListGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<KnowledgeUserResponse>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<KnowledgeUserResponse>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<KnowledgeUserResponse>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterReindexKnowledgeFilesApiV1KnowledgeReindexPostDefaultImplementation(IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterReindexKnowledgeFilesApiV1KnowledgeReindexPost(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterReindexKnowledgeFilesApiV1KnowledgeReindexPost(ref bool suppressDefaultLog, IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorReindexKnowledgeFilesApiV1KnowledgeReindexPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorReindexKnowledgeFilesApiV1KnowledgeReindexPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorReindexKnowledgeFilesApiV1KnowledgeReindexPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Reindex Knowledge Files 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse"/>&gt;</returns>
        public async Task<IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse?> ReindexKnowledgeFilesApiV1KnowledgeReindexPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReindexKnowledgeFilesApiV1KnowledgeReindexPostAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reindex Knowledge Files 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse"/>&gt;</returns>
        public async Task<IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse> ReindexKnowledgeFilesApiV1KnowledgeReindexPostAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/reindex"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/reindex");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse>();

                        ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/reindex", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReindexKnowledgeFilesApiV1KnowledgeReindexPostDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnReindexKnowledgeFilesApiV1KnowledgeReindexPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReindexKnowledgeFilesApiV1KnowledgeReindexPostDefaultImplementation(e, "/api/v1/knowledge/reindex", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorReindexKnowledgeFilesApiV1KnowledgeReindexPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse"/>
        /// </summary>
        public partial class ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse(ILogger<ReindexKnowledgeFilesApiV1KnowledgeReindexPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(ref string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <returns></returns>
        private void ValidateRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (knowledgeFileIdForm == null)
                throw new ArgumentNullException(nameof(knowledgeFileIdForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        private void AfterRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostDefaultImplementation(IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse apiResponseLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            bool suppressDefaultLog = false;
            AfterRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(ref suppressDefaultLog, apiResponseLocalVar, id, knowledgeFileIdForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        partial void AfterRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(ref bool suppressDefaultLog, IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse apiResponseLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        private void OnErrorRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, knowledgeFileIdForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        partial void OnErrorRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Remove File From Knowledge By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse"/>&gt;</returns>
        public async Task<IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse?> RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostOrDefaultAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostAsync(id, knowledgeFileIdForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove File From Knowledge By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse"/>&gt;</returns>
        public async Task<IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse> RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(id, knowledgeFileIdForm);

                FormatRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(ref id, knowledgeFileIdForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/{id}/file/remove"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/{id}/file/remove");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (knowledgeFileIdForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(knowledgeFileIdForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse>();

                        RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/{id}/file/remove", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostDefaultImplementation(apiResponseLocalVar, id, knowledgeFileIdForm);

                        Events.ExecuteOnRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostDefaultImplementation(e, "/api/v1/knowledge/{id}/file/remove", uriBuilderLocalVar.Path, id, knowledgeFileIdForm);
                Events.ExecuteOnErrorRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse"/>
        /// </summary>
        public partial class RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse(ILogger<RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.KnowledgeFilesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.KnowledgeFilesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.KnowledgeFilesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatResetKnowledgeByIdApiV1KnowledgeIdResetPost(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateResetKnowledgeByIdApiV1KnowledgeIdResetPost(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterResetKnowledgeByIdApiV1KnowledgeIdResetPostDefaultImplementation(IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterResetKnowledgeByIdApiV1KnowledgeIdResetPost(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterResetKnowledgeByIdApiV1KnowledgeIdResetPost(ref bool suppressDefaultLog, IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorResetKnowledgeByIdApiV1KnowledgeIdResetPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorResetKnowledgeByIdApiV1KnowledgeIdResetPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorResetKnowledgeByIdApiV1KnowledgeIdResetPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Reset Knowledge By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse"/>&gt;</returns>
        public async Task<IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse?> ResetKnowledgeByIdApiV1KnowledgeIdResetPostOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ResetKnowledgeByIdApiV1KnowledgeIdResetPostAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reset Knowledge By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse"/>&gt;</returns>
        public async Task<IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse> ResetKnowledgeByIdApiV1KnowledgeIdResetPostAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateResetKnowledgeByIdApiV1KnowledgeIdResetPost(id);

                FormatResetKnowledgeByIdApiV1KnowledgeIdResetPost(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/{id}/reset"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/{id}/reset");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse>();

                        ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/{id}/reset", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResetKnowledgeByIdApiV1KnowledgeIdResetPostDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnResetKnowledgeByIdApiV1KnowledgeIdResetPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResetKnowledgeByIdApiV1KnowledgeIdResetPostDefaultImplementation(e, "/api/v1/knowledge/{id}/reset", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorResetKnowledgeByIdApiV1KnowledgeIdResetPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse"/>
        /// </summary>
        public partial class ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse(ILogger<ResetKnowledgeByIdApiV1KnowledgeIdResetPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.KnowledgeResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.KnowledgeResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.KnowledgeResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(ref string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <returns></returns>
        private void ValidateUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (knowledgeFileIdForm == null)
                throw new ArgumentNullException(nameof(knowledgeFileIdForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        private void AfterUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostDefaultImplementation(IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse apiResponseLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, knowledgeFileIdForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        partial void AfterUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(ref bool suppressDefaultLog, IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse apiResponseLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        private void OnErrorUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, knowledgeFileIdForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        partial void OnErrorUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, KnowledgeFileIdForm knowledgeFileIdForm);

        /// <summary>
        /// Update File From Knowledge By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse?> UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostOrDefaultAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostAsync(id, knowledgeFileIdForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update File From Knowledge By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeFileIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse> UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostAsync(string id, KnowledgeFileIdForm knowledgeFileIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(id, knowledgeFileIdForm);

                FormatUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(ref id, knowledgeFileIdForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/{id}/file/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/{id}/file/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (knowledgeFileIdForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(knowledgeFileIdForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse>();

                        UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/{id}/file/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostDefaultImplementation(apiResponseLocalVar, id, knowledgeFileIdForm);

                        Events.ExecuteOnUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostDefaultImplementation(e, "/api/v1/knowledge/{id}/file/update", uriBuilderLocalVar.Path, id, knowledgeFileIdForm);
                Events.ExecuteOnErrorUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse(ILogger<UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.KnowledgeFilesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.KnowledgeFilesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.KnowledgeFilesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(ref string id, KnowledgeForm knowledgeForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        /// <returns></returns>
        private void ValidateUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(string id, KnowledgeForm knowledgeForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (knowledgeForm == null)
                throw new ArgumentNullException(nameof(knowledgeForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        private void AfterUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostDefaultImplementation(IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse apiResponseLocalVar, string id, KnowledgeForm knowledgeForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, knowledgeForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        partial void AfterUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(ref bool suppressDefaultLog, IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse apiResponseLocalVar, string id, KnowledgeForm knowledgeForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        private void OnErrorUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, KnowledgeForm knowledgeForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, knowledgeForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        partial void OnErrorUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, KnowledgeForm knowledgeForm);

        /// <summary>
        /// Update Knowledge By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse?> UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostOrDefaultAsync(string id, KnowledgeForm knowledgeForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostAsync(id, knowledgeForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Knowledge By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="knowledgeForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse> UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostAsync(string id, KnowledgeForm knowledgeForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(id, knowledgeForm);

                FormatUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(ref id, knowledgeForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/knowledge/{id}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/knowledge/{id}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (knowledgeForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(knowledgeForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse>();

                        UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/knowledge/{id}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostDefaultImplementation(apiResponseLocalVar, id, knowledgeForm);

                        Events.ExecuteOnUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostDefaultImplementation(e, "/api/v1/knowledge/{id}/update", uriBuilderLocalVar.Path, id, knowledgeForm);
                Events.ExecuteOnErrorUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse(ILogger<UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.KnowledgeFilesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.KnowledgeFilesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.KnowledgeFilesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
