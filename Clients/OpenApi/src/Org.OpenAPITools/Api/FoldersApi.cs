// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFoldersApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FoldersApiEvents Events { get; }

        /// <summary>
        /// Create Folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiV1FoldersPostApiResponse"/>&gt;</returns>
        Task<ICreateFolderApiV1FoldersPostApiResponse> CreateFolderApiV1FoldersPostAsync(FolderForm folderForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="folderForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiV1FoldersPostApiResponse"/>?&gt;</returns>
        Task<ICreateFolderApiV1FoldersPostApiResponse?> CreateFolderApiV1FoldersPostOrDefaultAsync(FolderForm folderForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Folder By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse> DeleteFolderByIdApiV1FoldersIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Folder By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse?> DeleteFolderByIdApiV1FoldersIdDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Folder By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderByIdApiV1FoldersIdGetApiResponse"/>&gt;</returns>
        Task<IGetFolderByIdApiV1FoldersIdGetApiResponse> GetFolderByIdApiV1FoldersIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Folder By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderByIdApiV1FoldersIdGetApiResponse"/>?&gt;</returns>
        Task<IGetFolderByIdApiV1FoldersIdGetApiResponse?> GetFolderByIdApiV1FoldersIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiV1FoldersGetApiResponse"/>&gt;</returns>
        Task<IGetFoldersApiV1FoldersGetApiResponse> GetFoldersApiV1FoldersGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Folders
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiV1FoldersGetApiResponse"/>?&gt;</returns>
        Task<IGetFoldersApiV1FoldersGetApiResponse?> GetFoldersApiV1FoldersGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Folder Is Expanded By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse"/>&gt;</returns>
        Task<IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse> UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostAsync(string id, FolderIsExpandedForm folderIsExpandedForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Folder Is Expanded By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse"/>?&gt;</returns>
        Task<IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse?> UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostOrDefaultAsync(string id, FolderIsExpandedForm folderIsExpandedForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Folder Name By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse> UpdateFolderNameByIdApiV1FoldersIdUpdatePostAsync(string id, FolderForm folderForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Folder Name By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse?> UpdateFolderNameByIdApiV1FoldersIdUpdatePostOrDefaultAsync(string id, FolderForm folderForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Folder Parent Id By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse"/>&gt;</returns>
        Task<IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse> UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostAsync(string id, FolderParentIdForm folderParentIdForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Folder Parent Id By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse"/>?&gt;</returns>
        Task<IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse?> UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostOrDefaultAsync(string id, FolderParentIdForm folderParentIdForm, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateFolderApiV1FoldersPostApiResponse"/>
    /// </summary>
    public interface ICreateFolderApiV1FoldersPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFolderByIdApiV1FoldersIdGetApiResponse"/>
    /// </summary>
    public interface IGetFolderByIdApiV1FoldersIdGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FolderModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetFoldersApiV1FoldersGetApiResponse"/>
    /// </summary>
    public interface IGetFoldersApiV1FoldersGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<FolderModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse"/>
    /// </summary>
    public interface IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse"/>
    /// </summary>
    public interface IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FoldersApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateFolderApiV1FoldersPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateFolderApiV1FoldersPost;

        internal void ExecuteOnCreateFolderApiV1FoldersPost(FoldersApi.CreateFolderApiV1FoldersPostApiResponse apiResponse)
        {
            OnCreateFolderApiV1FoldersPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateFolderApiV1FoldersPost(Exception exception)
        {
            OnErrorCreateFolderApiV1FoldersPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFolderByIdApiV1FoldersIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFolderByIdApiV1FoldersIdDelete;

        internal void ExecuteOnDeleteFolderByIdApiV1FoldersIdDelete(FoldersApi.DeleteFolderByIdApiV1FoldersIdDeleteApiResponse apiResponse)
        {
            OnDeleteFolderByIdApiV1FoldersIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFolderByIdApiV1FoldersIdDelete(Exception exception)
        {
            OnErrorDeleteFolderByIdApiV1FoldersIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFolderByIdApiV1FoldersIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFolderByIdApiV1FoldersIdGet;

        internal void ExecuteOnGetFolderByIdApiV1FoldersIdGet(FoldersApi.GetFolderByIdApiV1FoldersIdGetApiResponse apiResponse)
        {
            OnGetFolderByIdApiV1FoldersIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFolderByIdApiV1FoldersIdGet(Exception exception)
        {
            OnErrorGetFolderByIdApiV1FoldersIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFoldersApiV1FoldersGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFoldersApiV1FoldersGet;

        internal void ExecuteOnGetFoldersApiV1FoldersGet(FoldersApi.GetFoldersApiV1FoldersGetApiResponse apiResponse)
        {
            OnGetFoldersApiV1FoldersGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFoldersApiV1FoldersGet(Exception exception)
        {
            OnErrorGetFoldersApiV1FoldersGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost;

        internal void ExecuteOnUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(FoldersApi.UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse apiResponse)
        {
            OnUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(Exception exception)
        {
            OnErrorUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFolderNameByIdApiV1FoldersIdUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFolderNameByIdApiV1FoldersIdUpdatePost;

        internal void ExecuteOnUpdateFolderNameByIdApiV1FoldersIdUpdatePost(FoldersApi.UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse apiResponse)
        {
            OnUpdateFolderNameByIdApiV1FoldersIdUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFolderNameByIdApiV1FoldersIdUpdatePost(Exception exception)
        {
            OnErrorUpdateFolderNameByIdApiV1FoldersIdUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost;

        internal void ExecuteOnUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(FoldersApi.UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse apiResponse)
        {
            OnUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(Exception exception)
        {
            OnErrorUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FoldersApi : IFoldersApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FoldersApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FoldersApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoldersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoldersApi(ILogger<FoldersApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FoldersApiEvents foldersApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FoldersApi>();
            HttpClient = httpClient;
            Events = foldersApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatCreateFolderApiV1FoldersPost(FolderForm folderForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="folderForm"></param>
        /// <returns></returns>
        private void ValidateCreateFolderApiV1FoldersPost(FolderForm folderForm)
        {
            if (folderForm == null)
                throw new ArgumentNullException(nameof(folderForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderForm"></param>
        private void AfterCreateFolderApiV1FoldersPostDefaultImplementation(ICreateFolderApiV1FoldersPostApiResponse apiResponseLocalVar, FolderForm folderForm)
        {
            bool suppressDefaultLog = false;
            AfterCreateFolderApiV1FoldersPost(ref suppressDefaultLog, apiResponseLocalVar, folderForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="folderForm"></param>
        partial void AfterCreateFolderApiV1FoldersPost(ref bool suppressDefaultLog, ICreateFolderApiV1FoldersPostApiResponse apiResponseLocalVar, FolderForm folderForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderForm"></param>
        private void OnErrorCreateFolderApiV1FoldersPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FolderForm folderForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateFolderApiV1FoldersPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, folderForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="folderForm"></param>
        partial void OnErrorCreateFolderApiV1FoldersPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, FolderForm folderForm);

        /// <summary>
        /// Create Folder 
        /// </summary>
        /// <param name="folderForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiV1FoldersPostApiResponse"/>&gt;</returns>
        public async Task<ICreateFolderApiV1FoldersPostApiResponse?> CreateFolderApiV1FoldersPostOrDefaultAsync(FolderForm folderForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateFolderApiV1FoldersPostAsync(folderForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Folder 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateFolderApiV1FoldersPostApiResponse"/>&gt;</returns>
        public async Task<ICreateFolderApiV1FoldersPostApiResponse> CreateFolderApiV1FoldersPostAsync(FolderForm folderForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateFolderApiV1FoldersPost(folderForm);

                FormatCreateFolderApiV1FoldersPost(folderForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/folders/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/folders/");

                    httpRequestMessageLocalVar.Content = (folderForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(folderForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateFolderApiV1FoldersPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateFolderApiV1FoldersPostApiResponse>();

                        CreateFolderApiV1FoldersPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/folders/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateFolderApiV1FoldersPostDefaultImplementation(apiResponseLocalVar, folderForm);

                        Events.ExecuteOnCreateFolderApiV1FoldersPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateFolderApiV1FoldersPostDefaultImplementation(e, "/api/v1/folders/", uriBuilderLocalVar.Path, folderForm);
                Events.ExecuteOnErrorCreateFolderApiV1FoldersPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateFolderApiV1FoldersPostApiResponse"/>
        /// </summary>
        public partial class CreateFolderApiV1FoldersPostApiResponse : Org.OpenAPITools.Client.ApiResponse, ICreateFolderApiV1FoldersPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateFolderApiV1FoldersPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateFolderApiV1FoldersPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateFolderApiV1FoldersPostApiResponse(ILogger<CreateFolderApiV1FoldersPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteFolderByIdApiV1FoldersIdDelete(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateDeleteFolderByIdApiV1FoldersIdDelete(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterDeleteFolderByIdApiV1FoldersIdDeleteDefaultImplementation(IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFolderByIdApiV1FoldersIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterDeleteFolderByIdApiV1FoldersIdDelete(ref bool suppressDefaultLog, IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorDeleteFolderByIdApiV1FoldersIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteFolderByIdApiV1FoldersIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorDeleteFolderByIdApiV1FoldersIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Delete Folder By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse?> DeleteFolderByIdApiV1FoldersIdDeleteOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFolderByIdApiV1FoldersIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Folder By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse> DeleteFolderByIdApiV1FoldersIdDeleteAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteFolderByIdApiV1FoldersIdDelete(id);

                FormatDeleteFolderByIdApiV1FoldersIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/folders/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/folders/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFolderByIdApiV1FoldersIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFolderByIdApiV1FoldersIdDeleteApiResponse>();

                        DeleteFolderByIdApiV1FoldersIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/folders/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFolderByIdApiV1FoldersIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnDeleteFolderByIdApiV1FoldersIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFolderByIdApiV1FoldersIdDeleteDefaultImplementation(e, "/api/v1/folders/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorDeleteFolderByIdApiV1FoldersIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFolderByIdApiV1FoldersIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteFolderByIdApiV1FoldersIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteFolderByIdApiV1FoldersIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFolderByIdApiV1FoldersIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFolderByIdApiV1FoldersIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFolderByIdApiV1FoldersIdDeleteApiResponse(ILogger<DeleteFolderByIdApiV1FoldersIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFolderByIdApiV1FoldersIdGet(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetFolderByIdApiV1FoldersIdGet(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFolderByIdApiV1FoldersIdGetDefaultImplementation(IGetFolderByIdApiV1FoldersIdGetApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetFolderByIdApiV1FoldersIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFolderByIdApiV1FoldersIdGet(ref bool suppressDefaultLog, IGetFolderByIdApiV1FoldersIdGetApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorGetFolderByIdApiV1FoldersIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFolderByIdApiV1FoldersIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFolderByIdApiV1FoldersIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id);

        /// <summary>
        /// Get Folder By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderByIdApiV1FoldersIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetFolderByIdApiV1FoldersIdGetApiResponse?> GetFolderByIdApiV1FoldersIdGetOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFolderByIdApiV1FoldersIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Folder By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFolderByIdApiV1FoldersIdGetApiResponse"/>&gt;</returns>
        public async Task<IGetFolderByIdApiV1FoldersIdGetApiResponse> GetFolderByIdApiV1FoldersIdGetAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFolderByIdApiV1FoldersIdGet(id);

                FormatGetFolderByIdApiV1FoldersIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/folders/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/folders/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFolderByIdApiV1FoldersIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFolderByIdApiV1FoldersIdGetApiResponse>();

                        GetFolderByIdApiV1FoldersIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/folders/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFolderByIdApiV1FoldersIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFolderByIdApiV1FoldersIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFolderByIdApiV1FoldersIdGetDefaultImplementation(e, "/api/v1/folders/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFolderByIdApiV1FoldersIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFolderByIdApiV1FoldersIdGetApiResponse"/>
        /// </summary>
        public partial class GetFolderByIdApiV1FoldersIdGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFolderByIdApiV1FoldersIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFolderByIdApiV1FoldersIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFolderByIdApiV1FoldersIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFolderByIdApiV1FoldersIdGetApiResponse(ILogger<GetFolderByIdApiV1FoldersIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FolderModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FolderModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FolderModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetFoldersApiV1FoldersGetDefaultImplementation(IGetFoldersApiV1FoldersGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetFoldersApiV1FoldersGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetFoldersApiV1FoldersGet(ref bool suppressDefaultLog, IGetFoldersApiV1FoldersGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetFoldersApiV1FoldersGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetFoldersApiV1FoldersGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetFoldersApiV1FoldersGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Folders 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiV1FoldersGetApiResponse"/>&gt;</returns>
        public async Task<IGetFoldersApiV1FoldersGetApiResponse?> GetFoldersApiV1FoldersGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFoldersApiV1FoldersGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Folders 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFoldersApiV1FoldersGetApiResponse"/>&gt;</returns>
        public async Task<IGetFoldersApiV1FoldersGetApiResponse> GetFoldersApiV1FoldersGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/folders/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/folders/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFoldersApiV1FoldersGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFoldersApiV1FoldersGetApiResponse>();

                        GetFoldersApiV1FoldersGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/folders/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFoldersApiV1FoldersGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetFoldersApiV1FoldersGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFoldersApiV1FoldersGetDefaultImplementation(e, "/api/v1/folders/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetFoldersApiV1FoldersGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFoldersApiV1FoldersGetApiResponse"/>
        /// </summary>
        public partial class GetFoldersApiV1FoldersGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetFoldersApiV1FoldersGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFoldersApiV1FoldersGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFoldersApiV1FoldersGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFoldersApiV1FoldersGetApiResponse(ILogger<GetFoldersApiV1FoldersGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FolderModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FolderModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FolderModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(ref string id, FolderIsExpandedForm folderIsExpandedForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        /// <returns></returns>
        private void ValidateUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(string id, FolderIsExpandedForm folderIsExpandedForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (folderIsExpandedForm == null)
                throw new ArgumentNullException(nameof(folderIsExpandedForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        private void AfterUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostDefaultImplementation(IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse apiResponseLocalVar, string id, FolderIsExpandedForm folderIsExpandedForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(ref suppressDefaultLog, apiResponseLocalVar, id, folderIsExpandedForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        partial void AfterUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(ref bool suppressDefaultLog, IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse apiResponseLocalVar, string id, FolderIsExpandedForm folderIsExpandedForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        private void OnErrorUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FolderIsExpandedForm folderIsExpandedForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, folderIsExpandedForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        partial void OnErrorUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FolderIsExpandedForm folderIsExpandedForm);

        /// <summary>
        /// Update Folder Is Expanded By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse?> UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostOrDefaultAsync(string id, FolderIsExpandedForm folderIsExpandedForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostAsync(id, folderIsExpandedForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Folder Is Expanded By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="folderIsExpandedForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse> UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostAsync(string id, FolderIsExpandedForm folderIsExpandedForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(id, folderIsExpandedForm);

                FormatUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(ref id, folderIsExpandedForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/folders/{id}/update/expanded"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/folders/{id}/update/expanded");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (folderIsExpandedForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(folderIsExpandedForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse>();

                        UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/folders/{id}/update/expanded", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostDefaultImplementation(apiResponseLocalVar, id, folderIsExpandedForm);

                        Events.ExecuteOnUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostDefaultImplementation(e, "/api/v1/folders/{id}/update/expanded", uriBuilderLocalVar.Path, id, folderIsExpandedForm);
                Events.ExecuteOnErrorUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse"/>
        /// </summary>
        public partial class UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse(ILogger<UpdateFolderIsExpandedByIdApiV1FoldersIdUpdateExpandedPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFolderNameByIdApiV1FoldersIdUpdatePost(ref string id, FolderForm folderForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        /// <returns></returns>
        private void ValidateUpdateFolderNameByIdApiV1FoldersIdUpdatePost(string id, FolderForm folderForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (folderForm == null)
                throw new ArgumentNullException(nameof(folderForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        private void AfterUpdateFolderNameByIdApiV1FoldersIdUpdatePostDefaultImplementation(IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse apiResponseLocalVar, string id, FolderForm folderForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFolderNameByIdApiV1FoldersIdUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, id, folderForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        partial void AfterUpdateFolderNameByIdApiV1FoldersIdUpdatePost(ref bool suppressDefaultLog, IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse apiResponseLocalVar, string id, FolderForm folderForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        private void OnErrorUpdateFolderNameByIdApiV1FoldersIdUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FolderForm folderForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFolderNameByIdApiV1FoldersIdUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, folderForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        partial void OnErrorUpdateFolderNameByIdApiV1FoldersIdUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FolderForm folderForm);

        /// <summary>
        /// Update Folder Name By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse?> UpdateFolderNameByIdApiV1FoldersIdUpdatePostOrDefaultAsync(string id, FolderForm folderForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFolderNameByIdApiV1FoldersIdUpdatePostAsync(id, folderForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Folder Name By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="folderForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse> UpdateFolderNameByIdApiV1FoldersIdUpdatePostAsync(string id, FolderForm folderForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFolderNameByIdApiV1FoldersIdUpdatePost(id, folderForm);

                FormatUpdateFolderNameByIdApiV1FoldersIdUpdatePost(ref id, folderForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/folders/{id}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/folders/{id}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (folderForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(folderForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse>();

                        UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/folders/{id}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFolderNameByIdApiV1FoldersIdUpdatePostDefaultImplementation(apiResponseLocalVar, id, folderForm);

                        Events.ExecuteOnUpdateFolderNameByIdApiV1FoldersIdUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFolderNameByIdApiV1FoldersIdUpdatePostDefaultImplementation(e, "/api/v1/folders/{id}/update", uriBuilderLocalVar.Path, id, folderForm);
                Events.ExecuteOnErrorUpdateFolderNameByIdApiV1FoldersIdUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse(ILogger<UpdateFolderNameByIdApiV1FoldersIdUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(ref string id, FolderParentIdForm folderParentIdForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        /// <returns></returns>
        private void ValidateUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(string id, FolderParentIdForm folderParentIdForm)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (folderParentIdForm == null)
                throw new ArgumentNullException(nameof(folderParentIdForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        private void AfterUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostDefaultImplementation(IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse apiResponseLocalVar, string id, FolderParentIdForm folderParentIdForm)
        {
            bool suppressDefaultLog = false;
            AfterUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(ref suppressDefaultLog, apiResponseLocalVar, id, folderParentIdForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        partial void AfterUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(ref bool suppressDefaultLog, IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse apiResponseLocalVar, string id, FolderParentIdForm folderParentIdForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        private void OnErrorUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FolderParentIdForm folderParentIdForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, folderParentIdForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        partial void OnErrorUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, FolderParentIdForm folderParentIdForm);

        /// <summary>
        /// Update Folder Parent Id By Id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse?> UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostOrDefaultAsync(string id, FolderParentIdForm folderParentIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostAsync(id, folderParentIdForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Folder Parent Id By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="folderParentIdForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse"/>&gt;</returns>
        public async Task<IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse> UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostAsync(string id, FolderParentIdForm folderParentIdForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(id, folderParentIdForm);

                FormatUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(ref id, folderParentIdForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/folders/{id}/update/parent"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/folders/{id}/update/parent");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (folderParentIdForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(folderParentIdForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse>();

                        UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/folders/{id}/update/parent", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostDefaultImplementation(apiResponseLocalVar, id, folderParentIdForm);

                        Events.ExecuteOnUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostDefaultImplementation(e, "/api/v1/folders/{id}/update/parent", uriBuilderLocalVar.Path, id, folderParentIdForm);
                Events.ExecuteOnErrorUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse"/>
        /// </summary>
        public partial class UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse(ILogger<UpdateFolderParentIdByIdApiV1FoldersIdUpdateParentPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
