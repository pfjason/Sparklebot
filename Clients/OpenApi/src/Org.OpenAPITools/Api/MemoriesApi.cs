// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMemoriesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MemoriesApiEvents Events { get; }

        /// <summary>
        /// Add Memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMemoryForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMemoryApiV1MemoriesAddPostApiResponse"/>&gt;</returns>
        Task<IAddMemoryApiV1MemoriesAddPostApiResponse> AddMemoryApiV1MemoriesAddPostAsync(AddMemoryForm addMemoryForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add Memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="addMemoryForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMemoryApiV1MemoriesAddPostApiResponse"/>?&gt;</returns>
        Task<IAddMemoryApiV1MemoriesAddPostApiResponse?> AddMemoryApiV1MemoriesAddPostOrDefaultAsync(AddMemoryForm addMemoryForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Memory By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse> DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteAsync(string memoryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Memory By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="memoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse?> DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteOrDefaultAsync(string memoryId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Memory By User Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse"/>&gt;</returns>
        Task<IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse> DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Memory By User Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse"/>?&gt;</returns>
        Task<IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse?> DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingsApiV1MemoriesEfGetApiResponse"/>&gt;</returns>
        Task<IGetEmbeddingsApiV1MemoriesEfGetApiResponse> GetEmbeddingsApiV1MemoriesEfGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Embeddings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingsApiV1MemoriesEfGetApiResponse"/>?&gt;</returns>
        Task<IGetEmbeddingsApiV1MemoriesEfGetApiResponse?> GetEmbeddingsApiV1MemoriesEfGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Memories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemoriesApiV1MemoriesGetApiResponse"/>&gt;</returns>
        Task<IGetMemoriesApiV1MemoriesGetApiResponse> GetMemoriesApiV1MemoriesGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Memories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemoriesApiV1MemoriesGetApiResponse"/>?&gt;</returns>
        Task<IGetMemoriesApiV1MemoriesGetApiResponse?> GetMemoriesApiV1MemoriesGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Query Memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryMemoryForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryMemoryApiV1MemoriesQueryPostApiResponse"/>&gt;</returns>
        Task<IQueryMemoryApiV1MemoriesQueryPostApiResponse> QueryMemoryApiV1MemoriesQueryPostAsync(QueryMemoryForm queryMemoryForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Query Memory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="queryMemoryForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryMemoryApiV1MemoriesQueryPostApiResponse"/>?&gt;</returns>
        Task<IQueryMemoryApiV1MemoriesQueryPostApiResponse?> QueryMemoryApiV1MemoriesQueryPostOrDefaultAsync(QueryMemoryForm queryMemoryForm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset Memory From Vector Db
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse"/>&gt;</returns>
        Task<IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse> ResetMemoryFromVectorDbApiV1MemoriesResetPostAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Reset Memory From Vector Db
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse"/>?&gt;</returns>
        Task<IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse?> ResetMemoryFromVectorDbApiV1MemoriesResetPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Memory By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse"/>&gt;</returns>
        Task<IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse> UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostAsync(string memoryId, MemoryUpdateModel memoryUpdateModel, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Memory By Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse"/>?&gt;</returns>
        Task<IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse?> UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostOrDefaultAsync(string memoryId, MemoryUpdateModel memoryUpdateModel, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddMemoryApiV1MemoriesAddPostApiResponse"/>
    /// </summary>
    public interface IAddMemoryApiV1MemoriesAddPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MemoryModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse"/>
    /// </summary>
    public interface IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetEmbeddingsApiV1MemoriesEfGetApiResponse"/>
    /// </summary>
    public interface IGetEmbeddingsApiV1MemoriesEfGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMemoriesApiV1MemoriesGetApiResponse"/>
    /// </summary>
    public interface IGetMemoriesApiV1MemoriesGetApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<MemoryModel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IQueryMemoryApiV1MemoriesQueryPostApiResponse"/>
    /// </summary>
    public interface IQueryMemoryApiV1MemoriesQueryPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Object?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse"/>
    /// </summary>
    public interface IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<bool?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse"/>
    /// </summary>
    public interface IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MemoryModel?>, IUnprocessableContent<Org.OpenAPITools.Model.HTTPValidationError?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MemoriesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddMemoryApiV1MemoriesAddPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMemoryApiV1MemoriesAddPost;

        internal void ExecuteOnAddMemoryApiV1MemoriesAddPost(MemoriesApi.AddMemoryApiV1MemoriesAddPostApiResponse apiResponse)
        {
            OnAddMemoryApiV1MemoriesAddPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddMemoryApiV1MemoriesAddPost(Exception exception)
        {
            OnErrorAddMemoryApiV1MemoriesAddPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteMemoryByIdApiV1MemoriesMemoryIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteMemoryByIdApiV1MemoriesMemoryIdDelete;

        internal void ExecuteOnDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(MemoriesApi.DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse apiResponse)
        {
            OnDeleteMemoryByIdApiV1MemoriesMemoryIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(Exception exception)
        {
            OnErrorDeleteMemoryByIdApiV1MemoriesMemoryIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete;

        internal void ExecuteOnDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete(MemoriesApi.DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse apiResponse)
        {
            OnDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete(Exception exception)
        {
            OnErrorDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetEmbeddingsApiV1MemoriesEfGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetEmbeddingsApiV1MemoriesEfGet;

        internal void ExecuteOnGetEmbeddingsApiV1MemoriesEfGet(MemoriesApi.GetEmbeddingsApiV1MemoriesEfGetApiResponse apiResponse)
        {
            OnGetEmbeddingsApiV1MemoriesEfGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEmbeddingsApiV1MemoriesEfGet(Exception exception)
        {
            OnErrorGetEmbeddingsApiV1MemoriesEfGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMemoriesApiV1MemoriesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMemoriesApiV1MemoriesGet;

        internal void ExecuteOnGetMemoriesApiV1MemoriesGet(MemoriesApi.GetMemoriesApiV1MemoriesGetApiResponse apiResponse)
        {
            OnGetMemoriesApiV1MemoriesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMemoriesApiV1MemoriesGet(Exception exception)
        {
            OnErrorGetMemoriesApiV1MemoriesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnQueryMemoryApiV1MemoriesQueryPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorQueryMemoryApiV1MemoriesQueryPost;

        internal void ExecuteOnQueryMemoryApiV1MemoriesQueryPost(MemoriesApi.QueryMemoryApiV1MemoriesQueryPostApiResponse apiResponse)
        {
            OnQueryMemoryApiV1MemoriesQueryPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorQueryMemoryApiV1MemoriesQueryPost(Exception exception)
        {
            OnErrorQueryMemoryApiV1MemoriesQueryPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResetMemoryFromVectorDbApiV1MemoriesResetPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResetMemoryFromVectorDbApiV1MemoriesResetPost;

        internal void ExecuteOnResetMemoryFromVectorDbApiV1MemoriesResetPost(MemoriesApi.ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse apiResponse)
        {
            OnResetMemoryFromVectorDbApiV1MemoriesResetPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResetMemoryFromVectorDbApiV1MemoriesResetPost(Exception exception)
        {
            OnErrorResetMemoryFromVectorDbApiV1MemoriesResetPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost;

        internal void ExecuteOnUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(MemoriesApi.UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse apiResponse)
        {
            OnUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(Exception exception)
        {
            OnErrorUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MemoriesApi : IMemoriesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MemoriesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MemoriesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemoriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MemoriesApi(ILogger<MemoriesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MemoriesApiEvents memoriesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MemoriesApi>();
            HttpClient = httpClient;
            Events = memoriesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatAddMemoryApiV1MemoriesAddPost(AddMemoryForm addMemoryForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addMemoryForm"></param>
        /// <returns></returns>
        private void ValidateAddMemoryApiV1MemoriesAddPost(AddMemoryForm addMemoryForm)
        {
            if (addMemoryForm == null)
                throw new ArgumentNullException(nameof(addMemoryForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addMemoryForm"></param>
        private void AfterAddMemoryApiV1MemoriesAddPostDefaultImplementation(IAddMemoryApiV1MemoriesAddPostApiResponse apiResponseLocalVar, AddMemoryForm addMemoryForm)
        {
            bool suppressDefaultLog = false;
            AfterAddMemoryApiV1MemoriesAddPost(ref suppressDefaultLog, apiResponseLocalVar, addMemoryForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addMemoryForm"></param>
        partial void AfterAddMemoryApiV1MemoriesAddPost(ref bool suppressDefaultLog, IAddMemoryApiV1MemoriesAddPostApiResponse apiResponseLocalVar, AddMemoryForm addMemoryForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addMemoryForm"></param>
        private void OnErrorAddMemoryApiV1MemoriesAddPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddMemoryForm addMemoryForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddMemoryApiV1MemoriesAddPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addMemoryForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addMemoryForm"></param>
        partial void OnErrorAddMemoryApiV1MemoriesAddPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddMemoryForm addMemoryForm);

        /// <summary>
        /// Add Memory 
        /// </summary>
        /// <param name="addMemoryForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMemoryApiV1MemoriesAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddMemoryApiV1MemoriesAddPostApiResponse?> AddMemoryApiV1MemoriesAddPostOrDefaultAsync(AddMemoryForm addMemoryForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMemoryApiV1MemoriesAddPostAsync(addMemoryForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add Memory 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addMemoryForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMemoryApiV1MemoriesAddPostApiResponse"/>&gt;</returns>
        public async Task<IAddMemoryApiV1MemoriesAddPostApiResponse> AddMemoryApiV1MemoriesAddPostAsync(AddMemoryForm addMemoryForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMemoryApiV1MemoriesAddPost(addMemoryForm);

                FormatAddMemoryApiV1MemoriesAddPost(addMemoryForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/memories/add"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/memories/add");

                    httpRequestMessageLocalVar.Content = (addMemoryForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addMemoryForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddMemoryApiV1MemoriesAddPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddMemoryApiV1MemoriesAddPostApiResponse>();

                        AddMemoryApiV1MemoriesAddPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/memories/add", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMemoryApiV1MemoriesAddPostDefaultImplementation(apiResponseLocalVar, addMemoryForm);

                        Events.ExecuteOnAddMemoryApiV1MemoriesAddPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMemoryApiV1MemoriesAddPostDefaultImplementation(e, "/api/v1/memories/add", uriBuilderLocalVar.Path, addMemoryForm);
                Events.ExecuteOnErrorAddMemoryApiV1MemoriesAddPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddMemoryApiV1MemoriesAddPostApiResponse"/>
        /// </summary>
        public partial class AddMemoryApiV1MemoriesAddPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IAddMemoryApiV1MemoriesAddPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddMemoryApiV1MemoriesAddPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddMemoryApiV1MemoriesAddPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddMemoryApiV1MemoriesAddPostApiResponse(ILogger<AddMemoryApiV1MemoriesAddPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MemoryModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MemoryModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MemoryModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(ref string memoryId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="memoryId"></param>
        /// <returns></returns>
        private void ValidateDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(string memoryId)
        {
            if (memoryId == null)
                throw new ArgumentNullException(nameof(memoryId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="memoryId"></param>
        private void AfterDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteDefaultImplementation(IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse apiResponseLocalVar, string memoryId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(ref suppressDefaultLog, apiResponseLocalVar, memoryId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="memoryId"></param>
        partial void AfterDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(ref bool suppressDefaultLog, IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse apiResponseLocalVar, string memoryId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="memoryId"></param>
        private void OnErrorDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string memoryId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, memoryId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="memoryId"></param>
        partial void OnErrorDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string memoryId);

        /// <summary>
        /// Delete Memory By Id 
        /// </summary>
        /// <param name="memoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse?> DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteOrDefaultAsync(string memoryId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteAsync(memoryId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Memory By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse> DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteAsync(string memoryId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(memoryId);

                FormatDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(ref memoryId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/memories/{memory_id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/memories/{memory_id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmemory_id%7D", Uri.EscapeDataString(memoryId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse>();

                        DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/memories/{memory_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteDefaultImplementation(apiResponseLocalVar, memoryId);

                        Events.ExecuteOnDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteDefaultImplementation(e, "/api/v1/memories/{memory_id}", uriBuilderLocalVar.Path, memoryId);
                Events.ExecuteOnErrorDeleteMemoryByIdApiV1MemoriesMemoryIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse(ILogger<DeleteMemoryByIdApiV1MemoriesMemoryIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteDefaultImplementation(IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete(ref bool suppressDefaultLog, IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Delete Memory By User Id 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse?> DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete Memory By User Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse"/>&gt;</returns>
        public async Task<IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse> DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/memories/delete/user"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/memories/delete/user");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse>();

                        DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/memories/delete/user", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteDefaultImplementation(e, "/api/v1/memories/delete/user", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDeleteMemoryByUserIdApiV1MemoriesDeleteUserDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse"/>
        /// </summary>
        public partial class DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse(ILogger<DeleteMemoryByUserIdApiV1MemoriesDeleteUserDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetEmbeddingsApiV1MemoriesEfGetDefaultImplementation(IGetEmbeddingsApiV1MemoriesEfGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetEmbeddingsApiV1MemoriesEfGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetEmbeddingsApiV1MemoriesEfGet(ref bool suppressDefaultLog, IGetEmbeddingsApiV1MemoriesEfGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetEmbeddingsApiV1MemoriesEfGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEmbeddingsApiV1MemoriesEfGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetEmbeddingsApiV1MemoriesEfGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Embeddings 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingsApiV1MemoriesEfGetApiResponse"/>&gt;</returns>
        public async Task<IGetEmbeddingsApiV1MemoriesEfGetApiResponse?> GetEmbeddingsApiV1MemoriesEfGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEmbeddingsApiV1MemoriesEfGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Embeddings 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEmbeddingsApiV1MemoriesEfGetApiResponse"/>&gt;</returns>
        public async Task<IGetEmbeddingsApiV1MemoriesEfGetApiResponse> GetEmbeddingsApiV1MemoriesEfGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/memories/ef"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/memories/ef");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetEmbeddingsApiV1MemoriesEfGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEmbeddingsApiV1MemoriesEfGetApiResponse>();

                        GetEmbeddingsApiV1MemoriesEfGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/memories/ef", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEmbeddingsApiV1MemoriesEfGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetEmbeddingsApiV1MemoriesEfGet(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEmbeddingsApiV1MemoriesEfGetDefaultImplementation(e, "/api/v1/memories/ef", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetEmbeddingsApiV1MemoriesEfGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEmbeddingsApiV1MemoriesEfGetApiResponse"/>
        /// </summary>
        public partial class GetEmbeddingsApiV1MemoriesEfGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetEmbeddingsApiV1MemoriesEfGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEmbeddingsApiV1MemoriesEfGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEmbeddingsApiV1MemoriesEfGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEmbeddingsApiV1MemoriesEfGetApiResponse(ILogger<GetEmbeddingsApiV1MemoriesEfGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMemoriesApiV1MemoriesGetDefaultImplementation(IGetMemoriesApiV1MemoriesGetApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMemoriesApiV1MemoriesGet(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMemoriesApiV1MemoriesGet(ref bool suppressDefaultLog, IGetMemoriesApiV1MemoriesGetApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetMemoriesApiV1MemoriesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetMemoriesApiV1MemoriesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetMemoriesApiV1MemoriesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get Memories 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemoriesApiV1MemoriesGetApiResponse"/>&gt;</returns>
        public async Task<IGetMemoriesApiV1MemoriesGetApiResponse?> GetMemoriesApiV1MemoriesGetOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMemoriesApiV1MemoriesGetAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Memories 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMemoriesApiV1MemoriesGetApiResponse"/>&gt;</returns>
        public async Task<IGetMemoriesApiV1MemoriesGetApiResponse> GetMemoriesApiV1MemoriesGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/memories/"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/memories/");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMemoriesApiV1MemoriesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMemoriesApiV1MemoriesGetApiResponse>();

                        GetMemoriesApiV1MemoriesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/memories/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMemoriesApiV1MemoriesGetDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMemoriesApiV1MemoriesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMemoriesApiV1MemoriesGetDefaultImplementation(e, "/api/v1/memories/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMemoriesApiV1MemoriesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMemoriesApiV1MemoriesGetApiResponse"/>
        /// </summary>
        public partial class GetMemoriesApiV1MemoriesGetApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetMemoriesApiV1MemoriesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMemoriesApiV1MemoriesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMemoriesApiV1MemoriesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMemoriesApiV1MemoriesGetApiResponse(ILogger<GetMemoriesApiV1MemoriesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<MemoryModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<MemoryModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<MemoryModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatQueryMemoryApiV1MemoriesQueryPost(QueryMemoryForm queryMemoryForm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="queryMemoryForm"></param>
        /// <returns></returns>
        private void ValidateQueryMemoryApiV1MemoriesQueryPost(QueryMemoryForm queryMemoryForm)
        {
            if (queryMemoryForm == null)
                throw new ArgumentNullException(nameof(queryMemoryForm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="queryMemoryForm"></param>
        private void AfterQueryMemoryApiV1MemoriesQueryPostDefaultImplementation(IQueryMemoryApiV1MemoriesQueryPostApiResponse apiResponseLocalVar, QueryMemoryForm queryMemoryForm)
        {
            bool suppressDefaultLog = false;
            AfterQueryMemoryApiV1MemoriesQueryPost(ref suppressDefaultLog, apiResponseLocalVar, queryMemoryForm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="queryMemoryForm"></param>
        partial void AfterQueryMemoryApiV1MemoriesQueryPost(ref bool suppressDefaultLog, IQueryMemoryApiV1MemoriesQueryPostApiResponse apiResponseLocalVar, QueryMemoryForm queryMemoryForm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="queryMemoryForm"></param>
        private void OnErrorQueryMemoryApiV1MemoriesQueryPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, QueryMemoryForm queryMemoryForm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorQueryMemoryApiV1MemoriesQueryPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, queryMemoryForm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="queryMemoryForm"></param>
        partial void OnErrorQueryMemoryApiV1MemoriesQueryPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, QueryMemoryForm queryMemoryForm);

        /// <summary>
        /// Query Memory 
        /// </summary>
        /// <param name="queryMemoryForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryMemoryApiV1MemoriesQueryPostApiResponse"/>&gt;</returns>
        public async Task<IQueryMemoryApiV1MemoriesQueryPostApiResponse?> QueryMemoryApiV1MemoriesQueryPostOrDefaultAsync(QueryMemoryForm queryMemoryForm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await QueryMemoryApiV1MemoriesQueryPostAsync(queryMemoryForm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Query Memory 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryMemoryForm"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IQueryMemoryApiV1MemoriesQueryPostApiResponse"/>&gt;</returns>
        public async Task<IQueryMemoryApiV1MemoriesQueryPostApiResponse> QueryMemoryApiV1MemoriesQueryPostAsync(QueryMemoryForm queryMemoryForm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateQueryMemoryApiV1MemoriesQueryPost(queryMemoryForm);

                FormatQueryMemoryApiV1MemoriesQueryPost(queryMemoryForm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/memories/query"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/memories/query");

                    httpRequestMessageLocalVar.Content = (queryMemoryForm as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(queryMemoryForm, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<QueryMemoryApiV1MemoriesQueryPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<QueryMemoryApiV1MemoriesQueryPostApiResponse>();

                        QueryMemoryApiV1MemoriesQueryPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/memories/query", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterQueryMemoryApiV1MemoriesQueryPostDefaultImplementation(apiResponseLocalVar, queryMemoryForm);

                        Events.ExecuteOnQueryMemoryApiV1MemoriesQueryPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorQueryMemoryApiV1MemoriesQueryPostDefaultImplementation(e, "/api/v1/memories/query", uriBuilderLocalVar.Path, queryMemoryForm);
                Events.ExecuteOnErrorQueryMemoryApiV1MemoriesQueryPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="QueryMemoryApiV1MemoriesQueryPostApiResponse"/>
        /// </summary>
        public partial class QueryMemoryApiV1MemoriesQueryPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IQueryMemoryApiV1MemoriesQueryPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<QueryMemoryApiV1MemoriesQueryPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="QueryMemoryApiV1MemoriesQueryPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public QueryMemoryApiV1MemoriesQueryPostApiResponse(ILogger<QueryMemoryApiV1MemoriesQueryPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Object? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterResetMemoryFromVectorDbApiV1MemoriesResetPostDefaultImplementation(IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterResetMemoryFromVectorDbApiV1MemoriesResetPost(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterResetMemoryFromVectorDbApiV1MemoriesResetPost(ref bool suppressDefaultLog, IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorResetMemoryFromVectorDbApiV1MemoriesResetPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorResetMemoryFromVectorDbApiV1MemoriesResetPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorResetMemoryFromVectorDbApiV1MemoriesResetPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Reset Memory From Vector Db 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse"/>&gt;</returns>
        public async Task<IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse?> ResetMemoryFromVectorDbApiV1MemoriesResetPostOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ResetMemoryFromVectorDbApiV1MemoriesResetPostAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Reset Memory From Vector Db 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse"/>&gt;</returns>
        public async Task<IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse> ResetMemoryFromVectorDbApiV1MemoriesResetPostAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/memories/reset"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/memories/reset");

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse>();

                        ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/memories/reset", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResetMemoryFromVectorDbApiV1MemoriesResetPostDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnResetMemoryFromVectorDbApiV1MemoriesResetPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResetMemoryFromVectorDbApiV1MemoriesResetPostDefaultImplementation(e, "/api/v1/memories/reset", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorResetMemoryFromVectorDbApiV1MemoriesResetPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse"/>
        /// </summary>
        public partial class ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse : Org.OpenAPITools.Client.ApiResponse, IResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse(ILogger<ResetMemoryFromVectorDbApiV1MemoriesResetPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<bool>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out bool? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(ref string memoryId, MemoryUpdateModel memoryUpdateModel);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        /// <returns></returns>
        private void ValidateUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(string memoryId, MemoryUpdateModel memoryUpdateModel)
        {
            if (memoryId == null)
                throw new ArgumentNullException(nameof(memoryId));

            if (memoryUpdateModel == null)
                throw new ArgumentNullException(nameof(memoryUpdateModel));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        private void AfterUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostDefaultImplementation(IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse apiResponseLocalVar, string memoryId, MemoryUpdateModel memoryUpdateModel)
        {
            bool suppressDefaultLog = false;
            AfterUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(ref suppressDefaultLog, apiResponseLocalVar, memoryId, memoryUpdateModel);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        partial void AfterUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(ref bool suppressDefaultLog, IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse apiResponseLocalVar, string memoryId, MemoryUpdateModel memoryUpdateModel);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        private void OnErrorUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string memoryId, MemoryUpdateModel memoryUpdateModel)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, memoryId, memoryUpdateModel);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        partial void OnErrorUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string memoryId, MemoryUpdateModel memoryUpdateModel);

        /// <summary>
        /// Update Memory By Id 
        /// </summary>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse?> UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostOrDefaultAsync(string memoryId, MemoryUpdateModel memoryUpdateModel, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostAsync(memoryId, memoryUpdateModel, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Memory By Id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="memoryId"></param>
        /// <param name="memoryUpdateModel"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse"/>&gt;</returns>
        public async Task<IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse> UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostAsync(string memoryId, MemoryUpdateModel memoryUpdateModel, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(memoryId, memoryUpdateModel);

                FormatUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(ref memoryId, memoryUpdateModel);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/v1/memories/{memory_id}/update"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/v1/memories/{memory_id}/update");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bmemory_id%7D", Uri.EscapeDataString(memoryId.ToString()));

                    httpRequestMessageLocalVar.Content = (memoryUpdateModel as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(memoryUpdateModel, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse>();

                        UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/v1/memories/{memory_id}/update", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostDefaultImplementation(apiResponseLocalVar, memoryId, memoryUpdateModel);

                        Events.ExecuteOnUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostDefaultImplementation(e, "/api/v1/memories/{memory_id}/update", uriBuilderLocalVar.Path, memoryId, memoryUpdateModel);
                Events.ExecuteOnErrorUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse"/>
        /// </summary>
        public partial class UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse : Org.OpenAPITools.Client.ApiResponse, IUpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse(ILogger<UpdateMemoryByIdApiV1MemoriesMemoryIdUpdatePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MemoryModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MemoryModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MemoryModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.HTTPValidationError? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.HTTPValidationError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out Org.OpenAPITools.Model.HTTPValidationError? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
