// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModelMeta
    /// </summary>
    public partial class ModelMeta : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelMeta" /> class.
        /// </summary>
        /// <param name="profileImageUrl">profileImageUrl</param>
        /// <param name="description">description</param>
        /// <param name="capabilities">capabilities</param>
        [JsonConstructor]
        public ModelMeta(Option<ProfileImageUrl?> profileImageUrl = default, Option<Description?> description = default, Option<Capabilities?> capabilities = default)
        {
            ProfileImageUrlOption = profileImageUrl;
            DescriptionOption = description;
            CapabilitiesOption = capabilities;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ProfileImageUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ProfileImageUrl?> ProfileImageUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProfileImageUrl
        /// </summary>
        [JsonPropertyName("profile_image_url")]
        public ProfileImageUrl? ProfileImageUrl { get { return this.ProfileImageUrlOption; } set { this.ProfileImageUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Description?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public Description? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Capabilities
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Capabilities?> CapabilitiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [JsonPropertyName("capabilities")]
        public Capabilities? Capabilities { get { return this.CapabilitiesOption; } set { this.CapabilitiesOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelMeta {\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModelMeta" />
    /// </summary>
    public class ModelMetaJsonConverter : JsonConverter<ModelMeta>
    {
        /// <summary>
        /// Deserializes json to <see cref="ModelMeta" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModelMeta Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ProfileImageUrl?> profileImageUrl = default;
            Option<Description?> description = default;
            Option<Capabilities?> capabilities = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "profile_image_url":
                            profileImageUrl = new Option<ProfileImageUrl?>(JsonSerializer.Deserialize<ProfileImageUrl>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<Description?>(JsonSerializer.Deserialize<Description>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "capabilities":
                            capabilities = new Option<Capabilities?>(JsonSerializer.Deserialize<Capabilities>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (profileImageUrl.IsSet && profileImageUrl.Value == null)
                throw new ArgumentNullException(nameof(profileImageUrl), "Property is not nullable for class ModelMeta.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ModelMeta.");

            if (capabilities.IsSet && capabilities.Value == null)
                throw new ArgumentNullException(nameof(capabilities), "Property is not nullable for class ModelMeta.");

            return new ModelMeta(profileImageUrl, description, capabilities);
        }

        /// <summary>
        /// Serializes a <see cref="ModelMeta" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelMeta"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModelMeta modelMeta, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modelMeta, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModelMeta" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelMeta"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModelMeta modelMeta, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modelMeta.ProfileImageUrlOption.IsSet && modelMeta.ProfileImageUrl == null)
                throw new ArgumentNullException(nameof(modelMeta.ProfileImageUrl), "Property is required for class ModelMeta.");

            if (modelMeta.DescriptionOption.IsSet && modelMeta.Description == null)
                throw new ArgumentNullException(nameof(modelMeta.Description), "Property is required for class ModelMeta.");

            if (modelMeta.CapabilitiesOption.IsSet && modelMeta.Capabilities == null)
                throw new ArgumentNullException(nameof(modelMeta.Capabilities), "Property is required for class ModelMeta.");

            if (modelMeta.ProfileImageUrlOption.IsSet)
            {
                writer.WritePropertyName("profile_image_url");
                JsonSerializer.Serialize(writer, modelMeta.ProfileImageUrl, jsonSerializerOptions);
            }
            if (modelMeta.DescriptionOption.IsSet)
            {
                writer.WritePropertyName("description");
                JsonSerializer.Serialize(writer, modelMeta.Description, jsonSerializerOptions);
            }
            if (modelMeta.CapabilitiesOption.IsSet)
            {
                writer.WritePropertyName("capabilities");
                JsonSerializer.Serialize(writer, modelMeta.Capabilities, jsonSerializerOptions);
            }
        }
    }
}
