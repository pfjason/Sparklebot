// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FeedbackForm
    /// </summary>
    public partial class FeedbackForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackForm" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="data">data</param>
        /// <param name="meta">meta</param>
        /// <param name="snapshot">snapshot</param>
        [JsonConstructor]
        public FeedbackForm(string type, Option<FeedbackFormData?> data = default, Option<Meta?> meta = default, Option<FeedbackFormSnapshot?> snapshot = default)
        {
            Type = type;
            DataOption = data;
            MetaOption = meta;
            SnapshotOption = snapshot;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FeedbackFormData?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public FeedbackFormData? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Meta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Meta?> MetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public Meta? Meta { get { return this.MetaOption; } set { this.MetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of Snapshot
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FeedbackFormSnapshot?> SnapshotOption { get; private set; }

        /// <summary>
        /// Gets or Sets Snapshot
        /// </summary>
        [JsonPropertyName("snapshot")]
        public FeedbackFormSnapshot? Snapshot { get { return this.SnapshotOption; } set { this.SnapshotOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeedbackForm {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Snapshot: ").Append(Snapshot).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FeedbackForm" />
    /// </summary>
    public class FeedbackFormJsonConverter : JsonConverter<FeedbackForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="FeedbackForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FeedbackForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<FeedbackFormData?> data = default;
            Option<Meta?> meta = default;
            Option<FeedbackFormSnapshot?> snapshot = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "data":
                            data = new Option<FeedbackFormData?>(JsonSerializer.Deserialize<FeedbackFormData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "meta":
                            meta = new Option<Meta?>(JsonSerializer.Deserialize<Meta>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "snapshot":
                            snapshot = new Option<FeedbackFormSnapshot?>(JsonSerializer.Deserialize<FeedbackFormSnapshot>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class FeedbackForm.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FeedbackForm.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class FeedbackForm.");

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class FeedbackForm.");

            if (snapshot.IsSet && snapshot.Value == null)
                throw new ArgumentNullException(nameof(snapshot), "Property is not nullable for class FeedbackForm.");

            return new FeedbackForm(type.Value!, data, meta, snapshot);
        }

        /// <summary>
        /// Serializes a <see cref="FeedbackForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="feedbackForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FeedbackForm feedbackForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, feedbackForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FeedbackForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="feedbackForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FeedbackForm feedbackForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (feedbackForm.Type == null)
                throw new ArgumentNullException(nameof(feedbackForm.Type), "Property is required for class FeedbackForm.");

            if (feedbackForm.DataOption.IsSet && feedbackForm.Data == null)
                throw new ArgumentNullException(nameof(feedbackForm.Data), "Property is required for class FeedbackForm.");

            if (feedbackForm.MetaOption.IsSet && feedbackForm.Meta == null)
                throw new ArgumentNullException(nameof(feedbackForm.Meta), "Property is required for class FeedbackForm.");

            if (feedbackForm.SnapshotOption.IsSet && feedbackForm.Snapshot == null)
                throw new ArgumentNullException(nameof(feedbackForm.Snapshot), "Property is required for class FeedbackForm.");

            writer.WriteString("type", feedbackForm.Type);

            if (feedbackForm.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, feedbackForm.Data, jsonSerializerOptions);
            }
            if (feedbackForm.MetaOption.IsSet)
            {
                writer.WritePropertyName("meta");
                JsonSerializer.Serialize(writer, feedbackForm.Meta, jsonSerializerOptions);
            }
            if (feedbackForm.SnapshotOption.IsSet)
            {
                writer.WritePropertyName("snapshot");
                JsonSerializer.Serialize(writer, feedbackForm.Snapshot, jsonSerializerOptions);
            }
        }
    }
}
