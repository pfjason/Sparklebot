// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserUpdateForm
    /// </summary>
    public partial class UserUpdateForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserUpdateForm" /> class.
        /// </summary>
        /// <param name="role">role</param>
        /// <param name="name">name</param>
        /// <param name="email">email</param>
        /// <param name="profileImageUrl">profileImageUrl</param>
        /// <param name="password">password</param>
        [JsonConstructor]
        public UserUpdateForm(string role, string name, string email, string profileImageUrl, Option<string?> password = default)
        {
            Role = role;
            Name = name;
            Email = email;
            ProfileImageUrl = profileImageUrl;
            PasswordOption = password;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImageUrl
        /// </summary>
        [JsonPropertyName("profile_image_url")]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string? Password { get { return this.PasswordOption; } set { this.PasswordOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserUpdateForm {\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserUpdateForm" />
    /// </summary>
    public class UserUpdateFormJsonConverter : JsonConverter<UserUpdateForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserUpdateForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserUpdateForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> role = default;
            Option<string?> name = default;
            Option<string?> email = default;
            Option<string?> profileImageUrl = default;
            Option<string?> password = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profile_image_url":
                            profileImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!role.IsSet)
                throw new ArgumentException("Property is required for class UserUpdateForm.", nameof(role));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UserUpdateForm.", nameof(name));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class UserUpdateForm.", nameof(email));

            if (!profileImageUrl.IsSet)
                throw new ArgumentException("Property is required for class UserUpdateForm.", nameof(profileImageUrl));

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class UserUpdateForm.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserUpdateForm.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class UserUpdateForm.");

            if (profileImageUrl.IsSet && profileImageUrl.Value == null)
                throw new ArgumentNullException(nameof(profileImageUrl), "Property is not nullable for class UserUpdateForm.");

            return new UserUpdateForm(role.Value!, name.Value!, email.Value!, profileImageUrl.Value!, password);
        }

        /// <summary>
        /// Serializes a <see cref="UserUpdateForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userUpdateForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserUpdateForm userUpdateForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userUpdateForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserUpdateForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userUpdateForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserUpdateForm userUpdateForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userUpdateForm.Role == null)
                throw new ArgumentNullException(nameof(userUpdateForm.Role), "Property is required for class UserUpdateForm.");

            if (userUpdateForm.Name == null)
                throw new ArgumentNullException(nameof(userUpdateForm.Name), "Property is required for class UserUpdateForm.");

            if (userUpdateForm.Email == null)
                throw new ArgumentNullException(nameof(userUpdateForm.Email), "Property is required for class UserUpdateForm.");

            if (userUpdateForm.ProfileImageUrl == null)
                throw new ArgumentNullException(nameof(userUpdateForm.ProfileImageUrl), "Property is required for class UserUpdateForm.");

            writer.WriteString("role", userUpdateForm.Role);

            writer.WriteString("name", userUpdateForm.Name);

            writer.WriteString("email", userUpdateForm.Email);

            writer.WriteString("profile_image_url", userUpdateForm.ProfileImageUrl);

            if (userUpdateForm.PasswordOption.IsSet)
                if (userUpdateForm.PasswordOption.Value != null)
                    writer.WriteString("password", userUpdateForm.Password);
                else
                    writer.WriteNull("password");
        }
    }
}
