// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserModel
    /// </summary>
    public partial class UserModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="email">email</param>
        /// <param name="profileImageUrl">profileImageUrl</param>
        /// <param name="lastActiveAt">lastActiveAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="role">role (default to &quot;pending&quot;)</param>
        /// <param name="apiKey">apiKey</param>
        /// <param name="settings">settings</param>
        /// <param name="info">info</param>
        /// <param name="oauthSub">oauthSub</param>
        [JsonConstructor]
        public UserModel(string id, string name, string email, string profileImageUrl, int lastActiveAt, int updatedAt, int createdAt, Option<string?> role = default, Option<string?> apiKey = default, Option<UserSettings?> settings = default, Option<Object?> info = default, Option<string?> oauthSub = default)
        {
            Id = id;
            Name = name;
            Email = email;
            ProfileImageUrl = profileImageUrl;
            LastActiveAt = lastActiveAt;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            RoleOption = role;
            ApiKeyOption = apiKey;
            SettingsOption = settings;
            InfoOption = info;
            OauthSubOption = oauthSub;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImageUrl
        /// </summary>
        [JsonPropertyName("profile_image_url")]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets LastActiveAt
        /// </summary>
        [JsonPropertyName("last_active_at")]
        public int LastActiveAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public string? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Used to track the state of ApiKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ApiKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [JsonPropertyName("api_key")]
        public string? ApiKey { get { return this.ApiKeyOption; } set { this.ApiKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Settings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserSettings?> SettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [JsonPropertyName("settings")]
        public UserSettings? Settings { get { return this.SettingsOption; } set { this.SettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Info
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> InfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [JsonPropertyName("info")]
        public Object? Info { get { return this.InfoOption; } set { this.InfoOption = new(value); } }

        /// <summary>
        /// Used to track the state of OauthSub
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OauthSubOption { get; private set; }

        /// <summary>
        /// Gets or Sets OauthSub
        /// </summary>
        [JsonPropertyName("oauth_sub")]
        public string? OauthSub { get { return this.OauthSubOption; } set { this.OauthSubOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  LastActiveAt: ").Append(LastActiveAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  OauthSub: ").Append(OauthSub).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserModel" />
    /// </summary>
    public class UserModelJsonConverter : JsonConverter<UserModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> email = default;
            Option<string?> profileImageUrl = default;
            Option<int?> lastActiveAt = default;
            Option<int?> updatedAt = default;
            Option<int?> createdAt = default;
            Option<string?> role = default;
            Option<string?> apiKey = default;
            Option<UserSettings?> settings = default;
            Option<Object?> info = default;
            Option<string?> oauthSub = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profile_image_url":
                            profileImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_active_at":
                            lastActiveAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updated_at":
                            updatedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "api_key":
                            apiKey = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "settings":
                            settings = new Option<UserSettings?>(JsonSerializer.Deserialize<UserSettings>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "info":
                            info = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "oauth_sub":
                            oauthSub = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserModel.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UserModel.", nameof(name));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class UserModel.", nameof(email));

            if (!profileImageUrl.IsSet)
                throw new ArgumentException("Property is required for class UserModel.", nameof(profileImageUrl));

            if (!lastActiveAt.IsSet)
                throw new ArgumentException("Property is required for class UserModel.", nameof(lastActiveAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class UserModel.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class UserModel.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserModel.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserModel.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class UserModel.");

            if (profileImageUrl.IsSet && profileImageUrl.Value == null)
                throw new ArgumentNullException(nameof(profileImageUrl), "Property is not nullable for class UserModel.");

            if (lastActiveAt.IsSet && lastActiveAt.Value == null)
                throw new ArgumentNullException(nameof(lastActiveAt), "Property is not nullable for class UserModel.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UserModel.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class UserModel.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class UserModel.");

            return new UserModel(id.Value!, name.Value!, email.Value!, profileImageUrl.Value!, lastActiveAt.Value!.Value!, updatedAt.Value!.Value!, createdAt.Value!.Value!, role, apiKey, settings, info, oauthSub);
        }

        /// <summary>
        /// Serializes a <see cref="UserModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserModel userModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserModel userModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userModel.Id == null)
                throw new ArgumentNullException(nameof(userModel.Id), "Property is required for class UserModel.");

            if (userModel.Name == null)
                throw new ArgumentNullException(nameof(userModel.Name), "Property is required for class UserModel.");

            if (userModel.Email == null)
                throw new ArgumentNullException(nameof(userModel.Email), "Property is required for class UserModel.");

            if (userModel.ProfileImageUrl == null)
                throw new ArgumentNullException(nameof(userModel.ProfileImageUrl), "Property is required for class UserModel.");

            if (userModel.RoleOption.IsSet && userModel.Role == null)
                throw new ArgumentNullException(nameof(userModel.Role), "Property is required for class UserModel.");

            writer.WriteString("id", userModel.Id);

            writer.WriteString("name", userModel.Name);

            writer.WriteString("email", userModel.Email);

            writer.WriteString("profile_image_url", userModel.ProfileImageUrl);

            writer.WriteNumber("last_active_at", userModel.LastActiveAt);

            writer.WriteNumber("updated_at", userModel.UpdatedAt);

            writer.WriteNumber("created_at", userModel.CreatedAt);

            if (userModel.RoleOption.IsSet)
                writer.WriteString("role", userModel.Role);

            if (userModel.ApiKeyOption.IsSet)
                if (userModel.ApiKeyOption.Value != null)
                    writer.WriteString("api_key", userModel.ApiKey);
                else
                    writer.WriteNull("api_key");

            if (userModel.SettingsOption.IsSet)
                if (userModel.SettingsOption.Value != null)
                {
                    writer.WritePropertyName("settings");
                    JsonSerializer.Serialize(writer, userModel.Settings, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("settings");
            if (userModel.InfoOption.IsSet)
                if (userModel.InfoOption.Value != null)
                {
                    writer.WritePropertyName("info");
                    JsonSerializer.Serialize(writer, userModel.Info, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("info");
            if (userModel.OauthSubOption.IsSet)
                if (userModel.OauthSubOption.Value != null)
                    writer.WriteString("oauth_sub", userModel.OauthSub);
                else
                    writer.WriteNull("oauth_sub");
        }
    }
}
