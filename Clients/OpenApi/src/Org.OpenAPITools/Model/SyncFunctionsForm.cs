// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SyncFunctionsForm
    /// </summary>
    public partial class SyncFunctionsForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncFunctionsForm" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="content">content</param>
        /// <param name="meta">meta</param>
        /// <param name="functions">functions</param>
        [JsonConstructor]
        public SyncFunctionsForm(string id, string name, string content, FunctionMeta meta, Option<List<FunctionModel>?> functions = default)
        {
            Id = id;
            Name = name;
            Content = content;
            Meta = meta;
            FunctionsOption = functions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public FunctionMeta Meta { get; set; }

        /// <summary>
        /// Used to track the state of Functions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FunctionModel>?> FunctionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Functions
        /// </summary>
        [JsonPropertyName("functions")]
        public List<FunctionModel>? Functions { get { return this.FunctionsOption; } set { this.FunctionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncFunctionsForm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Functions: ").Append(Functions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SyncFunctionsForm" />
    /// </summary>
    public class SyncFunctionsFormJsonConverter : JsonConverter<SyncFunctionsForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="SyncFunctionsForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SyncFunctionsForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> content = default;
            Option<FunctionMeta?> meta = default;
            Option<List<FunctionModel>?> functions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "meta":
                            meta = new Option<FunctionMeta?>(JsonSerializer.Deserialize<FunctionMeta>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "functions":
                            functions = new Option<List<FunctionModel>?>(JsonSerializer.Deserialize<List<FunctionModel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SyncFunctionsForm.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class SyncFunctionsForm.", nameof(name));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class SyncFunctionsForm.", nameof(content));

            if (!meta.IsSet)
                throw new ArgumentException("Property is required for class SyncFunctionsForm.", nameof(meta));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SyncFunctionsForm.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SyncFunctionsForm.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class SyncFunctionsForm.");

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class SyncFunctionsForm.");

            if (functions.IsSet && functions.Value == null)
                throw new ArgumentNullException(nameof(functions), "Property is not nullable for class SyncFunctionsForm.");

            return new SyncFunctionsForm(id.Value!, name.Value!, content.Value!, meta.Value!, functions);
        }

        /// <summary>
        /// Serializes a <see cref="SyncFunctionsForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncFunctionsForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SyncFunctionsForm syncFunctionsForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, syncFunctionsForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SyncFunctionsForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="syncFunctionsForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SyncFunctionsForm syncFunctionsForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (syncFunctionsForm.Id == null)
                throw new ArgumentNullException(nameof(syncFunctionsForm.Id), "Property is required for class SyncFunctionsForm.");

            if (syncFunctionsForm.Name == null)
                throw new ArgumentNullException(nameof(syncFunctionsForm.Name), "Property is required for class SyncFunctionsForm.");

            if (syncFunctionsForm.Content == null)
                throw new ArgumentNullException(nameof(syncFunctionsForm.Content), "Property is required for class SyncFunctionsForm.");

            if (syncFunctionsForm.Meta == null)
                throw new ArgumentNullException(nameof(syncFunctionsForm.Meta), "Property is required for class SyncFunctionsForm.");

            if (syncFunctionsForm.FunctionsOption.IsSet && syncFunctionsForm.Functions == null)
                throw new ArgumentNullException(nameof(syncFunctionsForm.Functions), "Property is required for class SyncFunctionsForm.");

            writer.WriteString("id", syncFunctionsForm.Id);

            writer.WriteString("name", syncFunctionsForm.Name);

            writer.WriteString("content", syncFunctionsForm.Content);

            writer.WritePropertyName("meta");
            JsonSerializer.Serialize(writer, syncFunctionsForm.Meta, jsonSerializerOptions);
            if (syncFunctionsForm.FunctionsOption.IsSet)
            {
                writer.WritePropertyName("functions");
                JsonSerializer.Serialize(writer, syncFunctionsForm.Functions, jsonSerializerOptions);
            }
        }
    }
}
