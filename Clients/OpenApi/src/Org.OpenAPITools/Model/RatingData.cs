// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RatingData
    /// </summary>
    public partial class RatingData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatingData" /> class.
        /// </summary>
        /// <param name="rating">rating</param>
        /// <param name="modelId">modelId</param>
        /// <param name="siblingModelIds">siblingModelIds</param>
        /// <param name="reason">reason</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public RatingData(Option<Rating?> rating = default, Option<ModelId?> modelId = default, Option<SiblingModelIds?> siblingModelIds = default, Option<Reason?> reason = default, Option<Comment?> comment = default)
        {
            RatingOption = rating;
            ModelIdOption = modelId;
            SiblingModelIdsOption = siblingModelIds;
            ReasonOption = reason;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Rating
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Rating?> RatingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [JsonPropertyName("rating")]
        public Rating? Rating { get { return this.RatingOption; } set { this.RatingOption = new(value); } }

        /// <summary>
        /// Used to track the state of ModelId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ModelId?> ModelIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [JsonPropertyName("model_id")]
        public ModelId? ModelId { get { return this.ModelIdOption; } set { this.ModelIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SiblingModelIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SiblingModelIds?> SiblingModelIdsOption { get; private set; }

        /// <summary>
        /// Gets or Sets SiblingModelIds
        /// </summary>
        [JsonPropertyName("sibling_model_ids")]
        public SiblingModelIds? SiblingModelIds { get { return this.SiblingModelIdsOption; } set { this.SiblingModelIdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Reason?> ReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [JsonPropertyName("reason")]
        public Reason? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Comment?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public Comment? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RatingData {\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  SiblingModelIds: ").Append(SiblingModelIds).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RatingData" />
    /// </summary>
    public class RatingDataJsonConverter : JsonConverter<RatingData>
    {
        /// <summary>
        /// Deserializes json to <see cref="RatingData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RatingData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Rating?> rating = default;
            Option<ModelId?> modelId = default;
            Option<SiblingModelIds?> siblingModelIds = default;
            Option<Reason?> reason = default;
            Option<Comment?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "rating":
                            rating = new Option<Rating?>(JsonSerializer.Deserialize<Rating>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "model_id":
                            modelId = new Option<ModelId?>(JsonSerializer.Deserialize<ModelId>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sibling_model_ids":
                            siblingModelIds = new Option<SiblingModelIds?>(JsonSerializer.Deserialize<SiblingModelIds>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reason":
                            reason = new Option<Reason?>(JsonSerializer.Deserialize<Reason>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "comment":
                            comment = new Option<Comment?>(JsonSerializer.Deserialize<Comment>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (rating.IsSet && rating.Value == null)
                throw new ArgumentNullException(nameof(rating), "Property is not nullable for class RatingData.");

            if (modelId.IsSet && modelId.Value == null)
                throw new ArgumentNullException(nameof(modelId), "Property is not nullable for class RatingData.");

            if (siblingModelIds.IsSet && siblingModelIds.Value == null)
                throw new ArgumentNullException(nameof(siblingModelIds), "Property is not nullable for class RatingData.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class RatingData.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class RatingData.");

            return new RatingData(rating, modelId, siblingModelIds, reason, comment);
        }

        /// <summary>
        /// Serializes a <see cref="RatingData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ratingData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RatingData ratingData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ratingData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RatingData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ratingData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RatingData ratingData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ratingData.RatingOption.IsSet && ratingData.Rating == null)
                throw new ArgumentNullException(nameof(ratingData.Rating), "Property is required for class RatingData.");

            if (ratingData.ModelIdOption.IsSet && ratingData.ModelId == null)
                throw new ArgumentNullException(nameof(ratingData.ModelId), "Property is required for class RatingData.");

            if (ratingData.SiblingModelIdsOption.IsSet && ratingData.SiblingModelIds == null)
                throw new ArgumentNullException(nameof(ratingData.SiblingModelIds), "Property is required for class RatingData.");

            if (ratingData.ReasonOption.IsSet && ratingData.Reason == null)
                throw new ArgumentNullException(nameof(ratingData.Reason), "Property is required for class RatingData.");

            if (ratingData.CommentOption.IsSet && ratingData.Comment == null)
                throw new ArgumentNullException(nameof(ratingData.Comment), "Property is required for class RatingData.");

            if (ratingData.RatingOption.IsSet)
            {
                writer.WritePropertyName("rating");
                JsonSerializer.Serialize(writer, ratingData.Rating, jsonSerializerOptions);
            }
            if (ratingData.ModelIdOption.IsSet)
            {
                writer.WritePropertyName("model_id");
                JsonSerializer.Serialize(writer, ratingData.ModelId, jsonSerializerOptions);
            }
            if (ratingData.SiblingModelIdsOption.IsSet)
            {
                writer.WritePropertyName("sibling_model_ids");
                JsonSerializer.Serialize(writer, ratingData.SiblingModelIds, jsonSerializerOptions);
            }
            if (ratingData.ReasonOption.IsSet)
            {
                writer.WritePropertyName("reason");
                JsonSerializer.Serialize(writer, ratingData.Reason, jsonSerializerOptions);
            }
            if (ratingData.CommentOption.IsSet)
            {
                writer.WritePropertyName("comment");
                JsonSerializer.Serialize(writer, ratingData.Comment, jsonSerializerOptions);
            }
        }
    }
}
