// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FunctionResponse
    /// </summary>
    public partial class FunctionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionResponse" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="type">type</param>
        /// <param name="name">name</param>
        /// <param name="meta">meta</param>
        /// <param name="isActive">isActive</param>
        /// <param name="isGlobal">isGlobal</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="createdAt">createdAt</param>
        [JsonConstructor]
        public FunctionResponse(string id, string userId, string type, string name, FunctionMeta meta, bool isActive, bool isGlobal, int updatedAt, int createdAt)
        {
            Id = id;
            UserId = userId;
            Type = type;
            Name = name;
            Meta = meta;
            IsActive = isActive;
            IsGlobal = isGlobal;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public FunctionMeta Meta { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [JsonPropertyName("is_active")]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsGlobal
        /// </summary>
        [JsonPropertyName("is_global")]
        public bool IsGlobal { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FunctionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsGlobal: ").Append(IsGlobal).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FunctionResponse" />
    /// </summary>
    public class FunctionResponseJsonConverter : JsonConverter<FunctionResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="FunctionResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FunctionResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> userId = default;
            Option<string?> type = default;
            Option<string?> name = default;
            Option<FunctionMeta?> meta = default;
            Option<bool?> isActive = default;
            Option<bool?> isGlobal = default;
            Option<int?> updatedAt = default;
            Option<int?> createdAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "meta":
                            meta = new Option<FunctionMeta?>(JsonSerializer.Deserialize<FunctionMeta>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "is_active":
                            isActive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_global":
                            isGlobal = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "updated_at":
                            updatedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(userId));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(type));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(name));

            if (!meta.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(meta));

            if (!isActive.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(isActive));

            if (!isGlobal.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(isGlobal));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class FunctionResponse.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FunctionResponse.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class FunctionResponse.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class FunctionResponse.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class FunctionResponse.");

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class FunctionResponse.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class FunctionResponse.");

            if (isGlobal.IsSet && isGlobal.Value == null)
                throw new ArgumentNullException(nameof(isGlobal), "Property is not nullable for class FunctionResponse.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class FunctionResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class FunctionResponse.");

            return new FunctionResponse(id.Value!, userId.Value!, type.Value!, name.Value!, meta.Value!, isActive.Value!.Value!, isGlobal.Value!.Value!, updatedAt.Value!.Value!, createdAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FunctionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="functionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FunctionResponse functionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, functionResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FunctionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="functionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FunctionResponse functionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (functionResponse.Id == null)
                throw new ArgumentNullException(nameof(functionResponse.Id), "Property is required for class FunctionResponse.");

            if (functionResponse.UserId == null)
                throw new ArgumentNullException(nameof(functionResponse.UserId), "Property is required for class FunctionResponse.");

            if (functionResponse.Type == null)
                throw new ArgumentNullException(nameof(functionResponse.Type), "Property is required for class FunctionResponse.");

            if (functionResponse.Name == null)
                throw new ArgumentNullException(nameof(functionResponse.Name), "Property is required for class FunctionResponse.");

            if (functionResponse.Meta == null)
                throw new ArgumentNullException(nameof(functionResponse.Meta), "Property is required for class FunctionResponse.");

            writer.WriteString("id", functionResponse.Id);

            writer.WriteString("user_id", functionResponse.UserId);

            writer.WriteString("type", functionResponse.Type);

            writer.WriteString("name", functionResponse.Name);

            writer.WritePropertyName("meta");
            JsonSerializer.Serialize(writer, functionResponse.Meta, jsonSerializerOptions);
            writer.WriteBoolean("is_active", functionResponse.IsActive);

            writer.WriteBoolean("is_global", functionResponse.IsGlobal);

            writer.WriteNumber("updated_at", functionResponse.UpdatedAt);

            writer.WriteNumber("created_at", functionResponse.CreatedAt);
        }
    }
}
