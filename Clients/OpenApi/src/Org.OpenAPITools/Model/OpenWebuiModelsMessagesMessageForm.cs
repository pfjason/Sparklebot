// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OpenWebuiModelsMessagesMessageForm
    /// </summary>
    public partial class OpenWebuiModelsMessagesMessageForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenWebuiModelsMessagesMessageForm" /> class.
        /// </summary>
        /// <param name="content">content</param>
        /// <param name="parentId">parentId</param>
        /// <param name="data">data</param>
        /// <param name="meta">meta</param>
        [JsonConstructor]
        public OpenWebuiModelsMessagesMessageForm(string content, Option<string?> parentId = default, Option<Object?> data = default, Option<Object?> meta = default)
        {
            Content = content;
            ParentIdOption = parentId;
            DataOption = data;
            MetaOption = meta;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Used to track the state of ParentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [JsonPropertyName("parent_id")]
        public string? ParentId { get { return this.ParentIdOption; } set { this.ParentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Meta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> MetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public Object? Meta { get { return this.MetaOption; } set { this.MetaOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenWebuiModelsMessagesMessageForm {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OpenWebuiModelsMessagesMessageForm" />
    /// </summary>
    public class OpenWebuiModelsMessagesMessageFormJsonConverter : JsonConverter<OpenWebuiModelsMessagesMessageForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="OpenWebuiModelsMessagesMessageForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OpenWebuiModelsMessagesMessageForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> content = default;
            Option<string?> parentId = default;
            Option<Object?> data = default;
            Option<Object?> meta = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parent_id":
                            parentId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "meta":
                            meta = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiModelsMessagesMessageForm.", nameof(content));

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class OpenWebuiModelsMessagesMessageForm.");

            return new OpenWebuiModelsMessagesMessageForm(content.Value!, parentId, data, meta);
        }

        /// <summary>
        /// Serializes a <see cref="OpenWebuiModelsMessagesMessageForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, openWebuiModelsMessagesMessageForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OpenWebuiModelsMessagesMessageForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiModelsMessagesMessageForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OpenWebuiModelsMessagesMessageForm openWebuiModelsMessagesMessageForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (openWebuiModelsMessagesMessageForm.Content == null)
                throw new ArgumentNullException(nameof(openWebuiModelsMessagesMessageForm.Content), "Property is required for class OpenWebuiModelsMessagesMessageForm.");

            writer.WriteString("content", openWebuiModelsMessagesMessageForm.Content);

            if (openWebuiModelsMessagesMessageForm.ParentIdOption.IsSet)
                if (openWebuiModelsMessagesMessageForm.ParentIdOption.Value != null)
                    writer.WriteString("parent_id", openWebuiModelsMessagesMessageForm.ParentId);
                else
                    writer.WriteNull("parent_id");

            if (openWebuiModelsMessagesMessageForm.DataOption.IsSet)
                if (openWebuiModelsMessagesMessageForm.DataOption.Value != null)
                {
                    writer.WritePropertyName("data");
                    JsonSerializer.Serialize(writer, openWebuiModelsMessagesMessageForm.Data, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("data");
            if (openWebuiModelsMessagesMessageForm.MetaOption.IsSet)
                if (openWebuiModelsMessagesMessageForm.MetaOption.Value != null)
                {
                    writer.WritePropertyName("meta");
                    JsonSerializer.Serialize(writer, openWebuiModelsMessagesMessageForm.Meta, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("meta");
        }
    }
}
