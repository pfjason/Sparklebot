// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WorkspacePermissions
    /// </summary>
    public partial class WorkspacePermissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkspacePermissions" /> class.
        /// </summary>
        /// <param name="models">models (default to false)</param>
        /// <param name="knowledge">knowledge (default to false)</param>
        /// <param name="prompts">prompts (default to false)</param>
        /// <param name="tools">tools (default to false)</param>
        [JsonConstructor]
        public WorkspacePermissions(Option<bool?> models = default, Option<bool?> knowledge = default, Option<bool?> prompts = default, Option<bool?> tools = default)
        {
            ModelsOption = models;
            KnowledgeOption = knowledge;
            PromptsOption = prompts;
            ToolsOption = tools;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Models
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ModelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [JsonPropertyName("models")]
        public bool? Models { get { return this.ModelsOption; } set { this.ModelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Knowledge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> KnowledgeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Knowledge
        /// </summary>
        [JsonPropertyName("knowledge")]
        public bool? Knowledge { get { return this.KnowledgeOption; } set { this.KnowledgeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Prompts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PromptsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Prompts
        /// </summary>
        [JsonPropertyName("prompts")]
        public bool? Prompts { get { return this.PromptsOption; } set { this.PromptsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tools
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ToolsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tools
        /// </summary>
        [JsonPropertyName("tools")]
        public bool? Tools { get { return this.ToolsOption; } set { this.ToolsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WorkspacePermissions {\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  Knowledge: ").Append(Knowledge).Append("\n");
            sb.Append("  Prompts: ").Append(Prompts).Append("\n");
            sb.Append("  Tools: ").Append(Tools).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WorkspacePermissions" />
    /// </summary>
    public class WorkspacePermissionsJsonConverter : JsonConverter<WorkspacePermissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="WorkspacePermissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WorkspacePermissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> models = default;
            Option<bool?> knowledge = default;
            Option<bool?> prompts = default;
            Option<bool?> tools = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "models":
                            models = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "knowledge":
                            knowledge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "prompts":
                            prompts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "tools":
                            tools = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (models.IsSet && models.Value == null)
                throw new ArgumentNullException(nameof(models), "Property is not nullable for class WorkspacePermissions.");

            if (knowledge.IsSet && knowledge.Value == null)
                throw new ArgumentNullException(nameof(knowledge), "Property is not nullable for class WorkspacePermissions.");

            if (prompts.IsSet && prompts.Value == null)
                throw new ArgumentNullException(nameof(prompts), "Property is not nullable for class WorkspacePermissions.");

            if (tools.IsSet && tools.Value == null)
                throw new ArgumentNullException(nameof(tools), "Property is not nullable for class WorkspacePermissions.");

            return new WorkspacePermissions(models, knowledge, prompts, tools);
        }

        /// <summary>
        /// Serializes a <see cref="WorkspacePermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workspacePermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WorkspacePermissions workspacePermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, workspacePermissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WorkspacePermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="workspacePermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WorkspacePermissions workspacePermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (workspacePermissions.ModelsOption.IsSet)
                writer.WriteBoolean("models", workspacePermissions.ModelsOption.Value!.Value);

            if (workspacePermissions.KnowledgeOption.IsSet)
                writer.WriteBoolean("knowledge", workspacePermissions.KnowledgeOption.Value!.Value);

            if (workspacePermissions.PromptsOption.IsSet)
                writer.WriteBoolean("prompts", workspacePermissions.PromptsOption.Value!.Value);

            if (workspacePermissions.ToolsOption.IsSet)
                writer.WriteBoolean("tools", workspacePermissions.ToolsOption.Value!.Value);
        }
    }
}
