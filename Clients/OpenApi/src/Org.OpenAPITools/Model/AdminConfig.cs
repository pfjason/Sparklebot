// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AdminConfig
    /// </summary>
    public partial class AdminConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminConfig" /> class.
        /// </summary>
        /// <param name="sHOWADMINDETAILS">sHOWADMINDETAILS</param>
        /// <param name="wEBUIURL">wEBUIURL</param>
        /// <param name="eNABLESIGNUP">eNABLESIGNUP</param>
        /// <param name="eNABLEAPIKEY">eNABLEAPIKEY</param>
        /// <param name="eNABLEAPIKEYENDPOINTRESTRICTIONS">eNABLEAPIKEYENDPOINTRESTRICTIONS</param>
        /// <param name="aPIKEYALLOWEDENDPOINTS">aPIKEYALLOWEDENDPOINTS</param>
        /// <param name="dEFAULTUSERROLE">dEFAULTUSERROLE</param>
        /// <param name="jWTEXPIRESIN">jWTEXPIRESIN</param>
        /// <param name="eNABLECOMMUNITYSHARING">eNABLECOMMUNITYSHARING</param>
        /// <param name="eNABLEMESSAGERATING">eNABLEMESSAGERATING</param>
        /// <param name="eNABLECHANNELS">eNABLECHANNELS</param>
        /// <param name="eNABLENOTES">eNABLENOTES</param>
        /// <param name="eNABLEUSERWEBHOOKS">eNABLEUSERWEBHOOKS</param>
        /// <param name="pENDINGUSEROVERLAYTITLE">pENDINGUSEROVERLAYTITLE</param>
        /// <param name="pENDINGUSEROVERLAYCONTENT">pENDINGUSEROVERLAYCONTENT</param>
        /// <param name="rESPONSEWATERMARK">rESPONSEWATERMARK</param>
        [JsonConstructor]
        public AdminConfig(bool sHOWADMINDETAILS, string wEBUIURL, bool eNABLESIGNUP, bool eNABLEAPIKEY, bool eNABLEAPIKEYENDPOINTRESTRICTIONS, string aPIKEYALLOWEDENDPOINTS, string dEFAULTUSERROLE, string jWTEXPIRESIN, bool eNABLECOMMUNITYSHARING, bool eNABLEMESSAGERATING, bool eNABLECHANNELS, bool eNABLENOTES, bool eNABLEUSERWEBHOOKS, Option<string?> pENDINGUSEROVERLAYTITLE = default, Option<string?> pENDINGUSEROVERLAYCONTENT = default, Option<string?> rESPONSEWATERMARK = default)
        {
            SHOW_ADMIN_DETAILS = sHOWADMINDETAILS;
            WEBUI_URL = wEBUIURL;
            ENABLE_SIGNUP = eNABLESIGNUP;
            ENABLE_API_KEY = eNABLEAPIKEY;
            ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = eNABLEAPIKEYENDPOINTRESTRICTIONS;
            API_KEY_ALLOWED_ENDPOINTS = aPIKEYALLOWEDENDPOINTS;
            DEFAULT_USER_ROLE = dEFAULTUSERROLE;
            JWT_EXPIRES_IN = jWTEXPIRESIN;
            ENABLE_COMMUNITY_SHARING = eNABLECOMMUNITYSHARING;
            ENABLE_MESSAGE_RATING = eNABLEMESSAGERATING;
            ENABLE_CHANNELS = eNABLECHANNELS;
            ENABLE_NOTES = eNABLENOTES;
            ENABLE_USER_WEBHOOKS = eNABLEUSERWEBHOOKS;
            PENDING_USER_OVERLAY_TITLEOption = pENDINGUSEROVERLAYTITLE;
            PENDING_USER_OVERLAY_CONTENTOption = pENDINGUSEROVERLAYCONTENT;
            RESPONSE_WATERMARKOption = rESPONSEWATERMARK;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets SHOW_ADMIN_DETAILS
        /// </summary>
        [JsonPropertyName("SHOW_ADMIN_DETAILS")]
        public bool SHOW_ADMIN_DETAILS { get; set; }

        /// <summary>
        /// Gets or Sets WEBUI_URL
        /// </summary>
        [JsonPropertyName("WEBUI_URL")]
        public string WEBUI_URL { get; set; }

        /// <summary>
        /// Gets or Sets ENABLE_SIGNUP
        /// </summary>
        [JsonPropertyName("ENABLE_SIGNUP")]
        public bool ENABLE_SIGNUP { get; set; }

        /// <summary>
        /// Gets or Sets ENABLE_API_KEY
        /// </summary>
        [JsonPropertyName("ENABLE_API_KEY")]
        public bool ENABLE_API_KEY { get; set; }

        /// <summary>
        /// Gets or Sets ENABLE_API_KEY_ENDPOINT_RESTRICTIONS
        /// </summary>
        [JsonPropertyName("ENABLE_API_KEY_ENDPOINT_RESTRICTIONS")]
        public bool ENABLE_API_KEY_ENDPOINT_RESTRICTIONS { get; set; }

        /// <summary>
        /// Gets or Sets API_KEY_ALLOWED_ENDPOINTS
        /// </summary>
        [JsonPropertyName("API_KEY_ALLOWED_ENDPOINTS")]
        public string API_KEY_ALLOWED_ENDPOINTS { get; set; }

        /// <summary>
        /// Gets or Sets DEFAULT_USER_ROLE
        /// </summary>
        [JsonPropertyName("DEFAULT_USER_ROLE")]
        public string DEFAULT_USER_ROLE { get; set; }

        /// <summary>
        /// Gets or Sets JWT_EXPIRES_IN
        /// </summary>
        [JsonPropertyName("JWT_EXPIRES_IN")]
        public string JWT_EXPIRES_IN { get; set; }

        /// <summary>
        /// Gets or Sets ENABLE_COMMUNITY_SHARING
        /// </summary>
        [JsonPropertyName("ENABLE_COMMUNITY_SHARING")]
        public bool ENABLE_COMMUNITY_SHARING { get; set; }

        /// <summary>
        /// Gets or Sets ENABLE_MESSAGE_RATING
        /// </summary>
        [JsonPropertyName("ENABLE_MESSAGE_RATING")]
        public bool ENABLE_MESSAGE_RATING { get; set; }

        /// <summary>
        /// Gets or Sets ENABLE_CHANNELS
        /// </summary>
        [JsonPropertyName("ENABLE_CHANNELS")]
        public bool ENABLE_CHANNELS { get; set; }

        /// <summary>
        /// Gets or Sets ENABLE_NOTES
        /// </summary>
        [JsonPropertyName("ENABLE_NOTES")]
        public bool ENABLE_NOTES { get; set; }

        /// <summary>
        /// Gets or Sets ENABLE_USER_WEBHOOKS
        /// </summary>
        [JsonPropertyName("ENABLE_USER_WEBHOOKS")]
        public bool ENABLE_USER_WEBHOOKS { get; set; }

        /// <summary>
        /// Used to track the state of PENDING_USER_OVERLAY_TITLE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PENDING_USER_OVERLAY_TITLEOption { get; private set; }

        /// <summary>
        /// Gets or Sets PENDING_USER_OVERLAY_TITLE
        /// </summary>
        [JsonPropertyName("PENDING_USER_OVERLAY_TITLE")]
        public string? PENDING_USER_OVERLAY_TITLE { get { return this.PENDING_USER_OVERLAY_TITLEOption; } set { this.PENDING_USER_OVERLAY_TITLEOption = new(value); } }

        /// <summary>
        /// Used to track the state of PENDING_USER_OVERLAY_CONTENT
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PENDING_USER_OVERLAY_CONTENTOption { get; private set; }

        /// <summary>
        /// Gets or Sets PENDING_USER_OVERLAY_CONTENT
        /// </summary>
        [JsonPropertyName("PENDING_USER_OVERLAY_CONTENT")]
        public string? PENDING_USER_OVERLAY_CONTENT { get { return this.PENDING_USER_OVERLAY_CONTENTOption; } set { this.PENDING_USER_OVERLAY_CONTENTOption = new(value); } }

        /// <summary>
        /// Used to track the state of RESPONSE_WATERMARK
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RESPONSE_WATERMARKOption { get; private set; }

        /// <summary>
        /// Gets or Sets RESPONSE_WATERMARK
        /// </summary>
        [JsonPropertyName("RESPONSE_WATERMARK")]
        public string? RESPONSE_WATERMARK { get { return this.RESPONSE_WATERMARKOption; } set { this.RESPONSE_WATERMARKOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdminConfig {\n");
            sb.Append("  SHOW_ADMIN_DETAILS: ").Append(SHOW_ADMIN_DETAILS).Append("\n");
            sb.Append("  WEBUI_URL: ").Append(WEBUI_URL).Append("\n");
            sb.Append("  ENABLE_SIGNUP: ").Append(ENABLE_SIGNUP).Append("\n");
            sb.Append("  ENABLE_API_KEY: ").Append(ENABLE_API_KEY).Append("\n");
            sb.Append("  ENABLE_API_KEY_ENDPOINT_RESTRICTIONS: ").Append(ENABLE_API_KEY_ENDPOINT_RESTRICTIONS).Append("\n");
            sb.Append("  API_KEY_ALLOWED_ENDPOINTS: ").Append(API_KEY_ALLOWED_ENDPOINTS).Append("\n");
            sb.Append("  DEFAULT_USER_ROLE: ").Append(DEFAULT_USER_ROLE).Append("\n");
            sb.Append("  JWT_EXPIRES_IN: ").Append(JWT_EXPIRES_IN).Append("\n");
            sb.Append("  ENABLE_COMMUNITY_SHARING: ").Append(ENABLE_COMMUNITY_SHARING).Append("\n");
            sb.Append("  ENABLE_MESSAGE_RATING: ").Append(ENABLE_MESSAGE_RATING).Append("\n");
            sb.Append("  ENABLE_CHANNELS: ").Append(ENABLE_CHANNELS).Append("\n");
            sb.Append("  ENABLE_NOTES: ").Append(ENABLE_NOTES).Append("\n");
            sb.Append("  ENABLE_USER_WEBHOOKS: ").Append(ENABLE_USER_WEBHOOKS).Append("\n");
            sb.Append("  PENDING_USER_OVERLAY_TITLE: ").Append(PENDING_USER_OVERLAY_TITLE).Append("\n");
            sb.Append("  PENDING_USER_OVERLAY_CONTENT: ").Append(PENDING_USER_OVERLAY_CONTENT).Append("\n");
            sb.Append("  RESPONSE_WATERMARK: ").Append(RESPONSE_WATERMARK).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AdminConfig" />
    /// </summary>
    public class AdminConfigJsonConverter : JsonConverter<AdminConfig>
    {
        /// <summary>
        /// Deserializes json to <see cref="AdminConfig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AdminConfig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> sHOWADMINDETAILS = default;
            Option<string?> wEBUIURL = default;
            Option<bool?> eNABLESIGNUP = default;
            Option<bool?> eNABLEAPIKEY = default;
            Option<bool?> eNABLEAPIKEYENDPOINTRESTRICTIONS = default;
            Option<string?> aPIKEYALLOWEDENDPOINTS = default;
            Option<string?> dEFAULTUSERROLE = default;
            Option<string?> jWTEXPIRESIN = default;
            Option<bool?> eNABLECOMMUNITYSHARING = default;
            Option<bool?> eNABLEMESSAGERATING = default;
            Option<bool?> eNABLECHANNELS = default;
            Option<bool?> eNABLENOTES = default;
            Option<bool?> eNABLEUSERWEBHOOKS = default;
            Option<string?> pENDINGUSEROVERLAYTITLE = default;
            Option<string?> pENDINGUSEROVERLAYCONTENT = default;
            Option<string?> rESPONSEWATERMARK = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "SHOW_ADMIN_DETAILS":
                            sHOWADMINDETAILS = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "WEBUI_URL":
                            wEBUIURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ENABLE_SIGNUP":
                            eNABLESIGNUP = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ENABLE_API_KEY":
                            eNABLEAPIKEY = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ENABLE_API_KEY_ENDPOINT_RESTRICTIONS":
                            eNABLEAPIKEYENDPOINTRESTRICTIONS = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "API_KEY_ALLOWED_ENDPOINTS":
                            aPIKEYALLOWEDENDPOINTS = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "DEFAULT_USER_ROLE":
                            dEFAULTUSERROLE = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "JWT_EXPIRES_IN":
                            jWTEXPIRESIN = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ENABLE_COMMUNITY_SHARING":
                            eNABLECOMMUNITYSHARING = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ENABLE_MESSAGE_RATING":
                            eNABLEMESSAGERATING = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ENABLE_CHANNELS":
                            eNABLECHANNELS = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ENABLE_NOTES":
                            eNABLENOTES = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ENABLE_USER_WEBHOOKS":
                            eNABLEUSERWEBHOOKS = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "PENDING_USER_OVERLAY_TITLE":
                            pENDINGUSEROVERLAYTITLE = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "PENDING_USER_OVERLAY_CONTENT":
                            pENDINGUSEROVERLAYCONTENT = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RESPONSE_WATERMARK":
                            rESPONSEWATERMARK = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sHOWADMINDETAILS.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(sHOWADMINDETAILS));

            if (!wEBUIURL.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(wEBUIURL));

            if (!eNABLESIGNUP.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(eNABLESIGNUP));

            if (!eNABLEAPIKEY.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(eNABLEAPIKEY));

            if (!eNABLEAPIKEYENDPOINTRESTRICTIONS.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(eNABLEAPIKEYENDPOINTRESTRICTIONS));

            if (!aPIKEYALLOWEDENDPOINTS.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(aPIKEYALLOWEDENDPOINTS));

            if (!dEFAULTUSERROLE.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(dEFAULTUSERROLE));

            if (!jWTEXPIRESIN.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(jWTEXPIRESIN));

            if (!eNABLECOMMUNITYSHARING.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(eNABLECOMMUNITYSHARING));

            if (!eNABLEMESSAGERATING.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(eNABLEMESSAGERATING));

            if (!eNABLECHANNELS.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(eNABLECHANNELS));

            if (!eNABLENOTES.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(eNABLENOTES));

            if (!eNABLEUSERWEBHOOKS.IsSet)
                throw new ArgumentException("Property is required for class AdminConfig.", nameof(eNABLEUSERWEBHOOKS));

            if (sHOWADMINDETAILS.IsSet && sHOWADMINDETAILS.Value == null)
                throw new ArgumentNullException(nameof(sHOWADMINDETAILS), "Property is not nullable for class AdminConfig.");

            if (wEBUIURL.IsSet && wEBUIURL.Value == null)
                throw new ArgumentNullException(nameof(wEBUIURL), "Property is not nullable for class AdminConfig.");

            if (eNABLESIGNUP.IsSet && eNABLESIGNUP.Value == null)
                throw new ArgumentNullException(nameof(eNABLESIGNUP), "Property is not nullable for class AdminConfig.");

            if (eNABLEAPIKEY.IsSet && eNABLEAPIKEY.Value == null)
                throw new ArgumentNullException(nameof(eNABLEAPIKEY), "Property is not nullable for class AdminConfig.");

            if (eNABLEAPIKEYENDPOINTRESTRICTIONS.IsSet && eNABLEAPIKEYENDPOINTRESTRICTIONS.Value == null)
                throw new ArgumentNullException(nameof(eNABLEAPIKEYENDPOINTRESTRICTIONS), "Property is not nullable for class AdminConfig.");

            if (aPIKEYALLOWEDENDPOINTS.IsSet && aPIKEYALLOWEDENDPOINTS.Value == null)
                throw new ArgumentNullException(nameof(aPIKEYALLOWEDENDPOINTS), "Property is not nullable for class AdminConfig.");

            if (dEFAULTUSERROLE.IsSet && dEFAULTUSERROLE.Value == null)
                throw new ArgumentNullException(nameof(dEFAULTUSERROLE), "Property is not nullable for class AdminConfig.");

            if (jWTEXPIRESIN.IsSet && jWTEXPIRESIN.Value == null)
                throw new ArgumentNullException(nameof(jWTEXPIRESIN), "Property is not nullable for class AdminConfig.");

            if (eNABLECOMMUNITYSHARING.IsSet && eNABLECOMMUNITYSHARING.Value == null)
                throw new ArgumentNullException(nameof(eNABLECOMMUNITYSHARING), "Property is not nullable for class AdminConfig.");

            if (eNABLEMESSAGERATING.IsSet && eNABLEMESSAGERATING.Value == null)
                throw new ArgumentNullException(nameof(eNABLEMESSAGERATING), "Property is not nullable for class AdminConfig.");

            if (eNABLECHANNELS.IsSet && eNABLECHANNELS.Value == null)
                throw new ArgumentNullException(nameof(eNABLECHANNELS), "Property is not nullable for class AdminConfig.");

            if (eNABLENOTES.IsSet && eNABLENOTES.Value == null)
                throw new ArgumentNullException(nameof(eNABLENOTES), "Property is not nullable for class AdminConfig.");

            if (eNABLEUSERWEBHOOKS.IsSet && eNABLEUSERWEBHOOKS.Value == null)
                throw new ArgumentNullException(nameof(eNABLEUSERWEBHOOKS), "Property is not nullable for class AdminConfig.");

            return new AdminConfig(sHOWADMINDETAILS.Value!.Value!, wEBUIURL.Value!, eNABLESIGNUP.Value!.Value!, eNABLEAPIKEY.Value!.Value!, eNABLEAPIKEYENDPOINTRESTRICTIONS.Value!.Value!, aPIKEYALLOWEDENDPOINTS.Value!, dEFAULTUSERROLE.Value!, jWTEXPIRESIN.Value!, eNABLECOMMUNITYSHARING.Value!.Value!, eNABLEMESSAGERATING.Value!.Value!, eNABLECHANNELS.Value!.Value!, eNABLENOTES.Value!.Value!, eNABLEUSERWEBHOOKS.Value!.Value!, pENDINGUSEROVERLAYTITLE, pENDINGUSEROVERLAYCONTENT, rESPONSEWATERMARK);
        }

        /// <summary>
        /// Serializes a <see cref="AdminConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AdminConfig adminConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, adminConfig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AdminConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="adminConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AdminConfig adminConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (adminConfig.WEBUI_URL == null)
                throw new ArgumentNullException(nameof(adminConfig.WEBUI_URL), "Property is required for class AdminConfig.");

            if (adminConfig.API_KEY_ALLOWED_ENDPOINTS == null)
                throw new ArgumentNullException(nameof(adminConfig.API_KEY_ALLOWED_ENDPOINTS), "Property is required for class AdminConfig.");

            if (adminConfig.DEFAULT_USER_ROLE == null)
                throw new ArgumentNullException(nameof(adminConfig.DEFAULT_USER_ROLE), "Property is required for class AdminConfig.");

            if (adminConfig.JWT_EXPIRES_IN == null)
                throw new ArgumentNullException(nameof(adminConfig.JWT_EXPIRES_IN), "Property is required for class AdminConfig.");

            writer.WriteBoolean("SHOW_ADMIN_DETAILS", adminConfig.SHOW_ADMIN_DETAILS);

            writer.WriteString("WEBUI_URL", adminConfig.WEBUI_URL);

            writer.WriteBoolean("ENABLE_SIGNUP", adminConfig.ENABLE_SIGNUP);

            writer.WriteBoolean("ENABLE_API_KEY", adminConfig.ENABLE_API_KEY);

            writer.WriteBoolean("ENABLE_API_KEY_ENDPOINT_RESTRICTIONS", adminConfig.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS);

            writer.WriteString("API_KEY_ALLOWED_ENDPOINTS", adminConfig.API_KEY_ALLOWED_ENDPOINTS);

            writer.WriteString("DEFAULT_USER_ROLE", adminConfig.DEFAULT_USER_ROLE);

            writer.WriteString("JWT_EXPIRES_IN", adminConfig.JWT_EXPIRES_IN);

            writer.WriteBoolean("ENABLE_COMMUNITY_SHARING", adminConfig.ENABLE_COMMUNITY_SHARING);

            writer.WriteBoolean("ENABLE_MESSAGE_RATING", adminConfig.ENABLE_MESSAGE_RATING);

            writer.WriteBoolean("ENABLE_CHANNELS", adminConfig.ENABLE_CHANNELS);

            writer.WriteBoolean("ENABLE_NOTES", adminConfig.ENABLE_NOTES);

            writer.WriteBoolean("ENABLE_USER_WEBHOOKS", adminConfig.ENABLE_USER_WEBHOOKS);

            if (adminConfig.PENDING_USER_OVERLAY_TITLEOption.IsSet)
                if (adminConfig.PENDING_USER_OVERLAY_TITLEOption.Value != null)
                    writer.WriteString("PENDING_USER_OVERLAY_TITLE", adminConfig.PENDING_USER_OVERLAY_TITLE);
                else
                    writer.WriteNull("PENDING_USER_OVERLAY_TITLE");

            if (adminConfig.PENDING_USER_OVERLAY_CONTENTOption.IsSet)
                if (adminConfig.PENDING_USER_OVERLAY_CONTENTOption.Value != null)
                    writer.WriteString("PENDING_USER_OVERLAY_CONTENT", adminConfig.PENDING_USER_OVERLAY_CONTENT);
                else
                    writer.WriteNull("PENDING_USER_OVERLAY_CONTENT");

            if (adminConfig.RESPONSE_WATERMARKOption.IsSet)
                if (adminConfig.RESPONSE_WATERMARKOption.Value != null)
                    writer.WriteString("RESPONSE_WATERMARK", adminConfig.RESPONSE_WATERMARK);
                else
                    writer.WriteNull("RESPONSE_WATERMARK");
        }
    }
}
