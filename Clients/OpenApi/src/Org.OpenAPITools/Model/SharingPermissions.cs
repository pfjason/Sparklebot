// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SharingPermissions
    /// </summary>
    public partial class SharingPermissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharingPermissions" /> class.
        /// </summary>
        /// <param name="publicModels">publicModels (default to true)</param>
        /// <param name="publicKnowledge">publicKnowledge (default to true)</param>
        /// <param name="publicPrompts">publicPrompts (default to true)</param>
        /// <param name="publicTools">publicTools (default to true)</param>
        [JsonConstructor]
        public SharingPermissions(Option<bool?> publicModels = default, Option<bool?> publicKnowledge = default, Option<bool?> publicPrompts = default, Option<bool?> publicTools = default)
        {
            PublicModelsOption = publicModels;
            PublicKnowledgeOption = publicKnowledge;
            PublicPromptsOption = publicPrompts;
            PublicToolsOption = publicTools;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PublicModels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PublicModelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicModels
        /// </summary>
        [JsonPropertyName("public_models")]
        public bool? PublicModels { get { return this.PublicModelsOption; } set { this.PublicModelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicKnowledge
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PublicKnowledgeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicKnowledge
        /// </summary>
        [JsonPropertyName("public_knowledge")]
        public bool? PublicKnowledge { get { return this.PublicKnowledgeOption; } set { this.PublicKnowledgeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicPrompts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PublicPromptsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicPrompts
        /// </summary>
        [JsonPropertyName("public_prompts")]
        public bool? PublicPrompts { get { return this.PublicPromptsOption; } set { this.PublicPromptsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PublicTools
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PublicToolsOption { get; private set; }

        /// <summary>
        /// Gets or Sets PublicTools
        /// </summary>
        [JsonPropertyName("public_tools")]
        public bool? PublicTools { get { return this.PublicToolsOption; } set { this.PublicToolsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SharingPermissions {\n");
            sb.Append("  PublicModels: ").Append(PublicModels).Append("\n");
            sb.Append("  PublicKnowledge: ").Append(PublicKnowledge).Append("\n");
            sb.Append("  PublicPrompts: ").Append(PublicPrompts).Append("\n");
            sb.Append("  PublicTools: ").Append(PublicTools).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SharingPermissions" />
    /// </summary>
    public class SharingPermissionsJsonConverter : JsonConverter<SharingPermissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="SharingPermissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SharingPermissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> publicModels = default;
            Option<bool?> publicKnowledge = default;
            Option<bool?> publicPrompts = default;
            Option<bool?> publicTools = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "public_models":
                            publicModels = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "public_knowledge":
                            publicKnowledge = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "public_prompts":
                            publicPrompts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "public_tools":
                            publicTools = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (publicModels.IsSet && publicModels.Value == null)
                throw new ArgumentNullException(nameof(publicModels), "Property is not nullable for class SharingPermissions.");

            if (publicKnowledge.IsSet && publicKnowledge.Value == null)
                throw new ArgumentNullException(nameof(publicKnowledge), "Property is not nullable for class SharingPermissions.");

            if (publicPrompts.IsSet && publicPrompts.Value == null)
                throw new ArgumentNullException(nameof(publicPrompts), "Property is not nullable for class SharingPermissions.");

            if (publicTools.IsSet && publicTools.Value == null)
                throw new ArgumentNullException(nameof(publicTools), "Property is not nullable for class SharingPermissions.");

            return new SharingPermissions(publicModels, publicKnowledge, publicPrompts, publicTools);
        }

        /// <summary>
        /// Serializes a <see cref="SharingPermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharingPermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SharingPermissions sharingPermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sharingPermissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SharingPermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sharingPermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SharingPermissions sharingPermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sharingPermissions.PublicModelsOption.IsSet)
                writer.WriteBoolean("public_models", sharingPermissions.PublicModelsOption.Value!.Value);

            if (sharingPermissions.PublicKnowledgeOption.IsSet)
                writer.WriteBoolean("public_knowledge", sharingPermissions.PublicKnowledgeOption.Value!.Value);

            if (sharingPermissions.PublicPromptsOption.IsSet)
                writer.WriteBoolean("public_prompts", sharingPermissions.PublicPromptsOption.Value!.Value);

            if (sharingPermissions.PublicToolsOption.IsSet)
                writer.WriteBoolean("public_tools", sharingPermissions.PublicToolsOption.Value!.Value);
        }
    }
}
