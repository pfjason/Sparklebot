// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LdapServerConfig
    /// </summary>
    public partial class LdapServerConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LdapServerConfig" /> class.
        /// </summary>
        /// <param name="label">label</param>
        /// <param name="host">host</param>
        /// <param name="appDn">appDn</param>
        /// <param name="appDnPassword">appDnPassword</param>
        /// <param name="searchBase">searchBase</param>
        /// <param name="port">port</param>
        /// <param name="attributeForMail">attributeForMail (default to &quot;mail&quot;)</param>
        /// <param name="attributeForUsername">attributeForUsername (default to &quot;uid&quot;)</param>
        /// <param name="searchFilters">searchFilters (default to &quot;&quot;)</param>
        /// <param name="useTls">useTls (default to true)</param>
        /// <param name="certificatePath">certificatePath</param>
        /// <param name="validateCert">validateCert (default to true)</param>
        /// <param name="ciphers">ciphers</param>
        [JsonConstructor]
        public LdapServerConfig(string label, string host, string appDn, string appDnPassword, string searchBase, Option<int?> port = default, Option<string?> attributeForMail = default, Option<string?> attributeForUsername = default, Option<string?> searchFilters = default, Option<bool?> useTls = default, Option<string?> certificatePath = default, Option<bool?> validateCert = default, Option<string?> ciphers = default)
        {
            Label = label;
            Host = host;
            AppDn = appDn;
            AppDnPassword = appDnPassword;
            SearchBase = searchBase;
            PortOption = port;
            AttributeForMailOption = attributeForMail;
            AttributeForUsernameOption = attributeForUsername;
            SearchFiltersOption = searchFilters;
            UseTlsOption = useTls;
            CertificatePathOption = certificatePath;
            ValidateCertOption = validateCert;
            CiphersOption = ciphers;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [JsonPropertyName("label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [JsonPropertyName("host")]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets AppDn
        /// </summary>
        [JsonPropertyName("app_dn")]
        public string AppDn { get; set; }

        /// <summary>
        /// Gets or Sets AppDnPassword
        /// </summary>
        [JsonPropertyName("app_dn_password")]
        public string AppDnPassword { get; set; }

        /// <summary>
        /// Gets or Sets SearchBase
        /// </summary>
        [JsonPropertyName("search_base")]
        public string SearchBase { get; set; }

        /// <summary>
        /// Used to track the state of Port
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PortOption { get; private set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [JsonPropertyName("port")]
        public int? Port { get { return this.PortOption; } set { this.PortOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttributeForMail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttributeForMailOption { get; private set; }

        /// <summary>
        /// Gets or Sets AttributeForMail
        /// </summary>
        [JsonPropertyName("attribute_for_mail")]
        public string? AttributeForMail { get { return this.AttributeForMailOption; } set { this.AttributeForMailOption = new(value); } }

        /// <summary>
        /// Used to track the state of AttributeForUsername
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AttributeForUsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets AttributeForUsername
        /// </summary>
        [JsonPropertyName("attribute_for_username")]
        public string? AttributeForUsername { get { return this.AttributeForUsernameOption; } set { this.AttributeForUsernameOption = new(value); } }

        /// <summary>
        /// Used to track the state of SearchFilters
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SearchFiltersOption { get; private set; }

        /// <summary>
        /// Gets or Sets SearchFilters
        /// </summary>
        [JsonPropertyName("search_filters")]
        public string? SearchFilters { get { return this.SearchFiltersOption; } set { this.SearchFiltersOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseTls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseTlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets UseTls
        /// </summary>
        [JsonPropertyName("use_tls")]
        public bool? UseTls { get { return this.UseTlsOption; } set { this.UseTlsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CertificatePath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CertificatePathOption { get; private set; }

        /// <summary>
        /// Gets or Sets CertificatePath
        /// </summary>
        [JsonPropertyName("certificate_path")]
        public string? CertificatePath { get { return this.CertificatePathOption; } set { this.CertificatePathOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValidateCert
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ValidateCertOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidateCert
        /// </summary>
        [JsonPropertyName("validate_cert")]
        public bool? ValidateCert { get { return this.ValidateCertOption; } set { this.ValidateCertOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ciphers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CiphersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ciphers
        /// </summary>
        [JsonPropertyName("ciphers")]
        public string? Ciphers { get { return this.CiphersOption; } set { this.CiphersOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LdapServerConfig {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  AppDn: ").Append(AppDn).Append("\n");
            sb.Append("  AppDnPassword: ").Append(AppDnPassword).Append("\n");
            sb.Append("  SearchBase: ").Append(SearchBase).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  AttributeForMail: ").Append(AttributeForMail).Append("\n");
            sb.Append("  AttributeForUsername: ").Append(AttributeForUsername).Append("\n");
            sb.Append("  SearchFilters: ").Append(SearchFilters).Append("\n");
            sb.Append("  UseTls: ").Append(UseTls).Append("\n");
            sb.Append("  CertificatePath: ").Append(CertificatePath).Append("\n");
            sb.Append("  ValidateCert: ").Append(ValidateCert).Append("\n");
            sb.Append("  Ciphers: ").Append(Ciphers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LdapServerConfig" />
    /// </summary>
    public class LdapServerConfigJsonConverter : JsonConverter<LdapServerConfig>
    {
        /// <summary>
        /// Deserializes json to <see cref="LdapServerConfig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LdapServerConfig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> label = default;
            Option<string?> host = default;
            Option<string?> appDn = default;
            Option<string?> appDnPassword = default;
            Option<string?> searchBase = default;
            Option<int?> port = default;
            Option<string?> attributeForMail = default;
            Option<string?> attributeForUsername = default;
            Option<string?> searchFilters = default;
            Option<bool?> useTls = default;
            Option<string?> certificatePath = default;
            Option<bool?> validateCert = default;
            Option<string?> ciphers = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "label":
                            label = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "host":
                            host = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "app_dn":
                            appDn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "app_dn_password":
                            appDnPassword = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "search_base":
                            searchBase = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "port":
                            port = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "attribute_for_mail":
                            attributeForMail = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "attribute_for_username":
                            attributeForUsername = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "search_filters":
                            searchFilters = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "use_tls":
                            useTls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "certificate_path":
                            certificatePath = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "validate_cert":
                            validateCert = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ciphers":
                            ciphers = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!label.IsSet)
                throw new ArgumentException("Property is required for class LdapServerConfig.", nameof(label));

            if (!host.IsSet)
                throw new ArgumentException("Property is required for class LdapServerConfig.", nameof(host));

            if (!appDn.IsSet)
                throw new ArgumentException("Property is required for class LdapServerConfig.", nameof(appDn));

            if (!appDnPassword.IsSet)
                throw new ArgumentException("Property is required for class LdapServerConfig.", nameof(appDnPassword));

            if (!searchBase.IsSet)
                throw new ArgumentException("Property is required for class LdapServerConfig.", nameof(searchBase));

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class LdapServerConfig.");

            if (host.IsSet && host.Value == null)
                throw new ArgumentNullException(nameof(host), "Property is not nullable for class LdapServerConfig.");

            if (appDn.IsSet && appDn.Value == null)
                throw new ArgumentNullException(nameof(appDn), "Property is not nullable for class LdapServerConfig.");

            if (appDnPassword.IsSet && appDnPassword.Value == null)
                throw new ArgumentNullException(nameof(appDnPassword), "Property is not nullable for class LdapServerConfig.");

            if (searchBase.IsSet && searchBase.Value == null)
                throw new ArgumentNullException(nameof(searchBase), "Property is not nullable for class LdapServerConfig.");

            if (attributeForMail.IsSet && attributeForMail.Value == null)
                throw new ArgumentNullException(nameof(attributeForMail), "Property is not nullable for class LdapServerConfig.");

            if (attributeForUsername.IsSet && attributeForUsername.Value == null)
                throw new ArgumentNullException(nameof(attributeForUsername), "Property is not nullable for class LdapServerConfig.");

            if (searchFilters.IsSet && searchFilters.Value == null)
                throw new ArgumentNullException(nameof(searchFilters), "Property is not nullable for class LdapServerConfig.");

            if (useTls.IsSet && useTls.Value == null)
                throw new ArgumentNullException(nameof(useTls), "Property is not nullable for class LdapServerConfig.");

            if (validateCert.IsSet && validateCert.Value == null)
                throw new ArgumentNullException(nameof(validateCert), "Property is not nullable for class LdapServerConfig.");

            return new LdapServerConfig(label.Value!, host.Value!, appDn.Value!, appDnPassword.Value!, searchBase.Value!, port, attributeForMail, attributeForUsername, searchFilters, useTls, certificatePath, validateCert, ciphers);
        }

        /// <summary>
        /// Serializes a <see cref="LdapServerConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ldapServerConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LdapServerConfig ldapServerConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ldapServerConfig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LdapServerConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ldapServerConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LdapServerConfig ldapServerConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ldapServerConfig.Label == null)
                throw new ArgumentNullException(nameof(ldapServerConfig.Label), "Property is required for class LdapServerConfig.");

            if (ldapServerConfig.Host == null)
                throw new ArgumentNullException(nameof(ldapServerConfig.Host), "Property is required for class LdapServerConfig.");

            if (ldapServerConfig.AppDn == null)
                throw new ArgumentNullException(nameof(ldapServerConfig.AppDn), "Property is required for class LdapServerConfig.");

            if (ldapServerConfig.AppDnPassword == null)
                throw new ArgumentNullException(nameof(ldapServerConfig.AppDnPassword), "Property is required for class LdapServerConfig.");

            if (ldapServerConfig.SearchBase == null)
                throw new ArgumentNullException(nameof(ldapServerConfig.SearchBase), "Property is required for class LdapServerConfig.");

            if (ldapServerConfig.AttributeForMailOption.IsSet && ldapServerConfig.AttributeForMail == null)
                throw new ArgumentNullException(nameof(ldapServerConfig.AttributeForMail), "Property is required for class LdapServerConfig.");

            if (ldapServerConfig.AttributeForUsernameOption.IsSet && ldapServerConfig.AttributeForUsername == null)
                throw new ArgumentNullException(nameof(ldapServerConfig.AttributeForUsername), "Property is required for class LdapServerConfig.");

            if (ldapServerConfig.SearchFiltersOption.IsSet && ldapServerConfig.SearchFilters == null)
                throw new ArgumentNullException(nameof(ldapServerConfig.SearchFilters), "Property is required for class LdapServerConfig.");

            writer.WriteString("label", ldapServerConfig.Label);

            writer.WriteString("host", ldapServerConfig.Host);

            writer.WriteString("app_dn", ldapServerConfig.AppDn);

            writer.WriteString("app_dn_password", ldapServerConfig.AppDnPassword);

            writer.WriteString("search_base", ldapServerConfig.SearchBase);

            if (ldapServerConfig.PortOption.IsSet)
                if (ldapServerConfig.PortOption.Value != null)
                    writer.WriteNumber("port", ldapServerConfig.PortOption.Value!.Value);
                else
                    writer.WriteNull("port");

            if (ldapServerConfig.AttributeForMailOption.IsSet)
                writer.WriteString("attribute_for_mail", ldapServerConfig.AttributeForMail);

            if (ldapServerConfig.AttributeForUsernameOption.IsSet)
                writer.WriteString("attribute_for_username", ldapServerConfig.AttributeForUsername);

            if (ldapServerConfig.SearchFiltersOption.IsSet)
                writer.WriteString("search_filters", ldapServerConfig.SearchFilters);

            if (ldapServerConfig.UseTlsOption.IsSet)
                writer.WriteBoolean("use_tls", ldapServerConfig.UseTlsOption.Value!.Value);

            if (ldapServerConfig.CertificatePathOption.IsSet)
                if (ldapServerConfig.CertificatePathOption.Value != null)
                    writer.WriteString("certificate_path", ldapServerConfig.CertificatePath);
                else
                    writer.WriteNull("certificate_path");

            if (ldapServerConfig.ValidateCertOption.IsSet)
                writer.WriteBoolean("validate_cert", ldapServerConfig.ValidateCertOption.Value!.Value);

            if (ldapServerConfig.CiphersOption.IsSet)
                if (ldapServerConfig.CiphersOption.Value != null)
                    writer.WriteString("ciphers", ldapServerConfig.Ciphers);
                else
                    writer.WriteNull("ciphers");
        }
    }
}
