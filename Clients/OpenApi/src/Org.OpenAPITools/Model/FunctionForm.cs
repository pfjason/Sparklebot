// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FunctionForm
    /// </summary>
    public partial class FunctionForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionForm" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="content">content</param>
        /// <param name="meta">meta</param>
        [JsonConstructor]
        public FunctionForm(string id, string name, string content, FunctionMeta meta)
        {
            Id = id;
            Name = name;
            Content = content;
            Meta = meta;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public FunctionMeta Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FunctionForm {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FunctionForm" />
    /// </summary>
    public class FunctionFormJsonConverter : JsonConverter<FunctionForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="FunctionForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FunctionForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> content = default;
            Option<FunctionMeta?> meta = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "meta":
                            meta = new Option<FunctionMeta?>(JsonSerializer.Deserialize<FunctionMeta>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class FunctionForm.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class FunctionForm.", nameof(name));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class FunctionForm.", nameof(content));

            if (!meta.IsSet)
                throw new ArgumentException("Property is required for class FunctionForm.", nameof(meta));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FunctionForm.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class FunctionForm.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class FunctionForm.");

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class FunctionForm.");

            return new FunctionForm(id.Value!, name.Value!, content.Value!, meta.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FunctionForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="functionForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FunctionForm functionForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, functionForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FunctionForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="functionForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FunctionForm functionForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (functionForm.Id == null)
                throw new ArgumentNullException(nameof(functionForm.Id), "Property is required for class FunctionForm.");

            if (functionForm.Name == null)
                throw new ArgumentNullException(nameof(functionForm.Name), "Property is required for class FunctionForm.");

            if (functionForm.Content == null)
                throw new ArgumentNullException(nameof(functionForm.Content), "Property is required for class FunctionForm.");

            if (functionForm.Meta == null)
                throw new ArgumentNullException(nameof(functionForm.Meta), "Property is required for class FunctionForm.");

            writer.WriteString("id", functionForm.Id);

            writer.WriteString("name", functionForm.Name);

            writer.WriteString("content", functionForm.Content);

            writer.WritePropertyName("meta");
            JsonSerializer.Serialize(writer, functionForm.Meta, jsonSerializerOptions);
        }
    }
}
