// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Automatic1111ConfigForm
    /// </summary>
    public partial class Automatic1111ConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Automatic1111ConfigForm" /> class.
        /// </summary>
        /// <param name="aUTOMATIC1111BASEURL">aUTOMATIC1111BASEURL</param>
        /// <param name="aUTOMATIC1111APIAUTH">aUTOMATIC1111APIAUTH</param>
        /// <param name="aUTOMATIC1111CFGSCALE">aUTOMATIC1111CFGSCALE</param>
        /// <param name="aUTOMATIC1111SAMPLER">aUTOMATIC1111SAMPLER</param>
        /// <param name="aUTOMATIC1111SCHEDULER">aUTOMATIC1111SCHEDULER</param>
        [JsonConstructor]
        public Automatic1111ConfigForm(string aUTOMATIC1111BASEURL, string aUTOMATIC1111APIAUTH, Automatic1111CfgScale? aUTOMATIC1111CFGSCALE = default, string? aUTOMATIC1111SAMPLER = default, string? aUTOMATIC1111SCHEDULER = default)
        {
            AUTOMATIC1111BASEURL = aUTOMATIC1111BASEURL;
            AUTOMATIC1111APIAUTH = aUTOMATIC1111APIAUTH;
            AUTOMATIC1111CFGSCALE = aUTOMATIC1111CFGSCALE;
            AUTOMATIC1111SAMPLER = aUTOMATIC1111SAMPLER;
            AUTOMATIC1111SCHEDULER = aUTOMATIC1111SCHEDULER;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AUTOMATIC1111BASEURL
        /// </summary>
        [JsonPropertyName("AUTOMATIC1111_BASE_URL")]
        public string AUTOMATIC1111BASEURL { get; set; }

        /// <summary>
        /// Gets or Sets AUTOMATIC1111APIAUTH
        /// </summary>
        [JsonPropertyName("AUTOMATIC1111_API_AUTH")]
        public string AUTOMATIC1111APIAUTH { get; set; }

        /// <summary>
        /// Gets or Sets AUTOMATIC1111CFGSCALE
        /// </summary>
        [JsonPropertyName("AUTOMATIC1111_CFG_SCALE")]
        public Automatic1111CfgScale? AUTOMATIC1111CFGSCALE { get; set; }

        /// <summary>
        /// Gets or Sets AUTOMATIC1111SAMPLER
        /// </summary>
        [JsonPropertyName("AUTOMATIC1111_SAMPLER")]
        public string? AUTOMATIC1111SAMPLER { get; set; }

        /// <summary>
        /// Gets or Sets AUTOMATIC1111SCHEDULER
        /// </summary>
        [JsonPropertyName("AUTOMATIC1111_SCHEDULER")]
        public string? AUTOMATIC1111SCHEDULER { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Automatic1111ConfigForm {\n");
            sb.Append("  AUTOMATIC1111BASEURL: ").Append(AUTOMATIC1111BASEURL).Append("\n");
            sb.Append("  AUTOMATIC1111APIAUTH: ").Append(AUTOMATIC1111APIAUTH).Append("\n");
            sb.Append("  AUTOMATIC1111CFGSCALE: ").Append(AUTOMATIC1111CFGSCALE).Append("\n");
            sb.Append("  AUTOMATIC1111SAMPLER: ").Append(AUTOMATIC1111SAMPLER).Append("\n");
            sb.Append("  AUTOMATIC1111SCHEDULER: ").Append(AUTOMATIC1111SCHEDULER).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Automatic1111ConfigForm" />
    /// </summary>
    public class Automatic1111ConfigFormJsonConverter : JsonConverter<Automatic1111ConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="Automatic1111ConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Automatic1111ConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> aUTOMATIC1111BASEURL = default;
            Option<string?> aUTOMATIC1111APIAUTH = default;
            Option<Automatic1111CfgScale?> aUTOMATIC1111CFGSCALE = default;
            Option<string?> aUTOMATIC1111SAMPLER = default;
            Option<string?> aUTOMATIC1111SCHEDULER = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "AUTOMATIC1111_BASE_URL":
                            aUTOMATIC1111BASEURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AUTOMATIC1111_API_AUTH":
                            aUTOMATIC1111APIAUTH = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AUTOMATIC1111_CFG_SCALE":
                            aUTOMATIC1111CFGSCALE = new Option<Automatic1111CfgScale?>(JsonSerializer.Deserialize<Automatic1111CfgScale>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "AUTOMATIC1111_SAMPLER":
                            aUTOMATIC1111SAMPLER = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "AUTOMATIC1111_SCHEDULER":
                            aUTOMATIC1111SCHEDULER = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!aUTOMATIC1111BASEURL.IsSet)
                throw new ArgumentException("Property is required for class Automatic1111ConfigForm.", nameof(aUTOMATIC1111BASEURL));

            if (!aUTOMATIC1111APIAUTH.IsSet)
                throw new ArgumentException("Property is required for class Automatic1111ConfigForm.", nameof(aUTOMATIC1111APIAUTH));

            if (!aUTOMATIC1111CFGSCALE.IsSet)
                throw new ArgumentException("Property is required for class Automatic1111ConfigForm.", nameof(aUTOMATIC1111CFGSCALE));

            if (!aUTOMATIC1111SAMPLER.IsSet)
                throw new ArgumentException("Property is required for class Automatic1111ConfigForm.", nameof(aUTOMATIC1111SAMPLER));

            if (!aUTOMATIC1111SCHEDULER.IsSet)
                throw new ArgumentException("Property is required for class Automatic1111ConfigForm.", nameof(aUTOMATIC1111SCHEDULER));

            if (aUTOMATIC1111BASEURL.IsSet && aUTOMATIC1111BASEURL.Value == null)
                throw new ArgumentNullException(nameof(aUTOMATIC1111BASEURL), "Property is not nullable for class Automatic1111ConfigForm.");

            if (aUTOMATIC1111APIAUTH.IsSet && aUTOMATIC1111APIAUTH.Value == null)
                throw new ArgumentNullException(nameof(aUTOMATIC1111APIAUTH), "Property is not nullable for class Automatic1111ConfigForm.");

            return new Automatic1111ConfigForm(aUTOMATIC1111BASEURL.Value!, aUTOMATIC1111APIAUTH.Value!, aUTOMATIC1111CFGSCALE.Value!, aUTOMATIC1111SAMPLER.Value!, aUTOMATIC1111SCHEDULER.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Automatic1111ConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automatic1111ConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Automatic1111ConfigForm automatic1111ConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automatic1111ConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Automatic1111ConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automatic1111ConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Automatic1111ConfigForm automatic1111ConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automatic1111ConfigForm.AUTOMATIC1111BASEURL == null)
                throw new ArgumentNullException(nameof(automatic1111ConfigForm.AUTOMATIC1111BASEURL), "Property is required for class Automatic1111ConfigForm.");

            if (automatic1111ConfigForm.AUTOMATIC1111APIAUTH == null)
                throw new ArgumentNullException(nameof(automatic1111ConfigForm.AUTOMATIC1111APIAUTH), "Property is required for class Automatic1111ConfigForm.");

            writer.WriteString("AUTOMATIC1111_BASE_URL", automatic1111ConfigForm.AUTOMATIC1111BASEURL);

            writer.WriteString("AUTOMATIC1111_API_AUTH", automatic1111ConfigForm.AUTOMATIC1111APIAUTH);

            if (automatic1111ConfigForm.AUTOMATIC1111CFGSCALE != null)
            {
                writer.WritePropertyName("AUTOMATIC1111_CFG_SCALE");
                JsonSerializer.Serialize(writer, automatic1111ConfigForm.AUTOMATIC1111CFGSCALE, jsonSerializerOptions);
            }
            else
                writer.WriteNull("AUTOMATIC1111_CFG_SCALE");
            if (automatic1111ConfigForm.AUTOMATIC1111SAMPLER != null)
                writer.WriteString("AUTOMATIC1111_SAMPLER", automatic1111ConfigForm.AUTOMATIC1111SAMPLER);
            else
                writer.WriteNull("AUTOMATIC1111_SAMPLER");

            if (automatic1111ConfigForm.AUTOMATIC1111SCHEDULER != null)
                writer.WriteString("AUTOMATIC1111_SCHEDULER", automatic1111ConfigForm.AUTOMATIC1111SCHEDULER);
            else
                writer.WriteNull("AUTOMATIC1111_SCHEDULER");
        }
    }
}
