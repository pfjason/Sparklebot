// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SessionUserResponse
    /// </summary>
    public partial class SessionUserResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionUserResponse" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="email">email</param>
        /// <param name="name">name</param>
        /// <param name="role">role</param>
        /// <param name="profileImageUrl">profileImageUrl</param>
        /// <param name="token">token</param>
        /// <param name="tokenType">tokenType</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="permissions">permissions</param>
        [JsonConstructor]
        public SessionUserResponse(string id, string email, string name, string role, string profileImageUrl, string token, string tokenType, Option<int?> expiresAt = default, Option<Object?> permissions = default)
        {
            Id = id;
            Email = email;
            Name = name;
            Role = role;
            ProfileImageUrl = profileImageUrl;
            Token = token;
            TokenType = tokenType;
            ExpiresAtOption = expiresAt;
            PermissionsOption = permissions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public string Role { get; set; }

        /// <summary>
        /// Gets or Sets ProfileImageUrl
        /// </summary>
        [JsonPropertyName("profile_image_url")]
        public string ProfileImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [JsonPropertyName("token_type")]
        public string TokenType { get; set; }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expires_at")]
        public int? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> PermissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonPropertyName("permissions")]
        public Object? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionUserResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  ProfileImageUrl: ").Append(ProfileImageUrl).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SessionUserResponse" />
    /// </summary>
    public class SessionUserResponseJsonConverter : JsonConverter<SessionUserResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SessionUserResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SessionUserResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> email = default;
            Option<string?> name = default;
            Option<string?> role = default;
            Option<string?> profileImageUrl = default;
            Option<string?> token = default;
            Option<string?> tokenType = default;
            Option<int?> expiresAt = default;
            Option<Object?> permissions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "profile_image_url":
                            profileImageUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token":
                            token = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token_type":
                            tokenType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_at":
                            expiresAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "permissions":
                            permissions = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class SessionUserResponse.", nameof(id));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class SessionUserResponse.", nameof(email));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class SessionUserResponse.", nameof(name));

            if (!role.IsSet)
                throw new ArgumentException("Property is required for class SessionUserResponse.", nameof(role));

            if (!profileImageUrl.IsSet)
                throw new ArgumentException("Property is required for class SessionUserResponse.", nameof(profileImageUrl));

            if (!token.IsSet)
                throw new ArgumentException("Property is required for class SessionUserResponse.", nameof(token));

            if (!tokenType.IsSet)
                throw new ArgumentException("Property is required for class SessionUserResponse.", nameof(tokenType));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class SessionUserResponse.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class SessionUserResponse.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class SessionUserResponse.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class SessionUserResponse.");

            if (profileImageUrl.IsSet && profileImageUrl.Value == null)
                throw new ArgumentNullException(nameof(profileImageUrl), "Property is not nullable for class SessionUserResponse.");

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token), "Property is not nullable for class SessionUserResponse.");

            if (tokenType.IsSet && tokenType.Value == null)
                throw new ArgumentNullException(nameof(tokenType), "Property is not nullable for class SessionUserResponse.");

            return new SessionUserResponse(id.Value!, email.Value!, name.Value!, role.Value!, profileImageUrl.Value!, token.Value!, tokenType.Value!, expiresAt, permissions);
        }

        /// <summary>
        /// Serializes a <see cref="SessionUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sessionUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SessionUserResponse sessionUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sessionUserResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SessionUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sessionUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SessionUserResponse sessionUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sessionUserResponse.Id == null)
                throw new ArgumentNullException(nameof(sessionUserResponse.Id), "Property is required for class SessionUserResponse.");

            if (sessionUserResponse.Email == null)
                throw new ArgumentNullException(nameof(sessionUserResponse.Email), "Property is required for class SessionUserResponse.");

            if (sessionUserResponse.Name == null)
                throw new ArgumentNullException(nameof(sessionUserResponse.Name), "Property is required for class SessionUserResponse.");

            if (sessionUserResponse.Role == null)
                throw new ArgumentNullException(nameof(sessionUserResponse.Role), "Property is required for class SessionUserResponse.");

            if (sessionUserResponse.ProfileImageUrl == null)
                throw new ArgumentNullException(nameof(sessionUserResponse.ProfileImageUrl), "Property is required for class SessionUserResponse.");

            if (sessionUserResponse.Token == null)
                throw new ArgumentNullException(nameof(sessionUserResponse.Token), "Property is required for class SessionUserResponse.");

            if (sessionUserResponse.TokenType == null)
                throw new ArgumentNullException(nameof(sessionUserResponse.TokenType), "Property is required for class SessionUserResponse.");

            writer.WriteString("id", sessionUserResponse.Id);

            writer.WriteString("email", sessionUserResponse.Email);

            writer.WriteString("name", sessionUserResponse.Name);

            writer.WriteString("role", sessionUserResponse.Role);

            writer.WriteString("profile_image_url", sessionUserResponse.ProfileImageUrl);

            writer.WriteString("token", sessionUserResponse.Token);

            writer.WriteString("token_type", sessionUserResponse.TokenType);

            if (sessionUserResponse.ExpiresAtOption.IsSet)
                if (sessionUserResponse.ExpiresAtOption.Value != null)
                    writer.WriteNumber("expires_at", sessionUserResponse.ExpiresAtOption.Value!.Value);
                else
                    writer.WriteNull("expires_at");

            if (sessionUserResponse.PermissionsOption.IsSet)
                if (sessionUserResponse.PermissionsOption.Value != null)
                {
                    writer.WritePropertyName("permissions");
                    JsonSerializer.Serialize(writer, sessionUserResponse.Permissions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("permissions");
        }
    }
}
