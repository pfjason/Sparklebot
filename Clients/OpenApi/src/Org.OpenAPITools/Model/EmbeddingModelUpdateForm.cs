// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EmbeddingModelUpdateForm
    /// </summary>
    public partial class EmbeddingModelUpdateForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddingModelUpdateForm" /> class.
        /// </summary>
        /// <param name="embeddingEngine">embeddingEngine</param>
        /// <param name="embeddingModel">embeddingModel</param>
        /// <param name="openaiConfig">openaiConfig</param>
        /// <param name="ollamaConfig">ollamaConfig</param>
        /// <param name="azureOpenaiConfig">azureOpenaiConfig</param>
        /// <param name="embeddingBatchSize">embeddingBatchSize</param>
        [JsonConstructor]
        public EmbeddingModelUpdateForm(string embeddingEngine, string embeddingModel, Option<OpenWebuiRoutersRetrievalOpenAIConfigForm?> openaiConfig = default, Option<OpenWebuiRoutersRetrievalOllamaConfigForm?> ollamaConfig = default, Option<AzureOpenAIConfigForm?> azureOpenaiConfig = default, Option<int?> embeddingBatchSize = default)
        {
            EmbeddingEngine = embeddingEngine;
            EmbeddingModel = embeddingModel;
            OpenaiConfigOption = openaiConfig;
            OllamaConfigOption = ollamaConfig;
            AzureOpenaiConfigOption = azureOpenaiConfig;
            EmbeddingBatchSizeOption = embeddingBatchSize;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EmbeddingEngine
        /// </summary>
        [JsonPropertyName("embedding_engine")]
        public string EmbeddingEngine { get; set; }

        /// <summary>
        /// Gets or Sets EmbeddingModel
        /// </summary>
        [JsonPropertyName("embedding_model")]
        public string EmbeddingModel { get; set; }

        /// <summary>
        /// Used to track the state of OpenaiConfig
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OpenWebuiRoutersRetrievalOpenAIConfigForm?> OpenaiConfigOption { get; private set; }

        /// <summary>
        /// Gets or Sets OpenaiConfig
        /// </summary>
        [JsonPropertyName("openai_config")]
        public OpenWebuiRoutersRetrievalOpenAIConfigForm? OpenaiConfig { get { return this.OpenaiConfigOption; } set { this.OpenaiConfigOption = new(value); } }

        /// <summary>
        /// Used to track the state of OllamaConfig
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OpenWebuiRoutersRetrievalOllamaConfigForm?> OllamaConfigOption { get; private set; }

        /// <summary>
        /// Gets or Sets OllamaConfig
        /// </summary>
        [JsonPropertyName("ollama_config")]
        public OpenWebuiRoutersRetrievalOllamaConfigForm? OllamaConfig { get { return this.OllamaConfigOption; } set { this.OllamaConfigOption = new(value); } }

        /// <summary>
        /// Used to track the state of AzureOpenaiConfig
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AzureOpenAIConfigForm?> AzureOpenaiConfigOption { get; private set; }

        /// <summary>
        /// Gets or Sets AzureOpenaiConfig
        /// </summary>
        [JsonPropertyName("azure_openai_config")]
        public AzureOpenAIConfigForm? AzureOpenaiConfig { get { return this.AzureOpenaiConfigOption; } set { this.AzureOpenaiConfigOption = new(value); } }

        /// <summary>
        /// Used to track the state of EmbeddingBatchSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EmbeddingBatchSizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EmbeddingBatchSize
        /// </summary>
        [JsonPropertyName("embedding_batch_size")]
        public int? EmbeddingBatchSize { get { return this.EmbeddingBatchSizeOption; } set { this.EmbeddingBatchSizeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmbeddingModelUpdateForm {\n");
            sb.Append("  EmbeddingEngine: ").Append(EmbeddingEngine).Append("\n");
            sb.Append("  EmbeddingModel: ").Append(EmbeddingModel).Append("\n");
            sb.Append("  OpenaiConfig: ").Append(OpenaiConfig).Append("\n");
            sb.Append("  OllamaConfig: ").Append(OllamaConfig).Append("\n");
            sb.Append("  AzureOpenaiConfig: ").Append(AzureOpenaiConfig).Append("\n");
            sb.Append("  EmbeddingBatchSize: ").Append(EmbeddingBatchSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmbeddingModelUpdateForm" />
    /// </summary>
    public class EmbeddingModelUpdateFormJsonConverter : JsonConverter<EmbeddingModelUpdateForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmbeddingModelUpdateForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmbeddingModelUpdateForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> embeddingEngine = default;
            Option<string?> embeddingModel = default;
            Option<OpenWebuiRoutersRetrievalOpenAIConfigForm?> openaiConfig = default;
            Option<OpenWebuiRoutersRetrievalOllamaConfigForm?> ollamaConfig = default;
            Option<AzureOpenAIConfigForm?> azureOpenaiConfig = default;
            Option<int?> embeddingBatchSize = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "embedding_engine":
                            embeddingEngine = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "embedding_model":
                            embeddingModel = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "openai_config":
                            openaiConfig = new Option<OpenWebuiRoutersRetrievalOpenAIConfigForm?>(JsonSerializer.Deserialize<OpenWebuiRoutersRetrievalOpenAIConfigForm>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ollama_config":
                            ollamaConfig = new Option<OpenWebuiRoutersRetrievalOllamaConfigForm?>(JsonSerializer.Deserialize<OpenWebuiRoutersRetrievalOllamaConfigForm>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "azure_openai_config":
                            azureOpenaiConfig = new Option<AzureOpenAIConfigForm?>(JsonSerializer.Deserialize<AzureOpenAIConfigForm>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "embedding_batch_size":
                            embeddingBatchSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!embeddingEngine.IsSet)
                throw new ArgumentException("Property is required for class EmbeddingModelUpdateForm.", nameof(embeddingEngine));

            if (!embeddingModel.IsSet)
                throw new ArgumentException("Property is required for class EmbeddingModelUpdateForm.", nameof(embeddingModel));

            if (embeddingEngine.IsSet && embeddingEngine.Value == null)
                throw new ArgumentNullException(nameof(embeddingEngine), "Property is not nullable for class EmbeddingModelUpdateForm.");

            if (embeddingModel.IsSet && embeddingModel.Value == null)
                throw new ArgumentNullException(nameof(embeddingModel), "Property is not nullable for class EmbeddingModelUpdateForm.");

            return new EmbeddingModelUpdateForm(embeddingEngine.Value!, embeddingModel.Value!, openaiConfig, ollamaConfig, azureOpenaiConfig, embeddingBatchSize);
        }

        /// <summary>
        /// Serializes a <see cref="EmbeddingModelUpdateForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="embeddingModelUpdateForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmbeddingModelUpdateForm embeddingModelUpdateForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, embeddingModelUpdateForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmbeddingModelUpdateForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="embeddingModelUpdateForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmbeddingModelUpdateForm embeddingModelUpdateForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (embeddingModelUpdateForm.EmbeddingEngine == null)
                throw new ArgumentNullException(nameof(embeddingModelUpdateForm.EmbeddingEngine), "Property is required for class EmbeddingModelUpdateForm.");

            if (embeddingModelUpdateForm.EmbeddingModel == null)
                throw new ArgumentNullException(nameof(embeddingModelUpdateForm.EmbeddingModel), "Property is required for class EmbeddingModelUpdateForm.");

            writer.WriteString("embedding_engine", embeddingModelUpdateForm.EmbeddingEngine);

            writer.WriteString("embedding_model", embeddingModelUpdateForm.EmbeddingModel);

            if (embeddingModelUpdateForm.OpenaiConfigOption.IsSet)
                if (embeddingModelUpdateForm.OpenaiConfigOption.Value != null)
                {
                    writer.WritePropertyName("openai_config");
                    JsonSerializer.Serialize(writer, embeddingModelUpdateForm.OpenaiConfig, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("openai_config");
            if (embeddingModelUpdateForm.OllamaConfigOption.IsSet)
                if (embeddingModelUpdateForm.OllamaConfigOption.Value != null)
                {
                    writer.WritePropertyName("ollama_config");
                    JsonSerializer.Serialize(writer, embeddingModelUpdateForm.OllamaConfig, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ollama_config");
            if (embeddingModelUpdateForm.AzureOpenaiConfigOption.IsSet)
                if (embeddingModelUpdateForm.AzureOpenaiConfigOption.Value != null)
                {
                    writer.WritePropertyName("azure_openai_config");
                    JsonSerializer.Serialize(writer, embeddingModelUpdateForm.AzureOpenaiConfig, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("azure_openai_config");
            if (embeddingModelUpdateForm.EmbeddingBatchSizeOption.IsSet)
                if (embeddingModelUpdateForm.EmbeddingBatchSizeOption.Value != null)
                    writer.WriteNumber("embedding_batch_size", embeddingModelUpdateForm.EmbeddingBatchSizeOption.Value!.Value);
                else
                    writer.WriteNull("embedding_batch_size");
        }
    }
}
