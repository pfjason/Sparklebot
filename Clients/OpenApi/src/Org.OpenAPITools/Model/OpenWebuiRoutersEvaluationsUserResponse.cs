// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OpenWebuiRoutersEvaluationsUserResponse
    /// </summary>
    public partial class OpenWebuiRoutersEvaluationsUserResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenWebuiRoutersEvaluationsUserResponse" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="email">email</param>
        /// <param name="lastActiveAt">lastActiveAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="role">role (default to &quot;pending&quot;)</param>
        [JsonConstructor]
        public OpenWebuiRoutersEvaluationsUserResponse(string id, string name, string email, int lastActiveAt, int updatedAt, int createdAt, Option<string?> role = default)
        {
            Id = id;
            Name = name;
            Email = email;
            LastActiveAt = lastActiveAt;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            RoleOption = role;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets LastActiveAt
        /// </summary>
        [JsonPropertyName("last_active_at")]
        public int LastActiveAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public string? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenWebuiRoutersEvaluationsUserResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LastActiveAt: ").Append(LastActiveAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OpenWebuiRoutersEvaluationsUserResponse" />
    /// </summary>
    public class OpenWebuiRoutersEvaluationsUserResponseJsonConverter : JsonConverter<OpenWebuiRoutersEvaluationsUserResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="OpenWebuiRoutersEvaluationsUserResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OpenWebuiRoutersEvaluationsUserResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> email = default;
            Option<int?> lastActiveAt = default;
            Option<int?> updatedAt = default;
            Option<int?> createdAt = default;
            Option<string?> role = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_active_at":
                            lastActiveAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updated_at":
                            updatedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersEvaluationsUserResponse.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersEvaluationsUserResponse.", nameof(name));

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersEvaluationsUserResponse.", nameof(email));

            if (!lastActiveAt.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersEvaluationsUserResponse.", nameof(lastActiveAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersEvaluationsUserResponse.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersEvaluationsUserResponse.", nameof(createdAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (lastActiveAt.IsSet && lastActiveAt.Value == null)
                throw new ArgumentNullException(nameof(lastActiveAt), "Property is not nullable for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class OpenWebuiRoutersEvaluationsUserResponse.");

            return new OpenWebuiRoutersEvaluationsUserResponse(id.Value!, name.Value!, email.Value!, lastActiveAt.Value!.Value!, updatedAt.Value!.Value!, createdAt.Value!.Value!, role);
        }

        /// <summary>
        /// Serializes a <see cref="OpenWebuiRoutersEvaluationsUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersEvaluationsUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OpenWebuiRoutersEvaluationsUserResponse openWebuiRoutersEvaluationsUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, openWebuiRoutersEvaluationsUserResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OpenWebuiRoutersEvaluationsUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersEvaluationsUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OpenWebuiRoutersEvaluationsUserResponse openWebuiRoutersEvaluationsUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (openWebuiRoutersEvaluationsUserResponse.Id == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersEvaluationsUserResponse.Id), "Property is required for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (openWebuiRoutersEvaluationsUserResponse.Name == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersEvaluationsUserResponse.Name), "Property is required for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (openWebuiRoutersEvaluationsUserResponse.Email == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersEvaluationsUserResponse.Email), "Property is required for class OpenWebuiRoutersEvaluationsUserResponse.");

            if (openWebuiRoutersEvaluationsUserResponse.RoleOption.IsSet && openWebuiRoutersEvaluationsUserResponse.Role == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersEvaluationsUserResponse.Role), "Property is required for class OpenWebuiRoutersEvaluationsUserResponse.");

            writer.WriteString("id", openWebuiRoutersEvaluationsUserResponse.Id);

            writer.WriteString("name", openWebuiRoutersEvaluationsUserResponse.Name);

            writer.WriteString("email", openWebuiRoutersEvaluationsUserResponse.Email);

            writer.WriteNumber("last_active_at", openWebuiRoutersEvaluationsUserResponse.LastActiveAt);

            writer.WriteNumber("updated_at", openWebuiRoutersEvaluationsUserResponse.UpdatedAt);

            writer.WriteNumber("created_at", openWebuiRoutersEvaluationsUserResponse.CreatedAt);

            if (openWebuiRoutersEvaluationsUserResponse.RoleOption.IsSet)
                writer.WriteString("role", openWebuiRoutersEvaluationsUserResponse.Role);
        }
    }
}
