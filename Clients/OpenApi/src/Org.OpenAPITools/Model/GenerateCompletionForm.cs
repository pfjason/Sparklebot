// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GenerateCompletionForm
    /// </summary>
    public partial class GenerateCompletionForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateCompletionForm" /> class.
        /// </summary>
        /// <param name="model">model</param>
        /// <param name="prompt">prompt</param>
        /// <param name="suffix">suffix</param>
        /// <param name="images">images</param>
        /// <param name="format">format</param>
        /// <param name="options">options</param>
        /// <param name="system">system</param>
        /// <param name="template">template</param>
        /// <param name="context">context</param>
        /// <param name="stream">stream</param>
        /// <param name="raw">raw</param>
        /// <param name="keepAlive">keepAlive</param>
        [JsonConstructor]
        public GenerateCompletionForm(string model, string prompt, Option<string?> suffix = default, Option<List<string>?> images = default, Option<Format?> format = default, Option<Object?> options = default, Option<string?> @system = default, Option<string?> template = default, Option<List<int>?> context = default, Option<bool?> stream = default, Option<bool?> raw = default, Option<KeepAlive?> keepAlive = default)
        {
            Model = model;
            Prompt = prompt;
            SuffixOption = suffix;
            ImagesOption = images;
            FormatOption = format;
            OptionsOption = options;
            SystemOption = @system;
            TemplateOption = template;
            ContextOption = context;
            StreamOption = stream;
            RawOption = raw;
            KeepAliveOption = keepAlive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Prompt
        /// </summary>
        [JsonPropertyName("prompt")]
        public string Prompt { get; set; }

        /// <summary>
        /// Used to track the state of Suffix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SuffixOption { get; private set; }

        /// <summary>
        /// Gets or Sets Suffix
        /// </summary>
        [JsonPropertyName("suffix")]
        public string? Suffix { get { return this.SuffixOption; } set { this.SuffixOption = new(value); } }

        /// <summary>
        /// Used to track the state of Images
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ImagesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [JsonPropertyName("images")]
        public List<string>? Images { get { return this.ImagesOption; } set { this.ImagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Format?> FormatOption { get; private set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [JsonPropertyName("format")]
        public Format? Format { get { return this.FormatOption; } set { this.FormatOption = new(value); } }

        /// <summary>
        /// Used to track the state of Options
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> OptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [JsonPropertyName("options")]
        public Object? Options { get { return this.OptionsOption; } set { this.OptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of System
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SystemOption { get; private set; }

        /// <summary>
        /// Gets or Sets System
        /// </summary>
        [JsonPropertyName("system")]
        public string? System { get { return this.SystemOption; } set { this.SystemOption = new(value); } }

        /// <summary>
        /// Used to track the state of Template
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TemplateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [JsonPropertyName("template")]
        public string? Template { get { return this.TemplateOption; } set { this.TemplateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Context
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> ContextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [JsonPropertyName("context")]
        public List<int>? Context { get { return this.ContextOption; } set { this.ContextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stream
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StreamOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stream
        /// </summary>
        [JsonPropertyName("stream")]
        public bool? Stream { get { return this.StreamOption; } set { this.StreamOption = new(value); } }

        /// <summary>
        /// Used to track the state of Raw
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RawOption { get; private set; }

        /// <summary>
        /// Gets or Sets Raw
        /// </summary>
        [JsonPropertyName("raw")]
        public bool? Raw { get { return this.RawOption; } set { this.RawOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeepAlive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KeepAlive?> KeepAliveOption { get; private set; }

        /// <summary>
        /// Gets or Sets KeepAlive
        /// </summary>
        [JsonPropertyName("keep_alive")]
        public KeepAlive? KeepAlive { get { return this.KeepAliveOption; } set { this.KeepAliveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateCompletionForm {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  KeepAlive: ").Append(KeepAlive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateCompletionForm" />
    /// </summary>
    public class GenerateCompletionFormJsonConverter : JsonConverter<GenerateCompletionForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateCompletionForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateCompletionForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> model = default;
            Option<string?> prompt = default;
            Option<string?> suffix = default;
            Option<List<string>?> images = default;
            Option<Format?> format = default;
            Option<Object?> options = default;
            Option<string?> varSystem = default;
            Option<string?> template = default;
            Option<List<int>?> context = default;
            Option<bool?> stream = default;
            Option<bool?> raw = default;
            Option<KeepAlive?> keepAlive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prompt":
                            prompt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "suffix":
                            suffix = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "images":
                            images = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "format":
                            format = new Option<Format?>(JsonSerializer.Deserialize<Format>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "options":
                            options = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "system":
                            varSystem = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "template":
                            template = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "context":
                            context = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "stream":
                            stream = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "raw":
                            raw = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "keep_alive":
                            keepAlive = new Option<KeepAlive?>(JsonSerializer.Deserialize<KeepAlive>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!model.IsSet)
                throw new ArgumentException("Property is required for class GenerateCompletionForm.", nameof(model));

            if (!prompt.IsSet)
                throw new ArgumentException("Property is required for class GenerateCompletionForm.", nameof(prompt));

            if (model.IsSet && model.Value == null)
                throw new ArgumentNullException(nameof(model), "Property is not nullable for class GenerateCompletionForm.");

            if (prompt.IsSet && prompt.Value == null)
                throw new ArgumentNullException(nameof(prompt), "Property is not nullable for class GenerateCompletionForm.");

            return new GenerateCompletionForm(model.Value!, prompt.Value!, suffix, images, format, options, varSystem, template, context, stream, raw, keepAlive);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateCompletionForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateCompletionForm generateCompletionForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateCompletionForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateCompletionForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateCompletionForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateCompletionForm generateCompletionForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateCompletionForm.Model == null)
                throw new ArgumentNullException(nameof(generateCompletionForm.Model), "Property is required for class GenerateCompletionForm.");

            if (generateCompletionForm.Prompt == null)
                throw new ArgumentNullException(nameof(generateCompletionForm.Prompt), "Property is required for class GenerateCompletionForm.");

            writer.WriteString("model", generateCompletionForm.Model);

            writer.WriteString("prompt", generateCompletionForm.Prompt);

            if (generateCompletionForm.SuffixOption.IsSet)
                if (generateCompletionForm.SuffixOption.Value != null)
                    writer.WriteString("suffix", generateCompletionForm.Suffix);
                else
                    writer.WriteNull("suffix");

            if (generateCompletionForm.ImagesOption.IsSet)
                if (generateCompletionForm.ImagesOption.Value != null)
                {
                    writer.WritePropertyName("images");
                    JsonSerializer.Serialize(writer, generateCompletionForm.Images, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("images");
            if (generateCompletionForm.FormatOption.IsSet)
                if (generateCompletionForm.FormatOption.Value != null)
                {
                    writer.WritePropertyName("format");
                    JsonSerializer.Serialize(writer, generateCompletionForm.Format, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("format");
            if (generateCompletionForm.OptionsOption.IsSet)
                if (generateCompletionForm.OptionsOption.Value != null)
                {
                    writer.WritePropertyName("options");
                    JsonSerializer.Serialize(writer, generateCompletionForm.Options, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("options");
            if (generateCompletionForm.SystemOption.IsSet)
                if (generateCompletionForm.SystemOption.Value != null)
                    writer.WriteString("system", generateCompletionForm.System);
                else
                    writer.WriteNull("system");

            if (generateCompletionForm.TemplateOption.IsSet)
                if (generateCompletionForm.TemplateOption.Value != null)
                    writer.WriteString("template", generateCompletionForm.Template);
                else
                    writer.WriteNull("template");

            if (generateCompletionForm.ContextOption.IsSet)
                if (generateCompletionForm.ContextOption.Value != null)
                {
                    writer.WritePropertyName("context");
                    JsonSerializer.Serialize(writer, generateCompletionForm.Context, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("context");
            if (generateCompletionForm.StreamOption.IsSet)
                if (generateCompletionForm.StreamOption.Value != null)
                    writer.WriteBoolean("stream", generateCompletionForm.StreamOption.Value!.Value);
                else
                    writer.WriteNull("stream");

            if (generateCompletionForm.RawOption.IsSet)
                if (generateCompletionForm.RawOption.Value != null)
                    writer.WriteBoolean("raw", generateCompletionForm.RawOption.Value!.Value);
                else
                    writer.WriteNull("raw");

            if (generateCompletionForm.KeepAliveOption.IsSet)
                if (generateCompletionForm.KeepAliveOption.Value != null)
                {
                    writer.WritePropertyName("keep_alive");
                    JsonSerializer.Serialize(writer, generateCompletionForm.KeepAlive, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("keep_alive");
        }
    }
}
