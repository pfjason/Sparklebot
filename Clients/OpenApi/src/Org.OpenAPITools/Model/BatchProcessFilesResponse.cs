// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchProcessFilesResponse
    /// </summary>
    public partial class BatchProcessFilesResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessFilesResponse" /> class.
        /// </summary>
        /// <param name="results">results</param>
        /// <param name="errors">errors</param>
        [JsonConstructor]
        public BatchProcessFilesResponse(List<BatchProcessFilesResult> results, List<BatchProcessFilesResult> errors)
        {
            Results = results;
            Errors = errors;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [JsonPropertyName("results")]
        public List<BatchProcessFilesResult> Results { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [JsonPropertyName("errors")]
        public List<BatchProcessFilesResult> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchProcessFilesResponse {\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BatchProcessFilesResponse" />
    /// </summary>
    public class BatchProcessFilesResponseJsonConverter : JsonConverter<BatchProcessFilesResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="BatchProcessFilesResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BatchProcessFilesResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<BatchProcessFilesResult>?> results = default;
            Option<List<BatchProcessFilesResult>?> errors = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "results":
                            results = new Option<List<BatchProcessFilesResult>?>(JsonSerializer.Deserialize<List<BatchProcessFilesResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "errors":
                            errors = new Option<List<BatchProcessFilesResult>?>(JsonSerializer.Deserialize<List<BatchProcessFilesResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!results.IsSet)
                throw new ArgumentException("Property is required for class BatchProcessFilesResponse.", nameof(results));

            if (!errors.IsSet)
                throw new ArgumentException("Property is required for class BatchProcessFilesResponse.", nameof(errors));

            if (results.IsSet && results.Value == null)
                throw new ArgumentNullException(nameof(results), "Property is not nullable for class BatchProcessFilesResponse.");

            if (errors.IsSet && errors.Value == null)
                throw new ArgumentNullException(nameof(errors), "Property is not nullable for class BatchProcessFilesResponse.");

            return new BatchProcessFilesResponse(results.Value!, errors.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="BatchProcessFilesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="batchProcessFilesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BatchProcessFilesResponse batchProcessFilesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, batchProcessFilesResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BatchProcessFilesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="batchProcessFilesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BatchProcessFilesResponse batchProcessFilesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (batchProcessFilesResponse.Results == null)
                throw new ArgumentNullException(nameof(batchProcessFilesResponse.Results), "Property is required for class BatchProcessFilesResponse.");

            if (batchProcessFilesResponse.Errors == null)
                throw new ArgumentNullException(nameof(batchProcessFilesResponse.Errors), "Property is required for class BatchProcessFilesResponse.");

            writer.WritePropertyName("results");
            JsonSerializer.Serialize(writer, batchProcessFilesResponse.Results, jsonSerializerOptions);
            writer.WritePropertyName("errors");
            JsonSerializer.Serialize(writer, batchProcessFilesResponse.Errors, jsonSerializerOptions);
        }
    }
}
