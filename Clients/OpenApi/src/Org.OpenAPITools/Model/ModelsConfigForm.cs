// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ModelsConfigForm
    /// </summary>
    public partial class ModelsConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelsConfigForm" /> class.
        /// </summary>
        /// <param name="dEFAULTMODELS">dEFAULTMODELS</param>
        /// <param name="mODELORDERLIST">mODELORDERLIST</param>
        [JsonConstructor]
        public ModelsConfigForm(string? dEFAULTMODELS = default, List<string>? mODELORDERLIST = default)
        {
            DEFAULT_MODELS = dEFAULTMODELS;
            MODEL_ORDER_LIST = mODELORDERLIST;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DEFAULT_MODELS
        /// </summary>
        [JsonPropertyName("DEFAULT_MODELS")]
        public string? DEFAULT_MODELS { get; set; }

        /// <summary>
        /// Gets or Sets MODEL_ORDER_LIST
        /// </summary>
        [JsonPropertyName("MODEL_ORDER_LIST")]
        public List<string>? MODEL_ORDER_LIST { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelsConfigForm {\n");
            sb.Append("  DEFAULT_MODELS: ").Append(DEFAULT_MODELS).Append("\n");
            sb.Append("  MODEL_ORDER_LIST: ").Append(MODEL_ORDER_LIST).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModelsConfigForm" />
    /// </summary>
    public class ModelsConfigFormJsonConverter : JsonConverter<ModelsConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="ModelsConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModelsConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> dEFAULTMODELS = default;
            Option<List<string>?> mODELORDERLIST = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "DEFAULT_MODELS":
                            dEFAULTMODELS = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "MODEL_ORDER_LIST":
                            mODELORDERLIST = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!dEFAULTMODELS.IsSet)
                throw new ArgumentException("Property is required for class ModelsConfigForm.", nameof(dEFAULTMODELS));

            if (!mODELORDERLIST.IsSet)
                throw new ArgumentException("Property is required for class ModelsConfigForm.", nameof(mODELORDERLIST));

            return new ModelsConfigForm(dEFAULTMODELS.Value!, mODELORDERLIST.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ModelsConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelsConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModelsConfigForm modelsConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modelsConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModelsConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelsConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModelsConfigForm modelsConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modelsConfigForm.DEFAULT_MODELS != null)
                writer.WriteString("DEFAULT_MODELS", modelsConfigForm.DEFAULT_MODELS);
            else
                writer.WriteNull("DEFAULT_MODELS");

            if (modelsConfigForm.MODEL_ORDER_LIST != null)
            {
                writer.WritePropertyName("MODEL_ORDER_LIST");
                JsonSerializer.Serialize(writer, modelsConfigForm.MODEL_ORDER_LIST, jsonSerializerOptions);
            }
            else
                writer.WriteNull("MODEL_ORDER_LIST");
        }
    }
}
