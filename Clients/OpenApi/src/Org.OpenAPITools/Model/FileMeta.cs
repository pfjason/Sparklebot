// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FileMeta
    /// </summary>
    public partial class FileMeta : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMeta" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="contentType">contentType</param>
        /// <param name="size">size</param>
        [JsonConstructor]
        public FileMeta(Option<Name?> name = default, Option<ContentType?> contentType = default, Option<Size?> size = default)
        {
            NameOption = name;
            ContentTypeOption = contentType;
            SizeOption = size;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Name?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public Name? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContentType?> ContentTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [JsonPropertyName("content_type")]
        public ContentType? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Size?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public Size? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileMeta {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileMeta" />
    /// </summary>
    public class FileMetaJsonConverter : JsonConverter<FileMeta>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileMeta" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileMeta Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Name?> name = default;
            Option<ContentType?> contentType = default;
            Option<Size?> size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<Name?>(JsonSerializer.Deserialize<Name>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "content_type":
                            contentType = new Option<ContentType?>(JsonSerializer.Deserialize<ContentType>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "size":
                            size = new Option<Size?>(JsonSerializer.Deserialize<Size>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class FileMeta.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class FileMeta.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class FileMeta.");

            return new FileMeta(name, contentType, size);
        }

        /// <summary>
        /// Serializes a <see cref="FileMeta" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileMeta"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileMeta fileMeta, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileMeta, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileMeta" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileMeta"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileMeta fileMeta, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileMeta.NameOption.IsSet && fileMeta.Name == null)
                throw new ArgumentNullException(nameof(fileMeta.Name), "Property is required for class FileMeta.");

            if (fileMeta.ContentTypeOption.IsSet && fileMeta.ContentType == null)
                throw new ArgumentNullException(nameof(fileMeta.ContentType), "Property is required for class FileMeta.");

            if (fileMeta.SizeOption.IsSet && fileMeta.Size == null)
                throw new ArgumentNullException(nameof(fileMeta.Size), "Property is required for class FileMeta.");

            if (fileMeta.NameOption.IsSet)
            {
                writer.WritePropertyName("name");
                JsonSerializer.Serialize(writer, fileMeta.Name, jsonSerializerOptions);
            }
            if (fileMeta.ContentTypeOption.IsSet)
            {
                writer.WritePropertyName("content_type");
                JsonSerializer.Serialize(writer, fileMeta.ContentType, jsonSerializerOptions);
            }
            if (fileMeta.SizeOption.IsSet)
            {
                writer.WritePropertyName("size");
                JsonSerializer.Serialize(writer, fileMeta.Size, jsonSerializerOptions);
            }
        }
    }
}
