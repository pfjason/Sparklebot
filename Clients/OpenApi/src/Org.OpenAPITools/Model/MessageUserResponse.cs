// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MessageUserResponse
    /// </summary>
    public partial class MessageUserResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageUserResponse" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="content">content</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="replyCount">replyCount</param>
        /// <param name="reactions">reactions</param>
        /// <param name="user">user</param>
        /// <param name="channelId">channelId</param>
        /// <param name="parentId">parentId</param>
        /// <param name="data">data</param>
        /// <param name="meta">meta</param>
        /// <param name="latestReplyAt">latestReplyAt</param>
        [JsonConstructor]
        public MessageUserResponse(string id, string userId, string content, int createdAt, int updatedAt, int replyCount, List<Reactions> reactions, UserNameResponse user, Option<string?> channelId = default, Option<string?> parentId = default, Option<Object?> data = default, Option<Object?> meta = default, int? latestReplyAt = default)
        {
            Id = id;
            UserId = userId;
            Content = content;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ReplyCount = replyCount;
            Reactions = reactions;
            User = user;
            ChannelIdOption = channelId;
            ParentIdOption = parentId;
            DataOption = data;
            MetaOption = meta;
            LatestReplyAt = latestReplyAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ReplyCount
        /// </summary>
        [JsonPropertyName("reply_count")]
        public int ReplyCount { get; set; }

        /// <summary>
        /// Gets or Sets Reactions
        /// </summary>
        [JsonPropertyName("reactions")]
        public List<Reactions> Reactions { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public UserNameResponse User { get; set; }

        /// <summary>
        /// Used to track the state of ChannelId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChannelIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [JsonPropertyName("channel_id")]
        public string? ChannelId { get { return this.ChannelIdOption; } set { this.ChannelIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [JsonPropertyName("parent_id")]
        public string? ParentId { get { return this.ParentIdOption; } set { this.ParentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Meta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> MetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public Object? Meta { get { return this.MetaOption; } set { this.MetaOption = new(value); } }

        /// <summary>
        /// Gets or Sets LatestReplyAt
        /// </summary>
        [JsonPropertyName("latest_reply_at")]
        public int? LatestReplyAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageUserResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ReplyCount: ").Append(ReplyCount).Append("\n");
            sb.Append("  Reactions: ").Append(Reactions).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  LatestReplyAt: ").Append(LatestReplyAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MessageUserResponse" />
    /// </summary>
    public class MessageUserResponseJsonConverter : JsonConverter<MessageUserResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="MessageUserResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MessageUserResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> userId = default;
            Option<string?> content = default;
            Option<int?> createdAt = default;
            Option<int?> updatedAt = default;
            Option<int?> replyCount = default;
            Option<List<Reactions>?> reactions = default;
            Option<UserNameResponse?> user = default;
            Option<string?> channelId = default;
            Option<string?> parentId = default;
            Option<Object?> data = default;
            Option<Object?> meta = default;
            Option<int?> latestReplyAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            createdAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updated_at":
                            updatedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "reply_count":
                            replyCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "reactions":
                            reactions = new Option<List<Reactions>?>(JsonSerializer.Deserialize<List<Reactions>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "user":
                            user = new Option<UserNameResponse?>(JsonSerializer.Deserialize<UserNameResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "channel_id":
                            channelId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "parent_id":
                            parentId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "meta":
                            meta = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "latest_reply_at":
                            latestReplyAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(userId));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(content));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(updatedAt));

            if (!replyCount.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(replyCount));

            if (!reactions.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(reactions));

            if (!user.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(user));

            if (!latestReplyAt.IsSet)
                throw new ArgumentException("Property is required for class MessageUserResponse.", nameof(latestReplyAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class MessageUserResponse.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class MessageUserResponse.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class MessageUserResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class MessageUserResponse.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class MessageUserResponse.");

            if (replyCount.IsSet && replyCount.Value == null)
                throw new ArgumentNullException(nameof(replyCount), "Property is not nullable for class MessageUserResponse.");

            if (reactions.IsSet && reactions.Value == null)
                throw new ArgumentNullException(nameof(reactions), "Property is not nullable for class MessageUserResponse.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class MessageUserResponse.");

            return new MessageUserResponse(id.Value!, userId.Value!, content.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, replyCount.Value!.Value!, reactions.Value!, user.Value!, channelId, parentId, data, meta, latestReplyAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="MessageUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="messageUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MessageUserResponse messageUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, messageUserResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MessageUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="messageUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MessageUserResponse messageUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (messageUserResponse.Id == null)
                throw new ArgumentNullException(nameof(messageUserResponse.Id), "Property is required for class MessageUserResponse.");

            if (messageUserResponse.UserId == null)
                throw new ArgumentNullException(nameof(messageUserResponse.UserId), "Property is required for class MessageUserResponse.");

            if (messageUserResponse.Content == null)
                throw new ArgumentNullException(nameof(messageUserResponse.Content), "Property is required for class MessageUserResponse.");

            if (messageUserResponse.Reactions == null)
                throw new ArgumentNullException(nameof(messageUserResponse.Reactions), "Property is required for class MessageUserResponse.");

            if (messageUserResponse.User == null)
                throw new ArgumentNullException(nameof(messageUserResponse.User), "Property is required for class MessageUserResponse.");

            writer.WriteString("id", messageUserResponse.Id);

            writer.WriteString("user_id", messageUserResponse.UserId);

            writer.WriteString("content", messageUserResponse.Content);

            writer.WriteNumber("created_at", messageUserResponse.CreatedAt);

            writer.WriteNumber("updated_at", messageUserResponse.UpdatedAt);

            writer.WriteNumber("reply_count", messageUserResponse.ReplyCount);

            writer.WritePropertyName("reactions");
            JsonSerializer.Serialize(writer, messageUserResponse.Reactions, jsonSerializerOptions);
            writer.WritePropertyName("user");
            JsonSerializer.Serialize(writer, messageUserResponse.User, jsonSerializerOptions);
            if (messageUserResponse.ChannelIdOption.IsSet)
                if (messageUserResponse.ChannelIdOption.Value != null)
                    writer.WriteString("channel_id", messageUserResponse.ChannelId);
                else
                    writer.WriteNull("channel_id");

            if (messageUserResponse.ParentIdOption.IsSet)
                if (messageUserResponse.ParentIdOption.Value != null)
                    writer.WriteString("parent_id", messageUserResponse.ParentId);
                else
                    writer.WriteNull("parent_id");

            if (messageUserResponse.DataOption.IsSet)
                if (messageUserResponse.DataOption.Value != null)
                {
                    writer.WritePropertyName("data");
                    JsonSerializer.Serialize(writer, messageUserResponse.Data, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("data");
            if (messageUserResponse.MetaOption.IsSet)
                if (messageUserResponse.MetaOption.Value != null)
                {
                    writer.WritePropertyName("meta");
                    JsonSerializer.Serialize(writer, messageUserResponse.Meta, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("meta");
            if (messageUserResponse.LatestReplyAt != null)
                writer.WriteNumber("latest_reply_at", messageUserResponse.LatestReplyAt.Value);
            else
                writer.WriteNull("latest_reply_at");
        }
    }
}
