// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ImageConfigForm
    /// </summary>
    public partial class ImageConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageConfigForm" /> class.
        /// </summary>
        /// <param name="mODEL">mODEL</param>
        /// <param name="iMAGESIZE">iMAGESIZE</param>
        /// <param name="iMAGESTEPS">iMAGESTEPS</param>
        [JsonConstructor]
        public ImageConfigForm(string mODEL, string iMAGESIZE, int iMAGESTEPS)
        {
            MODEL = mODEL;
            IMAGE_SIZE = iMAGESIZE;
            IMAGE_STEPS = iMAGESTEPS;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets MODEL
        /// </summary>
        [JsonPropertyName("MODEL")]
        public string MODEL { get; set; }

        /// <summary>
        /// Gets or Sets IMAGE_SIZE
        /// </summary>
        [JsonPropertyName("IMAGE_SIZE")]
        public string IMAGE_SIZE { get; set; }

        /// <summary>
        /// Gets or Sets IMAGE_STEPS
        /// </summary>
        [JsonPropertyName("IMAGE_STEPS")]
        public int IMAGE_STEPS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageConfigForm {\n");
            sb.Append("  MODEL: ").Append(MODEL).Append("\n");
            sb.Append("  IMAGE_SIZE: ").Append(IMAGE_SIZE).Append("\n");
            sb.Append("  IMAGE_STEPS: ").Append(IMAGE_STEPS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImageConfigForm" />
    /// </summary>
    public class ImageConfigFormJsonConverter : JsonConverter<ImageConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImageConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImageConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> mODEL = default;
            Option<string?> iMAGESIZE = default;
            Option<int?> iMAGESTEPS = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "MODEL":
                            mODEL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "IMAGE_SIZE":
                            iMAGESIZE = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "IMAGE_STEPS":
                            iMAGESTEPS = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!mODEL.IsSet)
                throw new ArgumentException("Property is required for class ImageConfigForm.", nameof(mODEL));

            if (!iMAGESIZE.IsSet)
                throw new ArgumentException("Property is required for class ImageConfigForm.", nameof(iMAGESIZE));

            if (!iMAGESTEPS.IsSet)
                throw new ArgumentException("Property is required for class ImageConfigForm.", nameof(iMAGESTEPS));

            if (mODEL.IsSet && mODEL.Value == null)
                throw new ArgumentNullException(nameof(mODEL), "Property is not nullable for class ImageConfigForm.");

            if (iMAGESIZE.IsSet && iMAGESIZE.Value == null)
                throw new ArgumentNullException(nameof(iMAGESIZE), "Property is not nullable for class ImageConfigForm.");

            if (iMAGESTEPS.IsSet && iMAGESTEPS.Value == null)
                throw new ArgumentNullException(nameof(iMAGESTEPS), "Property is not nullable for class ImageConfigForm.");

            return new ImageConfigForm(mODEL.Value!, iMAGESIZE.Value!, iMAGESTEPS.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ImageConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imageConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImageConfigForm imageConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, imageConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImageConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="imageConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImageConfigForm imageConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (imageConfigForm.MODEL == null)
                throw new ArgumentNullException(nameof(imageConfigForm.MODEL), "Property is required for class ImageConfigForm.");

            if (imageConfigForm.IMAGE_SIZE == null)
                throw new ArgumentNullException(nameof(imageConfigForm.IMAGE_SIZE), "Property is required for class ImageConfigForm.");

            writer.WriteString("MODEL", imageConfigForm.MODEL);

            writer.WriteString("IMAGE_SIZE", imageConfigForm.IMAGE_SIZE);

            writer.WriteNumber("IMAGE_STEPS", imageConfigForm.IMAGE_STEPS);
        }
    }
}
