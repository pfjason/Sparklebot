// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FeaturesPermissions
    /// </summary>
    public partial class FeaturesPermissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeaturesPermissions" /> class.
        /// </summary>
        /// <param name="directToolServers">directToolServers (default to false)</param>
        /// <param name="webSearch">webSearch (default to true)</param>
        /// <param name="imageGeneration">imageGeneration (default to true)</param>
        /// <param name="codeInterpreter">codeInterpreter (default to true)</param>
        /// <param name="notes">notes (default to true)</param>
        [JsonConstructor]
        public FeaturesPermissions(Option<bool?> directToolServers = default, Option<bool?> webSearch = default, Option<bool?> imageGeneration = default, Option<bool?> codeInterpreter = default, Option<bool?> notes = default)
        {
            DirectToolServersOption = directToolServers;
            WebSearchOption = webSearch;
            ImageGenerationOption = imageGeneration;
            CodeInterpreterOption = codeInterpreter;
            NotesOption = notes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DirectToolServers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DirectToolServersOption { get; private set; }

        /// <summary>
        /// Gets or Sets DirectToolServers
        /// </summary>
        [JsonPropertyName("direct_tool_servers")]
        public bool? DirectToolServers { get { return this.DirectToolServersOption; } set { this.DirectToolServersOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebSearch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WebSearchOption { get; private set; }

        /// <summary>
        /// Gets or Sets WebSearch
        /// </summary>
        [JsonPropertyName("web_search")]
        public bool? WebSearch { get { return this.WebSearchOption; } set { this.WebSearchOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImageGeneration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ImageGenerationOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImageGeneration
        /// </summary>
        [JsonPropertyName("image_generation")]
        public bool? ImageGeneration { get { return this.ImageGenerationOption; } set { this.ImageGenerationOption = new(value); } }

        /// <summary>
        /// Used to track the state of CodeInterpreter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CodeInterpreterOption { get; private set; }

        /// <summary>
        /// Gets or Sets CodeInterpreter
        /// </summary>
        [JsonPropertyName("code_interpreter")]
        public bool? CodeInterpreter { get { return this.CodeInterpreterOption; } set { this.CodeInterpreterOption = new(value); } }

        /// <summary>
        /// Used to track the state of Notes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NotesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [JsonPropertyName("notes")]
        public bool? Notes { get { return this.NotesOption; } set { this.NotesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FeaturesPermissions {\n");
            sb.Append("  DirectToolServers: ").Append(DirectToolServers).Append("\n");
            sb.Append("  WebSearch: ").Append(WebSearch).Append("\n");
            sb.Append("  ImageGeneration: ").Append(ImageGeneration).Append("\n");
            sb.Append("  CodeInterpreter: ").Append(CodeInterpreter).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FeaturesPermissions" />
    /// </summary>
    public class FeaturesPermissionsJsonConverter : JsonConverter<FeaturesPermissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="FeaturesPermissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FeaturesPermissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> directToolServers = default;
            Option<bool?> webSearch = default;
            Option<bool?> imageGeneration = default;
            Option<bool?> codeInterpreter = default;
            Option<bool?> notes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "direct_tool_servers":
                            directToolServers = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "web_search":
                            webSearch = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "image_generation":
                            imageGeneration = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "code_interpreter":
                            codeInterpreter = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "notes":
                            notes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (directToolServers.IsSet && directToolServers.Value == null)
                throw new ArgumentNullException(nameof(directToolServers), "Property is not nullable for class FeaturesPermissions.");

            if (webSearch.IsSet && webSearch.Value == null)
                throw new ArgumentNullException(nameof(webSearch), "Property is not nullable for class FeaturesPermissions.");

            if (imageGeneration.IsSet && imageGeneration.Value == null)
                throw new ArgumentNullException(nameof(imageGeneration), "Property is not nullable for class FeaturesPermissions.");

            if (codeInterpreter.IsSet && codeInterpreter.Value == null)
                throw new ArgumentNullException(nameof(codeInterpreter), "Property is not nullable for class FeaturesPermissions.");

            if (notes.IsSet && notes.Value == null)
                throw new ArgumentNullException(nameof(notes), "Property is not nullable for class FeaturesPermissions.");

            return new FeaturesPermissions(directToolServers, webSearch, imageGeneration, codeInterpreter, notes);
        }

        /// <summary>
        /// Serializes a <see cref="FeaturesPermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="featuresPermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FeaturesPermissions featuresPermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, featuresPermissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FeaturesPermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="featuresPermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FeaturesPermissions featuresPermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (featuresPermissions.DirectToolServersOption.IsSet)
                writer.WriteBoolean("direct_tool_servers", featuresPermissions.DirectToolServersOption.Value!.Value);

            if (featuresPermissions.WebSearchOption.IsSet)
                writer.WriteBoolean("web_search", featuresPermissions.WebSearchOption.Value!.Value);

            if (featuresPermissions.ImageGenerationOption.IsSet)
                writer.WriteBoolean("image_generation", featuresPermissions.ImageGenerationOption.Value!.Value);

            if (featuresPermissions.CodeInterpreterOption.IsSet)
                writer.WriteBoolean("code_interpreter", featuresPermissions.CodeInterpreterOption.Value!.Value);

            if (featuresPermissions.NotesOption.IsSet)
                writer.WriteBoolean("notes", featuresPermissions.NotesOption.Value!.Value);
        }
    }
}
