// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GenerateEmbeddingsForm
    /// </summary>
    public partial class GenerateEmbeddingsForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateEmbeddingsForm" /> class.
        /// </summary>
        /// <param name="model">model</param>
        /// <param name="prompt">prompt</param>
        /// <param name="options">options</param>
        /// <param name="keepAlive">keepAlive</param>
        [JsonConstructor]
        public GenerateEmbeddingsForm(string model, string prompt, Option<Object?> options = default, Option<KeepAlive?> keepAlive = default)
        {
            Model = model;
            Prompt = prompt;
            OptionsOption = options;
            KeepAliveOption = keepAlive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Prompt
        /// </summary>
        [JsonPropertyName("prompt")]
        public string Prompt { get; set; }

        /// <summary>
        /// Used to track the state of Options
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> OptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [JsonPropertyName("options")]
        public Object? Options { get { return this.OptionsOption; } set { this.OptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeepAlive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KeepAlive?> KeepAliveOption { get; private set; }

        /// <summary>
        /// Gets or Sets KeepAlive
        /// </summary>
        [JsonPropertyName("keep_alive")]
        public KeepAlive? KeepAlive { get { return this.KeepAliveOption; } set { this.KeepAliveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateEmbeddingsForm {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  KeepAlive: ").Append(KeepAlive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateEmbeddingsForm" />
    /// </summary>
    public class GenerateEmbeddingsFormJsonConverter : JsonConverter<GenerateEmbeddingsForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateEmbeddingsForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateEmbeddingsForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> model = default;
            Option<string?> prompt = default;
            Option<Object?> options = default;
            Option<KeepAlive?> keepAlive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prompt":
                            prompt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "options":
                            options = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "keep_alive":
                            keepAlive = new Option<KeepAlive?>(JsonSerializer.Deserialize<KeepAlive>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!model.IsSet)
                throw new ArgumentException("Property is required for class GenerateEmbeddingsForm.", nameof(model));

            if (!prompt.IsSet)
                throw new ArgumentException("Property is required for class GenerateEmbeddingsForm.", nameof(prompt));

            if (model.IsSet && model.Value == null)
                throw new ArgumentNullException(nameof(model), "Property is not nullable for class GenerateEmbeddingsForm.");

            if (prompt.IsSet && prompt.Value == null)
                throw new ArgumentNullException(nameof(prompt), "Property is not nullable for class GenerateEmbeddingsForm.");

            return new GenerateEmbeddingsForm(model.Value!, prompt.Value!, options, keepAlive);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateEmbeddingsForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateEmbeddingsForm generateEmbeddingsForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateEmbeddingsForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateEmbeddingsForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateEmbeddingsForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateEmbeddingsForm generateEmbeddingsForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateEmbeddingsForm.Model == null)
                throw new ArgumentNullException(nameof(generateEmbeddingsForm.Model), "Property is required for class GenerateEmbeddingsForm.");

            if (generateEmbeddingsForm.Prompt == null)
                throw new ArgumentNullException(nameof(generateEmbeddingsForm.Prompt), "Property is required for class GenerateEmbeddingsForm.");

            writer.WriteString("model", generateEmbeddingsForm.Model);

            writer.WriteString("prompt", generateEmbeddingsForm.Prompt);

            if (generateEmbeddingsForm.OptionsOption.IsSet)
                if (generateEmbeddingsForm.OptionsOption.Value != null)
                {
                    writer.WritePropertyName("options");
                    JsonSerializer.Serialize(writer, generateEmbeddingsForm.Options, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("options");
            if (generateEmbeddingsForm.KeepAliveOption.IsSet)
                if (generateEmbeddingsForm.KeepAliveOption.Value != null)
                {
                    writer.WritePropertyName("keep_alive");
                    JsonSerializer.Serialize(writer, generateEmbeddingsForm.KeepAlive, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("keep_alive");
        }
    }
}
