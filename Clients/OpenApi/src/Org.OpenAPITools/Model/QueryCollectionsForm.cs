// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QueryCollectionsForm
    /// </summary>
    public partial class QueryCollectionsForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryCollectionsForm" /> class.
        /// </summary>
        /// <param name="collectionNames">collectionNames</param>
        /// <param name="query">query</param>
        /// <param name="k">k</param>
        /// <param name="kReranker">kReranker</param>
        /// <param name="r">r</param>
        /// <param name="hybrid">hybrid</param>
        /// <param name="hybridBm25Weight">hybridBm25Weight</param>
        [JsonConstructor]
        public QueryCollectionsForm(List<string> collectionNames, string query, Option<int?> k = default, Option<int?> kReranker = default, Option<decimal?> r = default, Option<bool?> hybrid = default, Option<decimal?> hybridBm25Weight = default)
        {
            CollectionNames = collectionNames;
            Query = query;
            KOption = k;
            KRerankerOption = kReranker;
            ROption = r;
            HybridOption = hybrid;
            HybridBm25WeightOption = hybridBm25Weight;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CollectionNames
        /// </summary>
        [JsonPropertyName("collection_names")]
        public List<string> CollectionNames { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [JsonPropertyName("query")]
        public string Query { get; set; }

        /// <summary>
        /// Used to track the state of K
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> KOption { get; private set; }

        /// <summary>
        /// Gets or Sets K
        /// </summary>
        [JsonPropertyName("k")]
        public int? K { get { return this.KOption; } set { this.KOption = new(value); } }

        /// <summary>
        /// Used to track the state of KReranker
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> KRerankerOption { get; private set; }

        /// <summary>
        /// Gets or Sets KReranker
        /// </summary>
        [JsonPropertyName("k_reranker")]
        public int? KReranker { get { return this.KRerankerOption; } set { this.KRerankerOption = new(value); } }

        /// <summary>
        /// Used to track the state of R
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ROption { get; private set; }

        /// <summary>
        /// Gets or Sets R
        /// </summary>
        [JsonPropertyName("r")]
        public decimal? R { get { return this.ROption; } set { this.ROption = new(value); } }

        /// <summary>
        /// Used to track the state of Hybrid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HybridOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hybrid
        /// </summary>
        [JsonPropertyName("hybrid")]
        public bool? Hybrid { get { return this.HybridOption; } set { this.HybridOption = new(value); } }

        /// <summary>
        /// Used to track the state of HybridBm25Weight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> HybridBm25WeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets HybridBm25Weight
        /// </summary>
        [JsonPropertyName("hybrid_bm25_weight")]
        public decimal? HybridBm25Weight { get { return this.HybridBm25WeightOption; } set { this.HybridBm25WeightOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryCollectionsForm {\n");
            sb.Append("  CollectionNames: ").Append(CollectionNames).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  K: ").Append(K).Append("\n");
            sb.Append("  KReranker: ").Append(KReranker).Append("\n");
            sb.Append("  R: ").Append(R).Append("\n");
            sb.Append("  Hybrid: ").Append(Hybrid).Append("\n");
            sb.Append("  HybridBm25Weight: ").Append(HybridBm25Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QueryCollectionsForm" />
    /// </summary>
    public class QueryCollectionsFormJsonConverter : JsonConverter<QueryCollectionsForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="QueryCollectionsForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QueryCollectionsForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> collectionNames = default;
            Option<string?> query = default;
            Option<int?> k = default;
            Option<int?> kReranker = default;
            Option<decimal?> r = default;
            Option<bool?> hybrid = default;
            Option<decimal?> hybridBm25Weight = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "collection_names":
                            collectionNames = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "query":
                            query = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "k":
                            k = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "k_reranker":
                            kReranker = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "r":
                            r = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "hybrid":
                            hybrid = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "hybrid_bm25_weight":
                            hybridBm25Weight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!collectionNames.IsSet)
                throw new ArgumentException("Property is required for class QueryCollectionsForm.", nameof(collectionNames));

            if (!query.IsSet)
                throw new ArgumentException("Property is required for class QueryCollectionsForm.", nameof(query));

            if (collectionNames.IsSet && collectionNames.Value == null)
                throw new ArgumentNullException(nameof(collectionNames), "Property is not nullable for class QueryCollectionsForm.");

            if (query.IsSet && query.Value == null)
                throw new ArgumentNullException(nameof(query), "Property is not nullable for class QueryCollectionsForm.");

            return new QueryCollectionsForm(collectionNames.Value!, query.Value!, k, kReranker, r, hybrid, hybridBm25Weight);
        }

        /// <summary>
        /// Serializes a <see cref="QueryCollectionsForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queryCollectionsForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QueryCollectionsForm queryCollectionsForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, queryCollectionsForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QueryCollectionsForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queryCollectionsForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QueryCollectionsForm queryCollectionsForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (queryCollectionsForm.CollectionNames == null)
                throw new ArgumentNullException(nameof(queryCollectionsForm.CollectionNames), "Property is required for class QueryCollectionsForm.");

            if (queryCollectionsForm.Query == null)
                throw new ArgumentNullException(nameof(queryCollectionsForm.Query), "Property is required for class QueryCollectionsForm.");

            writer.WritePropertyName("collection_names");
            JsonSerializer.Serialize(writer, queryCollectionsForm.CollectionNames, jsonSerializerOptions);
            writer.WriteString("query", queryCollectionsForm.Query);

            if (queryCollectionsForm.KOption.IsSet)
                if (queryCollectionsForm.KOption.Value != null)
                    writer.WriteNumber("k", queryCollectionsForm.KOption.Value!.Value);
                else
                    writer.WriteNull("k");

            if (queryCollectionsForm.KRerankerOption.IsSet)
                if (queryCollectionsForm.KRerankerOption.Value != null)
                    writer.WriteNumber("k_reranker", queryCollectionsForm.KRerankerOption.Value!.Value);
                else
                    writer.WriteNull("k_reranker");

            if (queryCollectionsForm.ROption.IsSet)
                if (queryCollectionsForm.ROption.Value != null)
                    writer.WriteNumber("r", queryCollectionsForm.ROption.Value!.Value);
                else
                    writer.WriteNull("r");

            if (queryCollectionsForm.HybridOption.IsSet)
                if (queryCollectionsForm.HybridOption.Value != null)
                    writer.WriteBoolean("hybrid", queryCollectionsForm.HybridOption.Value!.Value);
                else
                    writer.WriteNull("hybrid");

            if (queryCollectionsForm.HybridBm25WeightOption.IsSet)
                if (queryCollectionsForm.HybridBm25WeightOption.Value != null)
                    writer.WriteNumber("hybrid_bm25_weight", queryCollectionsForm.HybridBm25WeightOption.Value!.Value);
                else
                    writer.WriteNull("hybrid_bm25_weight");
        }
    }
}
