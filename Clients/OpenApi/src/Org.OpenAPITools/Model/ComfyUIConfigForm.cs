// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComfyUIConfigForm
    /// </summary>
    public partial class ComfyUIConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComfyUIConfigForm" /> class.
        /// </summary>
        /// <param name="cOMFYUIBASEURL">cOMFYUIBASEURL</param>
        /// <param name="cOMFYUIAPIKEY">cOMFYUIAPIKEY</param>
        /// <param name="cOMFYUIWORKFLOW">cOMFYUIWORKFLOW</param>
        /// <param name="cOMFYUIWORKFLOWNODES">cOMFYUIWORKFLOWNODES</param>
        [JsonConstructor]
        public ComfyUIConfigForm(string cOMFYUIBASEURL, string cOMFYUIAPIKEY, string cOMFYUIWORKFLOW, List<Object> cOMFYUIWORKFLOWNODES)
        {
            COMFYUI_BASE_URL = cOMFYUIBASEURL;
            COMFYUI_API_KEY = cOMFYUIAPIKEY;
            COMFYUI_WORKFLOW = cOMFYUIWORKFLOW;
            COMFYUI_WORKFLOW_NODES = cOMFYUIWORKFLOWNODES;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets COMFYUI_BASE_URL
        /// </summary>
        [JsonPropertyName("COMFYUI_BASE_URL")]
        public string COMFYUI_BASE_URL { get; set; }

        /// <summary>
        /// Gets or Sets COMFYUI_API_KEY
        /// </summary>
        [JsonPropertyName("COMFYUI_API_KEY")]
        public string COMFYUI_API_KEY { get; set; }

        /// <summary>
        /// Gets or Sets COMFYUI_WORKFLOW
        /// </summary>
        [JsonPropertyName("COMFYUI_WORKFLOW")]
        public string COMFYUI_WORKFLOW { get; set; }

        /// <summary>
        /// Gets or Sets COMFYUI_WORKFLOW_NODES
        /// </summary>
        [JsonPropertyName("COMFYUI_WORKFLOW_NODES")]
        public List<Object> COMFYUI_WORKFLOW_NODES { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComfyUIConfigForm {\n");
            sb.Append("  COMFYUI_BASE_URL: ").Append(COMFYUI_BASE_URL).Append("\n");
            sb.Append("  COMFYUI_API_KEY: ").Append(COMFYUI_API_KEY).Append("\n");
            sb.Append("  COMFYUI_WORKFLOW: ").Append(COMFYUI_WORKFLOW).Append("\n");
            sb.Append("  COMFYUI_WORKFLOW_NODES: ").Append(COMFYUI_WORKFLOW_NODES).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComfyUIConfigForm" />
    /// </summary>
    public class ComfyUIConfigFormJsonConverter : JsonConverter<ComfyUIConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="ComfyUIConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ComfyUIConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> cOMFYUIBASEURL = default;
            Option<string?> cOMFYUIAPIKEY = default;
            Option<string?> cOMFYUIWORKFLOW = default;
            Option<List<Object>?> cOMFYUIWORKFLOWNODES = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "COMFYUI_BASE_URL":
                            cOMFYUIBASEURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "COMFYUI_API_KEY":
                            cOMFYUIAPIKEY = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "COMFYUI_WORKFLOW":
                            cOMFYUIWORKFLOW = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "COMFYUI_WORKFLOW_NODES":
                            cOMFYUIWORKFLOWNODES = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!cOMFYUIBASEURL.IsSet)
                throw new ArgumentException("Property is required for class ComfyUIConfigForm.", nameof(cOMFYUIBASEURL));

            if (!cOMFYUIAPIKEY.IsSet)
                throw new ArgumentException("Property is required for class ComfyUIConfigForm.", nameof(cOMFYUIAPIKEY));

            if (!cOMFYUIWORKFLOW.IsSet)
                throw new ArgumentException("Property is required for class ComfyUIConfigForm.", nameof(cOMFYUIWORKFLOW));

            if (!cOMFYUIWORKFLOWNODES.IsSet)
                throw new ArgumentException("Property is required for class ComfyUIConfigForm.", nameof(cOMFYUIWORKFLOWNODES));

            if (cOMFYUIBASEURL.IsSet && cOMFYUIBASEURL.Value == null)
                throw new ArgumentNullException(nameof(cOMFYUIBASEURL), "Property is not nullable for class ComfyUIConfigForm.");

            if (cOMFYUIAPIKEY.IsSet && cOMFYUIAPIKEY.Value == null)
                throw new ArgumentNullException(nameof(cOMFYUIAPIKEY), "Property is not nullable for class ComfyUIConfigForm.");

            if (cOMFYUIWORKFLOW.IsSet && cOMFYUIWORKFLOW.Value == null)
                throw new ArgumentNullException(nameof(cOMFYUIWORKFLOW), "Property is not nullable for class ComfyUIConfigForm.");

            if (cOMFYUIWORKFLOWNODES.IsSet && cOMFYUIWORKFLOWNODES.Value == null)
                throw new ArgumentNullException(nameof(cOMFYUIWORKFLOWNODES), "Property is not nullable for class ComfyUIConfigForm.");

            return new ComfyUIConfigForm(cOMFYUIBASEURL.Value!, cOMFYUIAPIKEY.Value!, cOMFYUIWORKFLOW.Value!, cOMFYUIWORKFLOWNODES.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ComfyUIConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="comfyUIConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ComfyUIConfigForm comfyUIConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, comfyUIConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ComfyUIConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="comfyUIConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ComfyUIConfigForm comfyUIConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (comfyUIConfigForm.COMFYUI_BASE_URL == null)
                throw new ArgumentNullException(nameof(comfyUIConfigForm.COMFYUI_BASE_URL), "Property is required for class ComfyUIConfigForm.");

            if (comfyUIConfigForm.COMFYUI_API_KEY == null)
                throw new ArgumentNullException(nameof(comfyUIConfigForm.COMFYUI_API_KEY), "Property is required for class ComfyUIConfigForm.");

            if (comfyUIConfigForm.COMFYUI_WORKFLOW == null)
                throw new ArgumentNullException(nameof(comfyUIConfigForm.COMFYUI_WORKFLOW), "Property is required for class ComfyUIConfigForm.");

            if (comfyUIConfigForm.COMFYUI_WORKFLOW_NODES == null)
                throw new ArgumentNullException(nameof(comfyUIConfigForm.COMFYUI_WORKFLOW_NODES), "Property is required for class ComfyUIConfigForm.");

            writer.WriteString("COMFYUI_BASE_URL", comfyUIConfigForm.COMFYUI_BASE_URL);

            writer.WriteString("COMFYUI_API_KEY", comfyUIConfigForm.COMFYUI_API_KEY);

            writer.WriteString("COMFYUI_WORKFLOW", comfyUIConfigForm.COMFYUI_WORKFLOW);

            writer.WritePropertyName("COMFYUI_WORKFLOW_NODES");
            JsonSerializer.Serialize(writer, comfyUIConfigForm.COMFYUI_WORKFLOW_NODES, jsonSerializerOptions);
        }
    }
}
