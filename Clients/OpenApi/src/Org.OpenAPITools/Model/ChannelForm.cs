// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChannelForm
    /// </summary>
    public partial class ChannelForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelForm" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="data">data</param>
        /// <param name="meta">meta</param>
        /// <param name="accessControl">accessControl</param>
        [JsonConstructor]
        public ChannelForm(string name, Option<string?> description = default, Option<Object?> data = default, Option<Object?> meta = default, Option<Object?> accessControl = default)
        {
            Name = name;
            DescriptionOption = description;
            DataOption = data;
            MetaOption = meta;
            AccessControlOption = accessControl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Meta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> MetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public Object? Meta { get { return this.MetaOption; } set { this.MetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccessControl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> AccessControlOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessControl
        /// </summary>
        [JsonPropertyName("access_control")]
        public Object? AccessControl { get { return this.AccessControlOption; } set { this.AccessControlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelForm {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  AccessControl: ").Append(AccessControl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelForm" />
    /// </summary>
    public class ChannelFormJsonConverter : JsonConverter<ChannelForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChannelForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChannelForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> description = default;
            Option<Object?> data = default;
            Option<Object?> meta = default;
            Option<Object?> accessControl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "meta":
                            meta = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "access_control":
                            accessControl = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ChannelForm.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ChannelForm.");

            return new ChannelForm(name.Value!, description, data, meta, accessControl);
        }

        /// <summary>
        /// Serializes a <see cref="ChannelForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChannelForm channelForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channelForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChannelForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChannelForm channelForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (channelForm.Name == null)
                throw new ArgumentNullException(nameof(channelForm.Name), "Property is required for class ChannelForm.");

            writer.WriteString("name", channelForm.Name);

            if (channelForm.DescriptionOption.IsSet)
                if (channelForm.DescriptionOption.Value != null)
                    writer.WriteString("description", channelForm.Description);
                else
                    writer.WriteNull("description");

            if (channelForm.DataOption.IsSet)
                if (channelForm.DataOption.Value != null)
                {
                    writer.WritePropertyName("data");
                    JsonSerializer.Serialize(writer, channelForm.Data, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("data");
            if (channelForm.MetaOption.IsSet)
                if (channelForm.MetaOption.Value != null)
                {
                    writer.WritePropertyName("meta");
                    JsonSerializer.Serialize(writer, channelForm.Meta, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("meta");
            if (channelForm.AccessControlOption.IsSet)
                if (channelForm.AccessControlOption.Value != null)
                {
                    writer.WritePropertyName("access_control");
                    JsonSerializer.Serialize(writer, channelForm.AccessControl, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("access_control");
        }
    }
}
