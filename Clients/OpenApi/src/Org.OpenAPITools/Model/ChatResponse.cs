// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChatResponse
    /// </summary>
    public partial class ChatResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatResponse" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="title">title</param>
        /// <param name="chat">chat</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="archived">archived</param>
        /// <param name="shareId">shareId</param>
        /// <param name="pinned">pinned</param>
        /// <param name="meta">meta</param>
        /// <param name="folderId">folderId</param>
        [JsonConstructor]
        public ChatResponse(string id, string userId, string title, Object chat, int updatedAt, int createdAt, bool archived, Option<string?> shareId = default, Option<bool?> pinned = default, Option<Object?> meta = default, Option<string?> folderId = default)
        {
            Id = id;
            UserId = userId;
            Title = title;
            Chat = chat;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            Archived = archived;
            ShareIdOption = shareId;
            PinnedOption = pinned;
            MetaOption = meta;
            FolderIdOption = folderId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Chat
        /// </summary>
        [JsonPropertyName("chat")]
        public Object Chat { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [JsonPropertyName("archived")]
        public bool Archived { get; set; }

        /// <summary>
        /// Used to track the state of ShareId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShareIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShareId
        /// </summary>
        [JsonPropertyName("share_id")]
        public string? ShareId { get { return this.ShareIdOption; } set { this.ShareIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pinned
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PinnedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pinned
        /// </summary>
        [JsonPropertyName("pinned")]
        public bool? Pinned { get { return this.PinnedOption; } set { this.PinnedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Meta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> MetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public Object? Meta { get { return this.MetaOption; } set { this.MetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of FolderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FolderIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [JsonPropertyName("folder_id")]
        public string? FolderId { get { return this.FolderIdOption; } set { this.FolderIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  ShareId: ").Append(ShareId).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChatResponse" />
    /// </summary>
    public class ChatResponseJsonConverter : JsonConverter<ChatResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChatResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChatResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> userId = default;
            Option<string?> title = default;
            Option<Object?> chat = default;
            Option<int?> updatedAt = default;
            Option<int?> createdAt = default;
            Option<bool?> archived = default;
            Option<string?> shareId = default;
            Option<bool?> pinned = default;
            Option<Object?> meta = default;
            Option<string?> folderId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "chat":
                            chat = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "updated_at":
                            updatedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "created_at":
                            createdAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "archived":
                            archived = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "share_id":
                            shareId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pinned":
                            pinned = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "meta":
                            meta = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "folder_id":
                            folderId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ChatResponse.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class ChatResponse.", nameof(userId));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class ChatResponse.", nameof(title));

            if (!chat.IsSet)
                throw new ArgumentException("Property is required for class ChatResponse.", nameof(chat));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class ChatResponse.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class ChatResponse.", nameof(createdAt));

            if (!archived.IsSet)
                throw new ArgumentException("Property is required for class ChatResponse.", nameof(archived));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ChatResponse.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class ChatResponse.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class ChatResponse.");

            if (chat.IsSet && chat.Value == null)
                throw new ArgumentNullException(nameof(chat), "Property is not nullable for class ChatResponse.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class ChatResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class ChatResponse.");

            if (archived.IsSet && archived.Value == null)
                throw new ArgumentNullException(nameof(archived), "Property is not nullable for class ChatResponse.");

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class ChatResponse.");

            return new ChatResponse(id.Value!, userId.Value!, title.Value!, chat.Value!, updatedAt.Value!.Value!, createdAt.Value!.Value!, archived.Value!.Value!, shareId, pinned, meta, folderId);
        }

        /// <summary>
        /// Serializes a <see cref="ChatResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChatResponse chatResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, chatResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChatResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChatResponse chatResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (chatResponse.Id == null)
                throw new ArgumentNullException(nameof(chatResponse.Id), "Property is required for class ChatResponse.");

            if (chatResponse.UserId == null)
                throw new ArgumentNullException(nameof(chatResponse.UserId), "Property is required for class ChatResponse.");

            if (chatResponse.Title == null)
                throw new ArgumentNullException(nameof(chatResponse.Title), "Property is required for class ChatResponse.");

            if (chatResponse.Chat == null)
                throw new ArgumentNullException(nameof(chatResponse.Chat), "Property is required for class ChatResponse.");

            if (chatResponse.MetaOption.IsSet && chatResponse.Meta == null)
                throw new ArgumentNullException(nameof(chatResponse.Meta), "Property is required for class ChatResponse.");

            writer.WriteString("id", chatResponse.Id);

            writer.WriteString("user_id", chatResponse.UserId);

            writer.WriteString("title", chatResponse.Title);

            writer.WritePropertyName("chat");
            JsonSerializer.Serialize(writer, chatResponse.Chat, jsonSerializerOptions);
            writer.WriteNumber("updated_at", chatResponse.UpdatedAt);

            writer.WriteNumber("created_at", chatResponse.CreatedAt);

            writer.WriteBoolean("archived", chatResponse.Archived);

            if (chatResponse.ShareIdOption.IsSet)
                if (chatResponse.ShareIdOption.Value != null)
                    writer.WriteString("share_id", chatResponse.ShareId);
                else
                    writer.WriteNull("share_id");

            if (chatResponse.PinnedOption.IsSet)
                if (chatResponse.PinnedOption.Value != null)
                    writer.WriteBoolean("pinned", chatResponse.PinnedOption.Value!.Value);
                else
                    writer.WriteNull("pinned");

            if (chatResponse.MetaOption.IsSet)
            {
                writer.WritePropertyName("meta");
                JsonSerializer.Serialize(writer, chatResponse.Meta, jsonSerializerOptions);
            }
            if (chatResponse.FolderIdOption.IsSet)
                if (chatResponse.FolderIdOption.Value != null)
                    writer.WriteString("folder_id", chatResponse.FolderId);
                else
                    writer.WriteNull("folder_id");
        }
    }
}
