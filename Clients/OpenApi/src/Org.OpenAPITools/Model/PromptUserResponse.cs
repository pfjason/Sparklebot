// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PromptUserResponse
    /// </summary>
    public partial class PromptUserResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PromptUserResponse" /> class.
        /// </summary>
        /// <param name="command">command</param>
        /// <param name="userId">userId</param>
        /// <param name="title">title</param>
        /// <param name="content">content</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="accessControl">accessControl</param>
        /// <param name="user">user</param>
        [JsonConstructor]
        public PromptUserResponse(string command, string userId, string title, string content, int timestamp, Option<Object?> accessControl = default, Option<OpenWebuiModelsUsersUserResponse?> user = default)
        {
            Command = command;
            UserId = userId;
            Title = title;
            Content = content;
            Timestamp = timestamp;
            AccessControlOption = accessControl;
            UserOption = user;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [JsonPropertyName("command")]
        public string Command { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public int Timestamp { get; set; }

        /// <summary>
        /// Used to track the state of AccessControl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> AccessControlOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessControl
        /// </summary>
        [JsonPropertyName("access_control")]
        public Object? AccessControl { get { return this.AccessControlOption; } set { this.AccessControlOption = new(value); } }

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OpenWebuiModelsUsersUserResponse?> UserOption { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public OpenWebuiModelsUsersUserResponse? User { get { return this.UserOption; } set { this.UserOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PromptUserResponse {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AccessControl: ").Append(AccessControl).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PromptUserResponse" />
    /// </summary>
    public class PromptUserResponseJsonConverter : JsonConverter<PromptUserResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PromptUserResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PromptUserResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> command = default;
            Option<string?> userId = default;
            Option<string?> title = default;
            Option<string?> content = default;
            Option<int?> timestamp = default;
            Option<Object?> accessControl = default;
            Option<OpenWebuiModelsUsersUserResponse?> user = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "command":
                            command = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timestamp":
                            timestamp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "access_control":
                            accessControl = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "user":
                            user = new Option<OpenWebuiModelsUsersUserResponse?>(JsonSerializer.Deserialize<OpenWebuiModelsUsersUserResponse>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!command.IsSet)
                throw new ArgumentException("Property is required for class PromptUserResponse.", nameof(command));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class PromptUserResponse.", nameof(userId));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class PromptUserResponse.", nameof(title));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class PromptUserResponse.", nameof(content));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class PromptUserResponse.", nameof(timestamp));

            if (command.IsSet && command.Value == null)
                throw new ArgumentNullException(nameof(command), "Property is not nullable for class PromptUserResponse.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class PromptUserResponse.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class PromptUserResponse.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class PromptUserResponse.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class PromptUserResponse.");

            return new PromptUserResponse(command.Value!, userId.Value!, title.Value!, content.Value!, timestamp.Value!.Value!, accessControl, user);
        }

        /// <summary>
        /// Serializes a <see cref="PromptUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="promptUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PromptUserResponse promptUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, promptUserResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PromptUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="promptUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PromptUserResponse promptUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (promptUserResponse.Command == null)
                throw new ArgumentNullException(nameof(promptUserResponse.Command), "Property is required for class PromptUserResponse.");

            if (promptUserResponse.UserId == null)
                throw new ArgumentNullException(nameof(promptUserResponse.UserId), "Property is required for class PromptUserResponse.");

            if (promptUserResponse.Title == null)
                throw new ArgumentNullException(nameof(promptUserResponse.Title), "Property is required for class PromptUserResponse.");

            if (promptUserResponse.Content == null)
                throw new ArgumentNullException(nameof(promptUserResponse.Content), "Property is required for class PromptUserResponse.");

            writer.WriteString("command", promptUserResponse.Command);

            writer.WriteString("user_id", promptUserResponse.UserId);

            writer.WriteString("title", promptUserResponse.Title);

            writer.WriteString("content", promptUserResponse.Content);

            writer.WriteNumber("timestamp", promptUserResponse.Timestamp);

            if (promptUserResponse.AccessControlOption.IsSet)
                if (promptUserResponse.AccessControlOption.Value != null)
                {
                    writer.WritePropertyName("access_control");
                    JsonSerializer.Serialize(writer, promptUserResponse.AccessControl, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("access_control");
            if (promptUserResponse.UserOption.IsSet)
                if (promptUserResponse.UserOption.Value != null)
                {
                    writer.WritePropertyName("user");
                    JsonSerializer.Serialize(writer, promptUserResponse.User, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("user");
        }
    }
}
