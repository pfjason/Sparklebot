// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TTSConfigForm
    /// </summary>
    public partial class TTSConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TTSConfigForm" /> class.
        /// </summary>
        /// <param name="oPENAIAPIBASEURL">oPENAIAPIBASEURL</param>
        /// <param name="oPENAIAPIKEY">oPENAIAPIKEY</param>
        /// <param name="aPIKEY">aPIKEY</param>
        /// <param name="eNGINE">eNGINE</param>
        /// <param name="mODEL">mODEL</param>
        /// <param name="vOICE">vOICE</param>
        /// <param name="sPLITON">sPLITON</param>
        /// <param name="aZURESPEECHREGION">aZURESPEECHREGION</param>
        /// <param name="aZURESPEECHBASEURL">aZURESPEECHBASEURL</param>
        /// <param name="aZURESPEECHOUTPUTFORMAT">aZURESPEECHOUTPUTFORMAT</param>
        [JsonConstructor]
        public TTSConfigForm(string oPENAIAPIBASEURL, string oPENAIAPIKEY, string aPIKEY, string eNGINE, string mODEL, string vOICE, string sPLITON, string aZURESPEECHREGION, string aZURESPEECHBASEURL, string aZURESPEECHOUTPUTFORMAT)
        {
            OPENAI_API_BASE_URL = oPENAIAPIBASEURL;
            OPENAI_API_KEY = oPENAIAPIKEY;
            API_KEY = aPIKEY;
            ENGINE = eNGINE;
            MODEL = mODEL;
            VOICE = vOICE;
            SPLIT_ON = sPLITON;
            AZURE_SPEECH_REGION = aZURESPEECHREGION;
            AZURE_SPEECH_BASE_URL = aZURESPEECHBASEURL;
            AZURE_SPEECH_OUTPUT_FORMAT = aZURESPEECHOUTPUTFORMAT;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OPENAI_API_BASE_URL
        /// </summary>
        [JsonPropertyName("OPENAI_API_BASE_URL")]
        public string OPENAI_API_BASE_URL { get; set; }

        /// <summary>
        /// Gets or Sets OPENAI_API_KEY
        /// </summary>
        [JsonPropertyName("OPENAI_API_KEY")]
        public string OPENAI_API_KEY { get; set; }

        /// <summary>
        /// Gets or Sets API_KEY
        /// </summary>
        [JsonPropertyName("API_KEY")]
        public string API_KEY { get; set; }

        /// <summary>
        /// Gets or Sets ENGINE
        /// </summary>
        [JsonPropertyName("ENGINE")]
        public string ENGINE { get; set; }

        /// <summary>
        /// Gets or Sets MODEL
        /// </summary>
        [JsonPropertyName("MODEL")]
        public string MODEL { get; set; }

        /// <summary>
        /// Gets or Sets VOICE
        /// </summary>
        [JsonPropertyName("VOICE")]
        public string VOICE { get; set; }

        /// <summary>
        /// Gets or Sets SPLIT_ON
        /// </summary>
        [JsonPropertyName("SPLIT_ON")]
        public string SPLIT_ON { get; set; }

        /// <summary>
        /// Gets or Sets AZURE_SPEECH_REGION
        /// </summary>
        [JsonPropertyName("AZURE_SPEECH_REGION")]
        public string AZURE_SPEECH_REGION { get; set; }

        /// <summary>
        /// Gets or Sets AZURE_SPEECH_BASE_URL
        /// </summary>
        [JsonPropertyName("AZURE_SPEECH_BASE_URL")]
        public string AZURE_SPEECH_BASE_URL { get; set; }

        /// <summary>
        /// Gets or Sets AZURE_SPEECH_OUTPUT_FORMAT
        /// </summary>
        [JsonPropertyName("AZURE_SPEECH_OUTPUT_FORMAT")]
        public string AZURE_SPEECH_OUTPUT_FORMAT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TTSConfigForm {\n");
            sb.Append("  OPENAI_API_BASE_URL: ").Append(OPENAI_API_BASE_URL).Append("\n");
            sb.Append("  OPENAI_API_KEY: ").Append(OPENAI_API_KEY).Append("\n");
            sb.Append("  API_KEY: ").Append(API_KEY).Append("\n");
            sb.Append("  ENGINE: ").Append(ENGINE).Append("\n");
            sb.Append("  MODEL: ").Append(MODEL).Append("\n");
            sb.Append("  VOICE: ").Append(VOICE).Append("\n");
            sb.Append("  SPLIT_ON: ").Append(SPLIT_ON).Append("\n");
            sb.Append("  AZURE_SPEECH_REGION: ").Append(AZURE_SPEECH_REGION).Append("\n");
            sb.Append("  AZURE_SPEECH_BASE_URL: ").Append(AZURE_SPEECH_BASE_URL).Append("\n");
            sb.Append("  AZURE_SPEECH_OUTPUT_FORMAT: ").Append(AZURE_SPEECH_OUTPUT_FORMAT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TTSConfigForm" />
    /// </summary>
    public class TTSConfigFormJsonConverter : JsonConverter<TTSConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="TTSConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TTSConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> oPENAIAPIBASEURL = default;
            Option<string?> oPENAIAPIKEY = default;
            Option<string?> aPIKEY = default;
            Option<string?> eNGINE = default;
            Option<string?> mODEL = default;
            Option<string?> vOICE = default;
            Option<string?> sPLITON = default;
            Option<string?> aZURESPEECHREGION = default;
            Option<string?> aZURESPEECHBASEURL = default;
            Option<string?> aZURESPEECHOUTPUTFORMAT = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "OPENAI_API_BASE_URL":
                            oPENAIAPIBASEURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "OPENAI_API_KEY":
                            oPENAIAPIKEY = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "API_KEY":
                            aPIKEY = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ENGINE":
                            eNGINE = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "MODEL":
                            mODEL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "VOICE":
                            vOICE = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "SPLIT_ON":
                            sPLITON = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AZURE_SPEECH_REGION":
                            aZURESPEECHREGION = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AZURE_SPEECH_BASE_URL":
                            aZURESPEECHBASEURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AZURE_SPEECH_OUTPUT_FORMAT":
                            aZURESPEECHOUTPUTFORMAT = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!oPENAIAPIBASEURL.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(oPENAIAPIBASEURL));

            if (!oPENAIAPIKEY.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(oPENAIAPIKEY));

            if (!aPIKEY.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(aPIKEY));

            if (!eNGINE.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(eNGINE));

            if (!mODEL.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(mODEL));

            if (!vOICE.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(vOICE));

            if (!sPLITON.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(sPLITON));

            if (!aZURESPEECHREGION.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(aZURESPEECHREGION));

            if (!aZURESPEECHBASEURL.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(aZURESPEECHBASEURL));

            if (!aZURESPEECHOUTPUTFORMAT.IsSet)
                throw new ArgumentException("Property is required for class TTSConfigForm.", nameof(aZURESPEECHOUTPUTFORMAT));

            if (oPENAIAPIBASEURL.IsSet && oPENAIAPIBASEURL.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPIBASEURL), "Property is not nullable for class TTSConfigForm.");

            if (oPENAIAPIKEY.IsSet && oPENAIAPIKEY.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPIKEY), "Property is not nullable for class TTSConfigForm.");

            if (aPIKEY.IsSet && aPIKEY.Value == null)
                throw new ArgumentNullException(nameof(aPIKEY), "Property is not nullable for class TTSConfigForm.");

            if (eNGINE.IsSet && eNGINE.Value == null)
                throw new ArgumentNullException(nameof(eNGINE), "Property is not nullable for class TTSConfigForm.");

            if (mODEL.IsSet && mODEL.Value == null)
                throw new ArgumentNullException(nameof(mODEL), "Property is not nullable for class TTSConfigForm.");

            if (vOICE.IsSet && vOICE.Value == null)
                throw new ArgumentNullException(nameof(vOICE), "Property is not nullable for class TTSConfigForm.");

            if (sPLITON.IsSet && sPLITON.Value == null)
                throw new ArgumentNullException(nameof(sPLITON), "Property is not nullable for class TTSConfigForm.");

            if (aZURESPEECHREGION.IsSet && aZURESPEECHREGION.Value == null)
                throw new ArgumentNullException(nameof(aZURESPEECHREGION), "Property is not nullable for class TTSConfigForm.");

            if (aZURESPEECHBASEURL.IsSet && aZURESPEECHBASEURL.Value == null)
                throw new ArgumentNullException(nameof(aZURESPEECHBASEURL), "Property is not nullable for class TTSConfigForm.");

            if (aZURESPEECHOUTPUTFORMAT.IsSet && aZURESPEECHOUTPUTFORMAT.Value == null)
                throw new ArgumentNullException(nameof(aZURESPEECHOUTPUTFORMAT), "Property is not nullable for class TTSConfigForm.");

            return new TTSConfigForm(oPENAIAPIBASEURL.Value!, oPENAIAPIKEY.Value!, aPIKEY.Value!, eNGINE.Value!, mODEL.Value!, vOICE.Value!, sPLITON.Value!, aZURESPEECHREGION.Value!, aZURESPEECHBASEURL.Value!, aZURESPEECHOUTPUTFORMAT.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TTSConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tTSConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TTSConfigForm tTSConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tTSConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TTSConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tTSConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TTSConfigForm tTSConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tTSConfigForm.OPENAI_API_BASE_URL == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.OPENAI_API_BASE_URL), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.OPENAI_API_KEY == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.OPENAI_API_KEY), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.API_KEY == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.API_KEY), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.ENGINE == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.ENGINE), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.MODEL == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.MODEL), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.VOICE == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.VOICE), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.SPLIT_ON == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.SPLIT_ON), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.AZURE_SPEECH_REGION == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.AZURE_SPEECH_REGION), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.AZURE_SPEECH_BASE_URL == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.AZURE_SPEECH_BASE_URL), "Property is required for class TTSConfigForm.");

            if (tTSConfigForm.AZURE_SPEECH_OUTPUT_FORMAT == null)
                throw new ArgumentNullException(nameof(tTSConfigForm.AZURE_SPEECH_OUTPUT_FORMAT), "Property is required for class TTSConfigForm.");

            writer.WriteString("OPENAI_API_BASE_URL", tTSConfigForm.OPENAI_API_BASE_URL);

            writer.WriteString("OPENAI_API_KEY", tTSConfigForm.OPENAI_API_KEY);

            writer.WriteString("API_KEY", tTSConfigForm.API_KEY);

            writer.WriteString("ENGINE", tTSConfigForm.ENGINE);

            writer.WriteString("MODEL", tTSConfigForm.MODEL);

            writer.WriteString("VOICE", tTSConfigForm.VOICE);

            writer.WriteString("SPLIT_ON", tTSConfigForm.SPLIT_ON);

            writer.WriteString("AZURE_SPEECH_REGION", tTSConfigForm.AZURE_SPEECH_REGION);

            writer.WriteString("AZURE_SPEECH_BASE_URL", tTSConfigForm.AZURE_SPEECH_BASE_URL);

            writer.WriteString("AZURE_SPEECH_OUTPUT_FORMAT", tTSConfigForm.AZURE_SPEECH_OUTPUT_FORMAT);
        }
    }
}
