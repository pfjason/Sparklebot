// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OpenWebuiRoutersImagesOpenAIConfigForm
    /// </summary>
    public partial class OpenWebuiRoutersImagesOpenAIConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenWebuiRoutersImagesOpenAIConfigForm" /> class.
        /// </summary>
        /// <param name="oPENAIAPIBASEURL">oPENAIAPIBASEURL</param>
        /// <param name="oPENAIAPIKEY">oPENAIAPIKEY</param>
        [JsonConstructor]
        public OpenWebuiRoutersImagesOpenAIConfigForm(string oPENAIAPIBASEURL, string oPENAIAPIKEY)
        {
            OPENAI_API_BASE_URL = oPENAIAPIBASEURL;
            OPENAI_API_KEY = oPENAIAPIKEY;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OPENAI_API_BASE_URL
        /// </summary>
        [JsonPropertyName("OPENAI_API_BASE_URL")]
        public string OPENAI_API_BASE_URL { get; set; }

        /// <summary>
        /// Gets or Sets OPENAI_API_KEY
        /// </summary>
        [JsonPropertyName("OPENAI_API_KEY")]
        public string OPENAI_API_KEY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenWebuiRoutersImagesOpenAIConfigForm {\n");
            sb.Append("  OPENAI_API_BASE_URL: ").Append(OPENAI_API_BASE_URL).Append("\n");
            sb.Append("  OPENAI_API_KEY: ").Append(OPENAI_API_KEY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OpenWebuiRoutersImagesOpenAIConfigForm" />
    /// </summary>
    public class OpenWebuiRoutersImagesOpenAIConfigFormJsonConverter : JsonConverter<OpenWebuiRoutersImagesOpenAIConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="OpenWebuiRoutersImagesOpenAIConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OpenWebuiRoutersImagesOpenAIConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> oPENAIAPIBASEURL = default;
            Option<string?> oPENAIAPIKEY = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "OPENAI_API_BASE_URL":
                            oPENAIAPIBASEURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "OPENAI_API_KEY":
                            oPENAIAPIKEY = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!oPENAIAPIBASEURL.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesOpenAIConfigForm.", nameof(oPENAIAPIBASEURL));

            if (!oPENAIAPIKEY.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesOpenAIConfigForm.", nameof(oPENAIAPIKEY));

            if (oPENAIAPIBASEURL.IsSet && oPENAIAPIBASEURL.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPIBASEURL), "Property is not nullable for class OpenWebuiRoutersImagesOpenAIConfigForm.");

            if (oPENAIAPIKEY.IsSet && oPENAIAPIKEY.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPIKEY), "Property is not nullable for class OpenWebuiRoutersImagesOpenAIConfigForm.");

            return new OpenWebuiRoutersImagesOpenAIConfigForm(oPENAIAPIBASEURL.Value!, oPENAIAPIKEY.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="OpenWebuiRoutersImagesOpenAIConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersImagesOpenAIConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OpenWebuiRoutersImagesOpenAIConfigForm openWebuiRoutersImagesOpenAIConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, openWebuiRoutersImagesOpenAIConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OpenWebuiRoutersImagesOpenAIConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersImagesOpenAIConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OpenWebuiRoutersImagesOpenAIConfigForm openWebuiRoutersImagesOpenAIConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (openWebuiRoutersImagesOpenAIConfigForm.OPENAI_API_BASE_URL == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersImagesOpenAIConfigForm.OPENAI_API_BASE_URL), "Property is required for class OpenWebuiRoutersImagesOpenAIConfigForm.");

            if (openWebuiRoutersImagesOpenAIConfigForm.OPENAI_API_KEY == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersImagesOpenAIConfigForm.OPENAI_API_KEY), "Property is required for class OpenWebuiRoutersImagesOpenAIConfigForm.");

            writer.WriteString("OPENAI_API_BASE_URL", openWebuiRoutersImagesOpenAIConfigForm.OPENAI_API_BASE_URL);

            writer.WriteString("OPENAI_API_KEY", openWebuiRoutersImagesOpenAIConfigForm.OPENAI_API_KEY);
        }
    }
}
