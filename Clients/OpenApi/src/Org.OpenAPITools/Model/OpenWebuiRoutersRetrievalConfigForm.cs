// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OpenWebuiRoutersRetrievalConfigForm
    /// </summary>
    public partial class OpenWebuiRoutersRetrievalConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenWebuiRoutersRetrievalConfigForm" /> class.
        /// </summary>
        /// <param name="rAGTEMPLATE">rAGTEMPLATE</param>
        /// <param name="tOPK">tOPK</param>
        /// <param name="bYPASSEMBEDDINGANDRETRIEVAL">bYPASSEMBEDDINGANDRETRIEVAL</param>
        /// <param name="rAGFULLCONTEXT">rAGFULLCONTEXT</param>
        /// <param name="eNABLERAGHYBRIDSEARCH">eNABLERAGHYBRIDSEARCH</param>
        /// <param name="tOPKRERANKER">tOPKRERANKER</param>
        /// <param name="rELEVANCETHRESHOLD">rELEVANCETHRESHOLD</param>
        /// <param name="hYBRIDBM25WEIGHT">hYBRIDBM25WEIGHT</param>
        /// <param name="cONTENTEXTRACTIONENGINE">cONTENTEXTRACTIONENGINE</param>
        /// <param name="pDFEXTRACTIMAGES">pDFEXTRACTIMAGES</param>
        /// <param name="dATALABMARKERAPIKEY">dATALABMARKERAPIKEY</param>
        /// <param name="dATALABMARKERLANGS">dATALABMARKERLANGS</param>
        /// <param name="dATALABMARKERSKIPCACHE">dATALABMARKERSKIPCACHE</param>
        /// <param name="dATALABMARKERFORCEOCR">dATALABMARKERFORCEOCR</param>
        /// <param name="dATALABMARKERPAGINATE">dATALABMARKERPAGINATE</param>
        /// <param name="dATALABMARKERSTRIPEXISTINGOCR">dATALABMARKERSTRIPEXISTINGOCR</param>
        /// <param name="dATALABMARKERDISABLEIMAGEEXTRACTION">dATALABMARKERDISABLEIMAGEEXTRACTION</param>
        /// <param name="dATALABMARKERUSELLM">dATALABMARKERUSELLM</param>
        /// <param name="dATALABMARKEROUTPUTFORMAT">dATALABMARKEROUTPUTFORMAT</param>
        /// <param name="eXTERNALDOCUMENTLOADERURL">eXTERNALDOCUMENTLOADERURL</param>
        /// <param name="eXTERNALDOCUMENTLOADERAPIKEY">eXTERNALDOCUMENTLOADERAPIKEY</param>
        /// <param name="tIKASERVERURL">tIKASERVERURL</param>
        /// <param name="dOCLINGSERVERURL">dOCLINGSERVERURL</param>
        /// <param name="dOCLINGOCRENGINE">dOCLINGOCRENGINE</param>
        /// <param name="dOCLINGOCRLANG">dOCLINGOCRLANG</param>
        /// <param name="dOCLINGDOPICTUREDESCRIPTION">dOCLINGDOPICTUREDESCRIPTION</param>
        /// <param name="dOCLINGPICTUREDESCRIPTIONMODE">dOCLINGPICTUREDESCRIPTIONMODE</param>
        /// <param name="dOCLINGPICTUREDESCRIPTIONLOCAL">dOCLINGPICTUREDESCRIPTIONLOCAL</param>
        /// <param name="dOCLINGPICTUREDESCRIPTIONAPI">dOCLINGPICTUREDESCRIPTIONAPI</param>
        /// <param name="dOCUMENTINTELLIGENCEENDPOINT">dOCUMENTINTELLIGENCEENDPOINT</param>
        /// <param name="dOCUMENTINTELLIGENCEKEY">dOCUMENTINTELLIGENCEKEY</param>
        /// <param name="mISTRALOCRAPIKEY">mISTRALOCRAPIKEY</param>
        /// <param name="rAGRERANKINGMODEL">rAGRERANKINGMODEL</param>
        /// <param name="rAGRERANKINGENGINE">rAGRERANKINGENGINE</param>
        /// <param name="rAGEXTERNALRERANKERURL">rAGEXTERNALRERANKERURL</param>
        /// <param name="rAGEXTERNALRERANKERAPIKEY">rAGEXTERNALRERANKERAPIKEY</param>
        /// <param name="tEXTSPLITTER">tEXTSPLITTER</param>
        /// <param name="cHUNKSIZE">cHUNKSIZE</param>
        /// <param name="cHUNKOVERLAP">cHUNKOVERLAP</param>
        /// <param name="fILEMAXSIZE">fILEMAXSIZE</param>
        /// <param name="fILEMAXCOUNT">fILEMAXCOUNT</param>
        /// <param name="fILEIMAGECOMPRESSIONWIDTH">fILEIMAGECOMPRESSIONWIDTH</param>
        /// <param name="fILEIMAGECOMPRESSIONHEIGHT">fILEIMAGECOMPRESSIONHEIGHT</param>
        /// <param name="aLLOWEDFILEEXTENSIONS">aLLOWEDFILEEXTENSIONS</param>
        /// <param name="eNABLEGOOGLEDRIVEINTEGRATION">eNABLEGOOGLEDRIVEINTEGRATION</param>
        /// <param name="eNABLEONEDRIVEINTEGRATION">eNABLEONEDRIVEINTEGRATION</param>
        /// <param name="web">web</param>
        [JsonConstructor]
        public OpenWebuiRoutersRetrievalConfigForm(Option<string?> rAGTEMPLATE = default, Option<int?> tOPK = default, Option<bool?> bYPASSEMBEDDINGANDRETRIEVAL = default, Option<bool?> rAGFULLCONTEXT = default, Option<bool?> eNABLERAGHYBRIDSEARCH = default, Option<int?> tOPKRERANKER = default, Option<decimal?> rELEVANCETHRESHOLD = default, Option<decimal?> hYBRIDBM25WEIGHT = default, Option<string?> cONTENTEXTRACTIONENGINE = default, Option<bool?> pDFEXTRACTIMAGES = default, Option<string?> dATALABMARKERAPIKEY = default, Option<string?> dATALABMARKERLANGS = default, Option<bool?> dATALABMARKERSKIPCACHE = default, Option<bool?> dATALABMARKERFORCEOCR = default, Option<bool?> dATALABMARKERPAGINATE = default, Option<bool?> dATALABMARKERSTRIPEXISTINGOCR = default, Option<bool?> dATALABMARKERDISABLEIMAGEEXTRACTION = default, Option<bool?> dATALABMARKERUSELLM = default, Option<string?> dATALABMARKEROUTPUTFORMAT = default, Option<string?> eXTERNALDOCUMENTLOADERURL = default, Option<string?> eXTERNALDOCUMENTLOADERAPIKEY = default, Option<string?> tIKASERVERURL = default, Option<string?> dOCLINGSERVERURL = default, Option<string?> dOCLINGOCRENGINE = default, Option<string?> dOCLINGOCRLANG = default, Option<bool?> dOCLINGDOPICTUREDESCRIPTION = default, Option<string?> dOCLINGPICTUREDESCRIPTIONMODE = default, Option<Object?> dOCLINGPICTUREDESCRIPTIONLOCAL = default, Option<Object?> dOCLINGPICTUREDESCRIPTIONAPI = default, Option<string?> dOCUMENTINTELLIGENCEENDPOINT = default, Option<string?> dOCUMENTINTELLIGENCEKEY = default, Option<string?> mISTRALOCRAPIKEY = default, Option<string?> rAGRERANKINGMODEL = default, Option<string?> rAGRERANKINGENGINE = default, Option<string?> rAGEXTERNALRERANKERURL = default, Option<string?> rAGEXTERNALRERANKERAPIKEY = default, Option<string?> tEXTSPLITTER = default, Option<int?> cHUNKSIZE = default, Option<int?> cHUNKOVERLAP = default, Option<int?> fILEMAXSIZE = default, Option<int?> fILEMAXCOUNT = default, Option<int?> fILEIMAGECOMPRESSIONWIDTH = default, Option<int?> fILEIMAGECOMPRESSIONHEIGHT = default, Option<List<string>?> aLLOWEDFILEEXTENSIONS = default, Option<bool?> eNABLEGOOGLEDRIVEINTEGRATION = default, Option<bool?> eNABLEONEDRIVEINTEGRATION = default, Option<WebConfig?> web = default)
        {
            RAG_TEMPLATEOption = rAGTEMPLATE;
            TOP_KOption = tOPK;
            BYPASS_EMBEDDING_AND_RETRIEVALOption = bYPASSEMBEDDINGANDRETRIEVAL;
            RAG_FULL_CONTEXTOption = rAGFULLCONTEXT;
            ENABLE_RAG_HYBRID_SEARCHOption = eNABLERAGHYBRIDSEARCH;
            TOP_K_RERANKEROption = tOPKRERANKER;
            RELEVANCE_THRESHOLDOption = rELEVANCETHRESHOLD;
            HYBRIDBM25WEIGHTOption = hYBRIDBM25WEIGHT;
            CONTENT_EXTRACTION_ENGINEOption = cONTENTEXTRACTIONENGINE;
            PDF_EXTRACT_IMAGESOption = pDFEXTRACTIMAGES;
            DATALAB_MARKER_API_KEYOption = dATALABMARKERAPIKEY;
            DATALAB_MARKER_LANGSOption = dATALABMARKERLANGS;
            DATALAB_MARKER_SKIP_CACHEOption = dATALABMARKERSKIPCACHE;
            DATALAB_MARKER_FORCE_OCROption = dATALABMARKERFORCEOCR;
            DATALAB_MARKER_PAGINATEOption = dATALABMARKERPAGINATE;
            DATALAB_MARKER_STRIP_EXISTING_OCROption = dATALABMARKERSTRIPEXISTINGOCR;
            DATALAB_MARKER_DISABLE_IMAGE_EXTRACTIONOption = dATALABMARKERDISABLEIMAGEEXTRACTION;
            DATALAB_MARKER_USE_LLMOption = dATALABMARKERUSELLM;
            DATALAB_MARKER_OUTPUT_FORMATOption = dATALABMARKEROUTPUTFORMAT;
            EXTERNAL_DOCUMENT_LOADER_URLOption = eXTERNALDOCUMENTLOADERURL;
            EXTERNAL_DOCUMENT_LOADER_API_KEYOption = eXTERNALDOCUMENTLOADERAPIKEY;
            TIKA_SERVER_URLOption = tIKASERVERURL;
            DOCLING_SERVER_URLOption = dOCLINGSERVERURL;
            DOCLING_OCR_ENGINEOption = dOCLINGOCRENGINE;
            DOCLING_OCR_LANGOption = dOCLINGOCRLANG;
            DOCLING_DO_PICTURE_DESCRIPTIONOption = dOCLINGDOPICTUREDESCRIPTION;
            DOCLING_PICTURE_DESCRIPTION_MODEOption = dOCLINGPICTUREDESCRIPTIONMODE;
            DOCLING_PICTURE_DESCRIPTION_LOCALOption = dOCLINGPICTUREDESCRIPTIONLOCAL;
            DOCLING_PICTURE_DESCRIPTION_APIOption = dOCLINGPICTUREDESCRIPTIONAPI;
            DOCUMENT_INTELLIGENCE_ENDPOINTOption = dOCUMENTINTELLIGENCEENDPOINT;
            DOCUMENT_INTELLIGENCE_KEYOption = dOCUMENTINTELLIGENCEKEY;
            MISTRAL_OCR_API_KEYOption = mISTRALOCRAPIKEY;
            RAG_RERANKING_MODELOption = rAGRERANKINGMODEL;
            RAG_RERANKING_ENGINEOption = rAGRERANKINGENGINE;
            RAG_EXTERNAL_RERANKER_URLOption = rAGEXTERNALRERANKERURL;
            RAG_EXTERNAL_RERANKER_API_KEYOption = rAGEXTERNALRERANKERAPIKEY;
            TEXT_SPLITTEROption = tEXTSPLITTER;
            CHUNK_SIZEOption = cHUNKSIZE;
            CHUNK_OVERLAPOption = cHUNKOVERLAP;
            FILE_MAX_SIZEOption = fILEMAXSIZE;
            FILE_MAX_COUNTOption = fILEMAXCOUNT;
            FILE_IMAGE_COMPRESSION_WIDTHOption = fILEIMAGECOMPRESSIONWIDTH;
            FILE_IMAGE_COMPRESSION_HEIGHTOption = fILEIMAGECOMPRESSIONHEIGHT;
            ALLOWED_FILE_EXTENSIONSOption = aLLOWEDFILEEXTENSIONS;
            ENABLE_GOOGLE_DRIVE_INTEGRATIONOption = eNABLEGOOGLEDRIVEINTEGRATION;
            ENABLE_ONEDRIVE_INTEGRATIONOption = eNABLEONEDRIVEINTEGRATION;
            WebOption = web;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of RAG_TEMPLATE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RAG_TEMPLATEOption { get; private set; }

        /// <summary>
        /// Gets or Sets RAG_TEMPLATE
        /// </summary>
        [JsonPropertyName("RAG_TEMPLATE")]
        public string? RAG_TEMPLATE { get { return this.RAG_TEMPLATEOption; } set { this.RAG_TEMPLATEOption = new(value); } }

        /// <summary>
        /// Used to track the state of TOP_K
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TOP_KOption { get; private set; }

        /// <summary>
        /// Gets or Sets TOP_K
        /// </summary>
        [JsonPropertyName("TOP_K")]
        public int? TOP_K { get { return this.TOP_KOption; } set { this.TOP_KOption = new(value); } }

        /// <summary>
        /// Used to track the state of BYPASS_EMBEDDING_AND_RETRIEVAL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BYPASS_EMBEDDING_AND_RETRIEVALOption { get; private set; }

        /// <summary>
        /// Gets or Sets BYPASS_EMBEDDING_AND_RETRIEVAL
        /// </summary>
        [JsonPropertyName("BYPASS_EMBEDDING_AND_RETRIEVAL")]
        public bool? BYPASS_EMBEDDING_AND_RETRIEVAL { get { return this.BYPASS_EMBEDDING_AND_RETRIEVALOption; } set { this.BYPASS_EMBEDDING_AND_RETRIEVALOption = new(value); } }

        /// <summary>
        /// Used to track the state of RAG_FULL_CONTEXT
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RAG_FULL_CONTEXTOption { get; private set; }

        /// <summary>
        /// Gets or Sets RAG_FULL_CONTEXT
        /// </summary>
        [JsonPropertyName("RAG_FULL_CONTEXT")]
        public bool? RAG_FULL_CONTEXT { get { return this.RAG_FULL_CONTEXTOption; } set { this.RAG_FULL_CONTEXTOption = new(value); } }

        /// <summary>
        /// Used to track the state of ENABLE_RAG_HYBRID_SEARCH
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ENABLE_RAG_HYBRID_SEARCHOption { get; private set; }

        /// <summary>
        /// Gets or Sets ENABLE_RAG_HYBRID_SEARCH
        /// </summary>
        [JsonPropertyName("ENABLE_RAG_HYBRID_SEARCH")]
        public bool? ENABLE_RAG_HYBRID_SEARCH { get { return this.ENABLE_RAG_HYBRID_SEARCHOption; } set { this.ENABLE_RAG_HYBRID_SEARCHOption = new(value); } }

        /// <summary>
        /// Used to track the state of TOP_K_RERANKER
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TOP_K_RERANKEROption { get; private set; }

        /// <summary>
        /// Gets or Sets TOP_K_RERANKER
        /// </summary>
        [JsonPropertyName("TOP_K_RERANKER")]
        public int? TOP_K_RERANKER { get { return this.TOP_K_RERANKEROption; } set { this.TOP_K_RERANKEROption = new(value); } }

        /// <summary>
        /// Used to track the state of RELEVANCE_THRESHOLD
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RELEVANCE_THRESHOLDOption { get; private set; }

        /// <summary>
        /// Gets or Sets RELEVANCE_THRESHOLD
        /// </summary>
        [JsonPropertyName("RELEVANCE_THRESHOLD")]
        public decimal? RELEVANCE_THRESHOLD { get { return this.RELEVANCE_THRESHOLDOption; } set { this.RELEVANCE_THRESHOLDOption = new(value); } }

        /// <summary>
        /// Used to track the state of HYBRIDBM25WEIGHT
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> HYBRIDBM25WEIGHTOption { get; private set; }

        /// <summary>
        /// Gets or Sets HYBRIDBM25WEIGHT
        /// </summary>
        [JsonPropertyName("HYBRID_BM25_WEIGHT")]
        public decimal? HYBRIDBM25WEIGHT { get { return this.HYBRIDBM25WEIGHTOption; } set { this.HYBRIDBM25WEIGHTOption = new(value); } }

        /// <summary>
        /// Used to track the state of CONTENT_EXTRACTION_ENGINE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CONTENT_EXTRACTION_ENGINEOption { get; private set; }

        /// <summary>
        /// Gets or Sets CONTENT_EXTRACTION_ENGINE
        /// </summary>
        [JsonPropertyName("CONTENT_EXTRACTION_ENGINE")]
        public string? CONTENT_EXTRACTION_ENGINE { get { return this.CONTENT_EXTRACTION_ENGINEOption; } set { this.CONTENT_EXTRACTION_ENGINEOption = new(value); } }

        /// <summary>
        /// Used to track the state of PDF_EXTRACT_IMAGES
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PDF_EXTRACT_IMAGESOption { get; private set; }

        /// <summary>
        /// Gets or Sets PDF_EXTRACT_IMAGES
        /// </summary>
        [JsonPropertyName("PDF_EXTRACT_IMAGES")]
        public bool? PDF_EXTRACT_IMAGES { get { return this.PDF_EXTRACT_IMAGESOption; } set { this.PDF_EXTRACT_IMAGESOption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_API_KEY
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DATALAB_MARKER_API_KEYOption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_API_KEY
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_API_KEY")]
        public string? DATALAB_MARKER_API_KEY { get { return this.DATALAB_MARKER_API_KEYOption; } set { this.DATALAB_MARKER_API_KEYOption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_LANGS
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DATALAB_MARKER_LANGSOption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_LANGS
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_LANGS")]
        public string? DATALAB_MARKER_LANGS { get { return this.DATALAB_MARKER_LANGSOption; } set { this.DATALAB_MARKER_LANGSOption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_SKIP_CACHE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DATALAB_MARKER_SKIP_CACHEOption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_SKIP_CACHE
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_SKIP_CACHE")]
        public bool? DATALAB_MARKER_SKIP_CACHE { get { return this.DATALAB_MARKER_SKIP_CACHEOption; } set { this.DATALAB_MARKER_SKIP_CACHEOption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_FORCE_OCR
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DATALAB_MARKER_FORCE_OCROption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_FORCE_OCR
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_FORCE_OCR")]
        public bool? DATALAB_MARKER_FORCE_OCR { get { return this.DATALAB_MARKER_FORCE_OCROption; } set { this.DATALAB_MARKER_FORCE_OCROption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_PAGINATE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DATALAB_MARKER_PAGINATEOption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_PAGINATE
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_PAGINATE")]
        public bool? DATALAB_MARKER_PAGINATE { get { return this.DATALAB_MARKER_PAGINATEOption; } set { this.DATALAB_MARKER_PAGINATEOption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_STRIP_EXISTING_OCR
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DATALAB_MARKER_STRIP_EXISTING_OCROption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_STRIP_EXISTING_OCR
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_STRIP_EXISTING_OCR")]
        public bool? DATALAB_MARKER_STRIP_EXISTING_OCR { get { return this.DATALAB_MARKER_STRIP_EXISTING_OCROption; } set { this.DATALAB_MARKER_STRIP_EXISTING_OCROption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DATALAB_MARKER_DISABLE_IMAGE_EXTRACTIONOption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION")]
        public bool? DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION { get { return this.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTIONOption; } set { this.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTIONOption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_USE_LLM
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DATALAB_MARKER_USE_LLMOption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_USE_LLM
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_USE_LLM")]
        public bool? DATALAB_MARKER_USE_LLM { get { return this.DATALAB_MARKER_USE_LLMOption; } set { this.DATALAB_MARKER_USE_LLMOption = new(value); } }

        /// <summary>
        /// Used to track the state of DATALAB_MARKER_OUTPUT_FORMAT
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DATALAB_MARKER_OUTPUT_FORMATOption { get; private set; }

        /// <summary>
        /// Gets or Sets DATALAB_MARKER_OUTPUT_FORMAT
        /// </summary>
        [JsonPropertyName("DATALAB_MARKER_OUTPUT_FORMAT")]
        public string? DATALAB_MARKER_OUTPUT_FORMAT { get { return this.DATALAB_MARKER_OUTPUT_FORMATOption; } set { this.DATALAB_MARKER_OUTPUT_FORMATOption = new(value); } }

        /// <summary>
        /// Used to track the state of EXTERNAL_DOCUMENT_LOADER_URL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EXTERNAL_DOCUMENT_LOADER_URLOption { get; private set; }

        /// <summary>
        /// Gets or Sets EXTERNAL_DOCUMENT_LOADER_URL
        /// </summary>
        [JsonPropertyName("EXTERNAL_DOCUMENT_LOADER_URL")]
        public string? EXTERNAL_DOCUMENT_LOADER_URL { get { return this.EXTERNAL_DOCUMENT_LOADER_URLOption; } set { this.EXTERNAL_DOCUMENT_LOADER_URLOption = new(value); } }

        /// <summary>
        /// Used to track the state of EXTERNAL_DOCUMENT_LOADER_API_KEY
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EXTERNAL_DOCUMENT_LOADER_API_KEYOption { get; private set; }

        /// <summary>
        /// Gets or Sets EXTERNAL_DOCUMENT_LOADER_API_KEY
        /// </summary>
        [JsonPropertyName("EXTERNAL_DOCUMENT_LOADER_API_KEY")]
        public string? EXTERNAL_DOCUMENT_LOADER_API_KEY { get { return this.EXTERNAL_DOCUMENT_LOADER_API_KEYOption; } set { this.EXTERNAL_DOCUMENT_LOADER_API_KEYOption = new(value); } }

        /// <summary>
        /// Used to track the state of TIKA_SERVER_URL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TIKA_SERVER_URLOption { get; private set; }

        /// <summary>
        /// Gets or Sets TIKA_SERVER_URL
        /// </summary>
        [JsonPropertyName("TIKA_SERVER_URL")]
        public string? TIKA_SERVER_URL { get { return this.TIKA_SERVER_URLOption; } set { this.TIKA_SERVER_URLOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCLING_SERVER_URL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DOCLING_SERVER_URLOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCLING_SERVER_URL
        /// </summary>
        [JsonPropertyName("DOCLING_SERVER_URL")]
        public string? DOCLING_SERVER_URL { get { return this.DOCLING_SERVER_URLOption; } set { this.DOCLING_SERVER_URLOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCLING_OCR_ENGINE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DOCLING_OCR_ENGINEOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCLING_OCR_ENGINE
        /// </summary>
        [JsonPropertyName("DOCLING_OCR_ENGINE")]
        public string? DOCLING_OCR_ENGINE { get { return this.DOCLING_OCR_ENGINEOption; } set { this.DOCLING_OCR_ENGINEOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCLING_OCR_LANG
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DOCLING_OCR_LANGOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCLING_OCR_LANG
        /// </summary>
        [JsonPropertyName("DOCLING_OCR_LANG")]
        public string? DOCLING_OCR_LANG { get { return this.DOCLING_OCR_LANGOption; } set { this.DOCLING_OCR_LANGOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCLING_DO_PICTURE_DESCRIPTION
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DOCLING_DO_PICTURE_DESCRIPTIONOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCLING_DO_PICTURE_DESCRIPTION
        /// </summary>
        [JsonPropertyName("DOCLING_DO_PICTURE_DESCRIPTION")]
        public bool? DOCLING_DO_PICTURE_DESCRIPTION { get { return this.DOCLING_DO_PICTURE_DESCRIPTIONOption; } set { this.DOCLING_DO_PICTURE_DESCRIPTIONOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCLING_PICTURE_DESCRIPTION_MODE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DOCLING_PICTURE_DESCRIPTION_MODEOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCLING_PICTURE_DESCRIPTION_MODE
        /// </summary>
        [JsonPropertyName("DOCLING_PICTURE_DESCRIPTION_MODE")]
        public string? DOCLING_PICTURE_DESCRIPTION_MODE { get { return this.DOCLING_PICTURE_DESCRIPTION_MODEOption; } set { this.DOCLING_PICTURE_DESCRIPTION_MODEOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCLING_PICTURE_DESCRIPTION_LOCAL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DOCLING_PICTURE_DESCRIPTION_LOCALOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCLING_PICTURE_DESCRIPTION_LOCAL
        /// </summary>
        [JsonPropertyName("DOCLING_PICTURE_DESCRIPTION_LOCAL")]
        public Object? DOCLING_PICTURE_DESCRIPTION_LOCAL { get { return this.DOCLING_PICTURE_DESCRIPTION_LOCALOption; } set { this.DOCLING_PICTURE_DESCRIPTION_LOCALOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCLING_PICTURE_DESCRIPTION_API
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DOCLING_PICTURE_DESCRIPTION_APIOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCLING_PICTURE_DESCRIPTION_API
        /// </summary>
        [JsonPropertyName("DOCLING_PICTURE_DESCRIPTION_API")]
        public Object? DOCLING_PICTURE_DESCRIPTION_API { get { return this.DOCLING_PICTURE_DESCRIPTION_APIOption; } set { this.DOCLING_PICTURE_DESCRIPTION_APIOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCUMENT_INTELLIGENCE_ENDPOINT
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DOCUMENT_INTELLIGENCE_ENDPOINTOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCUMENT_INTELLIGENCE_ENDPOINT
        /// </summary>
        [JsonPropertyName("DOCUMENT_INTELLIGENCE_ENDPOINT")]
        public string? DOCUMENT_INTELLIGENCE_ENDPOINT { get { return this.DOCUMENT_INTELLIGENCE_ENDPOINTOption; } set { this.DOCUMENT_INTELLIGENCE_ENDPOINTOption = new(value); } }

        /// <summary>
        /// Used to track the state of DOCUMENT_INTELLIGENCE_KEY
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DOCUMENT_INTELLIGENCE_KEYOption { get; private set; }

        /// <summary>
        /// Gets or Sets DOCUMENT_INTELLIGENCE_KEY
        /// </summary>
        [JsonPropertyName("DOCUMENT_INTELLIGENCE_KEY")]
        public string? DOCUMENT_INTELLIGENCE_KEY { get { return this.DOCUMENT_INTELLIGENCE_KEYOption; } set { this.DOCUMENT_INTELLIGENCE_KEYOption = new(value); } }

        /// <summary>
        /// Used to track the state of MISTRAL_OCR_API_KEY
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MISTRAL_OCR_API_KEYOption { get; private set; }

        /// <summary>
        /// Gets or Sets MISTRAL_OCR_API_KEY
        /// </summary>
        [JsonPropertyName("MISTRAL_OCR_API_KEY")]
        public string? MISTRAL_OCR_API_KEY { get { return this.MISTRAL_OCR_API_KEYOption; } set { this.MISTRAL_OCR_API_KEYOption = new(value); } }

        /// <summary>
        /// Used to track the state of RAG_RERANKING_MODEL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RAG_RERANKING_MODELOption { get; private set; }

        /// <summary>
        /// Gets or Sets RAG_RERANKING_MODEL
        /// </summary>
        [JsonPropertyName("RAG_RERANKING_MODEL")]
        public string? RAG_RERANKING_MODEL { get { return this.RAG_RERANKING_MODELOption; } set { this.RAG_RERANKING_MODELOption = new(value); } }

        /// <summary>
        /// Used to track the state of RAG_RERANKING_ENGINE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RAG_RERANKING_ENGINEOption { get; private set; }

        /// <summary>
        /// Gets or Sets RAG_RERANKING_ENGINE
        /// </summary>
        [JsonPropertyName("RAG_RERANKING_ENGINE")]
        public string? RAG_RERANKING_ENGINE { get { return this.RAG_RERANKING_ENGINEOption; } set { this.RAG_RERANKING_ENGINEOption = new(value); } }

        /// <summary>
        /// Used to track the state of RAG_EXTERNAL_RERANKER_URL
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RAG_EXTERNAL_RERANKER_URLOption { get; private set; }

        /// <summary>
        /// Gets or Sets RAG_EXTERNAL_RERANKER_URL
        /// </summary>
        [JsonPropertyName("RAG_EXTERNAL_RERANKER_URL")]
        public string? RAG_EXTERNAL_RERANKER_URL { get { return this.RAG_EXTERNAL_RERANKER_URLOption; } set { this.RAG_EXTERNAL_RERANKER_URLOption = new(value); } }

        /// <summary>
        /// Used to track the state of RAG_EXTERNAL_RERANKER_API_KEY
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RAG_EXTERNAL_RERANKER_API_KEYOption { get; private set; }

        /// <summary>
        /// Gets or Sets RAG_EXTERNAL_RERANKER_API_KEY
        /// </summary>
        [JsonPropertyName("RAG_EXTERNAL_RERANKER_API_KEY")]
        public string? RAG_EXTERNAL_RERANKER_API_KEY { get { return this.RAG_EXTERNAL_RERANKER_API_KEYOption; } set { this.RAG_EXTERNAL_RERANKER_API_KEYOption = new(value); } }

        /// <summary>
        /// Used to track the state of TEXT_SPLITTER
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TEXT_SPLITTEROption { get; private set; }

        /// <summary>
        /// Gets or Sets TEXT_SPLITTER
        /// </summary>
        [JsonPropertyName("TEXT_SPLITTER")]
        public string? TEXT_SPLITTER { get { return this.TEXT_SPLITTEROption; } set { this.TEXT_SPLITTEROption = new(value); } }

        /// <summary>
        /// Used to track the state of CHUNK_SIZE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CHUNK_SIZEOption { get; private set; }

        /// <summary>
        /// Gets or Sets CHUNK_SIZE
        /// </summary>
        [JsonPropertyName("CHUNK_SIZE")]
        public int? CHUNK_SIZE { get { return this.CHUNK_SIZEOption; } set { this.CHUNK_SIZEOption = new(value); } }

        /// <summary>
        /// Used to track the state of CHUNK_OVERLAP
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CHUNK_OVERLAPOption { get; private set; }

        /// <summary>
        /// Gets or Sets CHUNK_OVERLAP
        /// </summary>
        [JsonPropertyName("CHUNK_OVERLAP")]
        public int? CHUNK_OVERLAP { get { return this.CHUNK_OVERLAPOption; } set { this.CHUNK_OVERLAPOption = new(value); } }

        /// <summary>
        /// Used to track the state of FILE_MAX_SIZE
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FILE_MAX_SIZEOption { get; private set; }

        /// <summary>
        /// Gets or Sets FILE_MAX_SIZE
        /// </summary>
        [JsonPropertyName("FILE_MAX_SIZE")]
        public int? FILE_MAX_SIZE { get { return this.FILE_MAX_SIZEOption; } set { this.FILE_MAX_SIZEOption = new(value); } }

        /// <summary>
        /// Used to track the state of FILE_MAX_COUNT
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FILE_MAX_COUNTOption { get; private set; }

        /// <summary>
        /// Gets or Sets FILE_MAX_COUNT
        /// </summary>
        [JsonPropertyName("FILE_MAX_COUNT")]
        public int? FILE_MAX_COUNT { get { return this.FILE_MAX_COUNTOption; } set { this.FILE_MAX_COUNTOption = new(value); } }

        /// <summary>
        /// Used to track the state of FILE_IMAGE_COMPRESSION_WIDTH
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FILE_IMAGE_COMPRESSION_WIDTHOption { get; private set; }

        /// <summary>
        /// Gets or Sets FILE_IMAGE_COMPRESSION_WIDTH
        /// </summary>
        [JsonPropertyName("FILE_IMAGE_COMPRESSION_WIDTH")]
        public int? FILE_IMAGE_COMPRESSION_WIDTH { get { return this.FILE_IMAGE_COMPRESSION_WIDTHOption; } set { this.FILE_IMAGE_COMPRESSION_WIDTHOption = new(value); } }

        /// <summary>
        /// Used to track the state of FILE_IMAGE_COMPRESSION_HEIGHT
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FILE_IMAGE_COMPRESSION_HEIGHTOption { get; private set; }

        /// <summary>
        /// Gets or Sets FILE_IMAGE_COMPRESSION_HEIGHT
        /// </summary>
        [JsonPropertyName("FILE_IMAGE_COMPRESSION_HEIGHT")]
        public int? FILE_IMAGE_COMPRESSION_HEIGHT { get { return this.FILE_IMAGE_COMPRESSION_HEIGHTOption; } set { this.FILE_IMAGE_COMPRESSION_HEIGHTOption = new(value); } }

        /// <summary>
        /// Used to track the state of ALLOWED_FILE_EXTENSIONS
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ALLOWED_FILE_EXTENSIONSOption { get; private set; }

        /// <summary>
        /// Gets or Sets ALLOWED_FILE_EXTENSIONS
        /// </summary>
        [JsonPropertyName("ALLOWED_FILE_EXTENSIONS")]
        public List<string>? ALLOWED_FILE_EXTENSIONS { get { return this.ALLOWED_FILE_EXTENSIONSOption; } set { this.ALLOWED_FILE_EXTENSIONSOption = new(value); } }

        /// <summary>
        /// Used to track the state of ENABLE_GOOGLE_DRIVE_INTEGRATION
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ENABLE_GOOGLE_DRIVE_INTEGRATIONOption { get; private set; }

        /// <summary>
        /// Gets or Sets ENABLE_GOOGLE_DRIVE_INTEGRATION
        /// </summary>
        [JsonPropertyName("ENABLE_GOOGLE_DRIVE_INTEGRATION")]
        public bool? ENABLE_GOOGLE_DRIVE_INTEGRATION { get { return this.ENABLE_GOOGLE_DRIVE_INTEGRATIONOption; } set { this.ENABLE_GOOGLE_DRIVE_INTEGRATIONOption = new(value); } }

        /// <summary>
        /// Used to track the state of ENABLE_ONEDRIVE_INTEGRATION
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ENABLE_ONEDRIVE_INTEGRATIONOption { get; private set; }

        /// <summary>
        /// Gets or Sets ENABLE_ONEDRIVE_INTEGRATION
        /// </summary>
        [JsonPropertyName("ENABLE_ONEDRIVE_INTEGRATION")]
        public bool? ENABLE_ONEDRIVE_INTEGRATION { get { return this.ENABLE_ONEDRIVE_INTEGRATIONOption; } set { this.ENABLE_ONEDRIVE_INTEGRATIONOption = new(value); } }

        /// <summary>
        /// Used to track the state of Web
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WebConfig?> WebOption { get; private set; }

        /// <summary>
        /// Gets or Sets Web
        /// </summary>
        [JsonPropertyName("web")]
        public WebConfig? Web { get { return this.WebOption; } set { this.WebOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenWebuiRoutersRetrievalConfigForm {\n");
            sb.Append("  RAG_TEMPLATE: ").Append(RAG_TEMPLATE).Append("\n");
            sb.Append("  TOP_K: ").Append(TOP_K).Append("\n");
            sb.Append("  BYPASS_EMBEDDING_AND_RETRIEVAL: ").Append(BYPASS_EMBEDDING_AND_RETRIEVAL).Append("\n");
            sb.Append("  RAG_FULL_CONTEXT: ").Append(RAG_FULL_CONTEXT).Append("\n");
            sb.Append("  ENABLE_RAG_HYBRID_SEARCH: ").Append(ENABLE_RAG_HYBRID_SEARCH).Append("\n");
            sb.Append("  TOP_K_RERANKER: ").Append(TOP_K_RERANKER).Append("\n");
            sb.Append("  RELEVANCE_THRESHOLD: ").Append(RELEVANCE_THRESHOLD).Append("\n");
            sb.Append("  HYBRIDBM25WEIGHT: ").Append(HYBRIDBM25WEIGHT).Append("\n");
            sb.Append("  CONTENT_EXTRACTION_ENGINE: ").Append(CONTENT_EXTRACTION_ENGINE).Append("\n");
            sb.Append("  PDF_EXTRACT_IMAGES: ").Append(PDF_EXTRACT_IMAGES).Append("\n");
            sb.Append("  DATALAB_MARKER_API_KEY: ").Append(DATALAB_MARKER_API_KEY).Append("\n");
            sb.Append("  DATALAB_MARKER_LANGS: ").Append(DATALAB_MARKER_LANGS).Append("\n");
            sb.Append("  DATALAB_MARKER_SKIP_CACHE: ").Append(DATALAB_MARKER_SKIP_CACHE).Append("\n");
            sb.Append("  DATALAB_MARKER_FORCE_OCR: ").Append(DATALAB_MARKER_FORCE_OCR).Append("\n");
            sb.Append("  DATALAB_MARKER_PAGINATE: ").Append(DATALAB_MARKER_PAGINATE).Append("\n");
            sb.Append("  DATALAB_MARKER_STRIP_EXISTING_OCR: ").Append(DATALAB_MARKER_STRIP_EXISTING_OCR).Append("\n");
            sb.Append("  DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION: ").Append(DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION).Append("\n");
            sb.Append("  DATALAB_MARKER_USE_LLM: ").Append(DATALAB_MARKER_USE_LLM).Append("\n");
            sb.Append("  DATALAB_MARKER_OUTPUT_FORMAT: ").Append(DATALAB_MARKER_OUTPUT_FORMAT).Append("\n");
            sb.Append("  EXTERNAL_DOCUMENT_LOADER_URL: ").Append(EXTERNAL_DOCUMENT_LOADER_URL).Append("\n");
            sb.Append("  EXTERNAL_DOCUMENT_LOADER_API_KEY: ").Append(EXTERNAL_DOCUMENT_LOADER_API_KEY).Append("\n");
            sb.Append("  TIKA_SERVER_URL: ").Append(TIKA_SERVER_URL).Append("\n");
            sb.Append("  DOCLING_SERVER_URL: ").Append(DOCLING_SERVER_URL).Append("\n");
            sb.Append("  DOCLING_OCR_ENGINE: ").Append(DOCLING_OCR_ENGINE).Append("\n");
            sb.Append("  DOCLING_OCR_LANG: ").Append(DOCLING_OCR_LANG).Append("\n");
            sb.Append("  DOCLING_DO_PICTURE_DESCRIPTION: ").Append(DOCLING_DO_PICTURE_DESCRIPTION).Append("\n");
            sb.Append("  DOCLING_PICTURE_DESCRIPTION_MODE: ").Append(DOCLING_PICTURE_DESCRIPTION_MODE).Append("\n");
            sb.Append("  DOCLING_PICTURE_DESCRIPTION_LOCAL: ").Append(DOCLING_PICTURE_DESCRIPTION_LOCAL).Append("\n");
            sb.Append("  DOCLING_PICTURE_DESCRIPTION_API: ").Append(DOCLING_PICTURE_DESCRIPTION_API).Append("\n");
            sb.Append("  DOCUMENT_INTELLIGENCE_ENDPOINT: ").Append(DOCUMENT_INTELLIGENCE_ENDPOINT).Append("\n");
            sb.Append("  DOCUMENT_INTELLIGENCE_KEY: ").Append(DOCUMENT_INTELLIGENCE_KEY).Append("\n");
            sb.Append("  MISTRAL_OCR_API_KEY: ").Append(MISTRAL_OCR_API_KEY).Append("\n");
            sb.Append("  RAG_RERANKING_MODEL: ").Append(RAG_RERANKING_MODEL).Append("\n");
            sb.Append("  RAG_RERANKING_ENGINE: ").Append(RAG_RERANKING_ENGINE).Append("\n");
            sb.Append("  RAG_EXTERNAL_RERANKER_URL: ").Append(RAG_EXTERNAL_RERANKER_URL).Append("\n");
            sb.Append("  RAG_EXTERNAL_RERANKER_API_KEY: ").Append(RAG_EXTERNAL_RERANKER_API_KEY).Append("\n");
            sb.Append("  TEXT_SPLITTER: ").Append(TEXT_SPLITTER).Append("\n");
            sb.Append("  CHUNK_SIZE: ").Append(CHUNK_SIZE).Append("\n");
            sb.Append("  CHUNK_OVERLAP: ").Append(CHUNK_OVERLAP).Append("\n");
            sb.Append("  FILE_MAX_SIZE: ").Append(FILE_MAX_SIZE).Append("\n");
            sb.Append("  FILE_MAX_COUNT: ").Append(FILE_MAX_COUNT).Append("\n");
            sb.Append("  FILE_IMAGE_COMPRESSION_WIDTH: ").Append(FILE_IMAGE_COMPRESSION_WIDTH).Append("\n");
            sb.Append("  FILE_IMAGE_COMPRESSION_HEIGHT: ").Append(FILE_IMAGE_COMPRESSION_HEIGHT).Append("\n");
            sb.Append("  ALLOWED_FILE_EXTENSIONS: ").Append(ALLOWED_FILE_EXTENSIONS).Append("\n");
            sb.Append("  ENABLE_GOOGLE_DRIVE_INTEGRATION: ").Append(ENABLE_GOOGLE_DRIVE_INTEGRATION).Append("\n");
            sb.Append("  ENABLE_ONEDRIVE_INTEGRATION: ").Append(ENABLE_ONEDRIVE_INTEGRATION).Append("\n");
            sb.Append("  Web: ").Append(Web).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OpenWebuiRoutersRetrievalConfigForm" />
    /// </summary>
    public class OpenWebuiRoutersRetrievalConfigFormJsonConverter : JsonConverter<OpenWebuiRoutersRetrievalConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="OpenWebuiRoutersRetrievalConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OpenWebuiRoutersRetrievalConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> rAGTEMPLATE = default;
            Option<int?> tOPK = default;
            Option<bool?> bYPASSEMBEDDINGANDRETRIEVAL = default;
            Option<bool?> rAGFULLCONTEXT = default;
            Option<bool?> eNABLERAGHYBRIDSEARCH = default;
            Option<int?> tOPKRERANKER = default;
            Option<decimal?> rELEVANCETHRESHOLD = default;
            Option<decimal?> hYBRIDBM25WEIGHT = default;
            Option<string?> cONTENTEXTRACTIONENGINE = default;
            Option<bool?> pDFEXTRACTIMAGES = default;
            Option<string?> dATALABMARKERAPIKEY = default;
            Option<string?> dATALABMARKERLANGS = default;
            Option<bool?> dATALABMARKERSKIPCACHE = default;
            Option<bool?> dATALABMARKERFORCEOCR = default;
            Option<bool?> dATALABMARKERPAGINATE = default;
            Option<bool?> dATALABMARKERSTRIPEXISTINGOCR = default;
            Option<bool?> dATALABMARKERDISABLEIMAGEEXTRACTION = default;
            Option<bool?> dATALABMARKERUSELLM = default;
            Option<string?> dATALABMARKEROUTPUTFORMAT = default;
            Option<string?> eXTERNALDOCUMENTLOADERURL = default;
            Option<string?> eXTERNALDOCUMENTLOADERAPIKEY = default;
            Option<string?> tIKASERVERURL = default;
            Option<string?> dOCLINGSERVERURL = default;
            Option<string?> dOCLINGOCRENGINE = default;
            Option<string?> dOCLINGOCRLANG = default;
            Option<bool?> dOCLINGDOPICTUREDESCRIPTION = default;
            Option<string?> dOCLINGPICTUREDESCRIPTIONMODE = default;
            Option<Object?> dOCLINGPICTUREDESCRIPTIONLOCAL = default;
            Option<Object?> dOCLINGPICTUREDESCRIPTIONAPI = default;
            Option<string?> dOCUMENTINTELLIGENCEENDPOINT = default;
            Option<string?> dOCUMENTINTELLIGENCEKEY = default;
            Option<string?> mISTRALOCRAPIKEY = default;
            Option<string?> rAGRERANKINGMODEL = default;
            Option<string?> rAGRERANKINGENGINE = default;
            Option<string?> rAGEXTERNALRERANKERURL = default;
            Option<string?> rAGEXTERNALRERANKERAPIKEY = default;
            Option<string?> tEXTSPLITTER = default;
            Option<int?> cHUNKSIZE = default;
            Option<int?> cHUNKOVERLAP = default;
            Option<int?> fILEMAXSIZE = default;
            Option<int?> fILEMAXCOUNT = default;
            Option<int?> fILEIMAGECOMPRESSIONWIDTH = default;
            Option<int?> fILEIMAGECOMPRESSIONHEIGHT = default;
            Option<List<string>?> aLLOWEDFILEEXTENSIONS = default;
            Option<bool?> eNABLEGOOGLEDRIVEINTEGRATION = default;
            Option<bool?> eNABLEONEDRIVEINTEGRATION = default;
            Option<WebConfig?> web = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "RAG_TEMPLATE":
                            rAGTEMPLATE = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "TOP_K":
                            tOPK = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "BYPASS_EMBEDDING_AND_RETRIEVAL":
                            bYPASSEMBEDDINGANDRETRIEVAL = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "RAG_FULL_CONTEXT":
                            rAGFULLCONTEXT = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ENABLE_RAG_HYBRID_SEARCH":
                            eNABLERAGHYBRIDSEARCH = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "TOP_K_RERANKER":
                            tOPKRERANKER = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "RELEVANCE_THRESHOLD":
                            rELEVANCETHRESHOLD = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "HYBRID_BM25_WEIGHT":
                            hYBRIDBM25WEIGHT = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "CONTENT_EXTRACTION_ENGINE":
                            cONTENTEXTRACTIONENGINE = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "PDF_EXTRACT_IMAGES":
                            pDFEXTRACTIMAGES = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "DATALAB_MARKER_API_KEY":
                            dATALABMARKERAPIKEY = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DATALAB_MARKER_LANGS":
                            dATALABMARKERLANGS = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DATALAB_MARKER_SKIP_CACHE":
                            dATALABMARKERSKIPCACHE = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "DATALAB_MARKER_FORCE_OCR":
                            dATALABMARKERFORCEOCR = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "DATALAB_MARKER_PAGINATE":
                            dATALABMARKERPAGINATE = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "DATALAB_MARKER_STRIP_EXISTING_OCR":
                            dATALABMARKERSTRIPEXISTINGOCR = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION":
                            dATALABMARKERDISABLEIMAGEEXTRACTION = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "DATALAB_MARKER_USE_LLM":
                            dATALABMARKERUSELLM = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "DATALAB_MARKER_OUTPUT_FORMAT":
                            dATALABMARKEROUTPUTFORMAT = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "EXTERNAL_DOCUMENT_LOADER_URL":
                            eXTERNALDOCUMENTLOADERURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "EXTERNAL_DOCUMENT_LOADER_API_KEY":
                            eXTERNALDOCUMENTLOADERAPIKEY = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "TIKA_SERVER_URL":
                            tIKASERVERURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DOCLING_SERVER_URL":
                            dOCLINGSERVERURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DOCLING_OCR_ENGINE":
                            dOCLINGOCRENGINE = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DOCLING_OCR_LANG":
                            dOCLINGOCRLANG = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DOCLING_DO_PICTURE_DESCRIPTION":
                            dOCLINGDOPICTUREDESCRIPTION = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "DOCLING_PICTURE_DESCRIPTION_MODE":
                            dOCLINGPICTUREDESCRIPTIONMODE = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DOCLING_PICTURE_DESCRIPTION_LOCAL":
                            dOCLINGPICTUREDESCRIPTIONLOCAL = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DOCLING_PICTURE_DESCRIPTION_API":
                            dOCLINGPICTUREDESCRIPTIONAPI = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "DOCUMENT_INTELLIGENCE_ENDPOINT":
                            dOCUMENTINTELLIGENCEENDPOINT = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "DOCUMENT_INTELLIGENCE_KEY":
                            dOCUMENTINTELLIGENCEKEY = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "MISTRAL_OCR_API_KEY":
                            mISTRALOCRAPIKEY = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RAG_RERANKING_MODEL":
                            rAGRERANKINGMODEL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RAG_RERANKING_ENGINE":
                            rAGRERANKINGENGINE = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RAG_EXTERNAL_RERANKER_URL":
                            rAGEXTERNALRERANKERURL = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "RAG_EXTERNAL_RERANKER_API_KEY":
                            rAGEXTERNALRERANKERAPIKEY = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "TEXT_SPLITTER":
                            tEXTSPLITTER = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "CHUNK_SIZE":
                            cHUNKSIZE = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "CHUNK_OVERLAP":
                            cHUNKOVERLAP = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "FILE_MAX_SIZE":
                            fILEMAXSIZE = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "FILE_MAX_COUNT":
                            fILEMAXCOUNT = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "FILE_IMAGE_COMPRESSION_WIDTH":
                            fILEIMAGECOMPRESSIONWIDTH = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "FILE_IMAGE_COMPRESSION_HEIGHT":
                            fILEIMAGECOMPRESSIONHEIGHT = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ALLOWED_FILE_EXTENSIONS":
                            aLLOWEDFILEEXTENSIONS = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ENABLE_GOOGLE_DRIVE_INTEGRATION":
                            eNABLEGOOGLEDRIVEINTEGRATION = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ENABLE_ONEDRIVE_INTEGRATION":
                            eNABLEONEDRIVEINTEGRATION = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "web":
                            web = new Option<WebConfig?>(JsonSerializer.Deserialize<WebConfig>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new OpenWebuiRoutersRetrievalConfigForm(rAGTEMPLATE, tOPK, bYPASSEMBEDDINGANDRETRIEVAL, rAGFULLCONTEXT, eNABLERAGHYBRIDSEARCH, tOPKRERANKER, rELEVANCETHRESHOLD, hYBRIDBM25WEIGHT, cONTENTEXTRACTIONENGINE, pDFEXTRACTIMAGES, dATALABMARKERAPIKEY, dATALABMARKERLANGS, dATALABMARKERSKIPCACHE, dATALABMARKERFORCEOCR, dATALABMARKERPAGINATE, dATALABMARKERSTRIPEXISTINGOCR, dATALABMARKERDISABLEIMAGEEXTRACTION, dATALABMARKERUSELLM, dATALABMARKEROUTPUTFORMAT, eXTERNALDOCUMENTLOADERURL, eXTERNALDOCUMENTLOADERAPIKEY, tIKASERVERURL, dOCLINGSERVERURL, dOCLINGOCRENGINE, dOCLINGOCRLANG, dOCLINGDOPICTUREDESCRIPTION, dOCLINGPICTUREDESCRIPTIONMODE, dOCLINGPICTUREDESCRIPTIONLOCAL, dOCLINGPICTUREDESCRIPTIONAPI, dOCUMENTINTELLIGENCEENDPOINT, dOCUMENTINTELLIGENCEKEY, mISTRALOCRAPIKEY, rAGRERANKINGMODEL, rAGRERANKINGENGINE, rAGEXTERNALRERANKERURL, rAGEXTERNALRERANKERAPIKEY, tEXTSPLITTER, cHUNKSIZE, cHUNKOVERLAP, fILEMAXSIZE, fILEMAXCOUNT, fILEIMAGECOMPRESSIONWIDTH, fILEIMAGECOMPRESSIONHEIGHT, aLLOWEDFILEEXTENSIONS, eNABLEGOOGLEDRIVEINTEGRATION, eNABLEONEDRIVEINTEGRATION, web);
        }

        /// <summary>
        /// Serializes a <see cref="OpenWebuiRoutersRetrievalConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, openWebuiRoutersRetrievalConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OpenWebuiRoutersRetrievalConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersRetrievalConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OpenWebuiRoutersRetrievalConfigForm openWebuiRoutersRetrievalConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (openWebuiRoutersRetrievalConfigForm.RAG_TEMPLATEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.RAG_TEMPLATEOption.Value != null)
                    writer.WriteString("RAG_TEMPLATE", openWebuiRoutersRetrievalConfigForm.RAG_TEMPLATE);
                else
                    writer.WriteNull("RAG_TEMPLATE");

            if (openWebuiRoutersRetrievalConfigForm.TOP_KOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.TOP_KOption.Value != null)
                    writer.WriteNumber("TOP_K", openWebuiRoutersRetrievalConfigForm.TOP_KOption.Value!.Value);
                else
                    writer.WriteNull("TOP_K");

            if (openWebuiRoutersRetrievalConfigForm.BYPASS_EMBEDDING_AND_RETRIEVALOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.BYPASS_EMBEDDING_AND_RETRIEVALOption.Value != null)
                    writer.WriteBoolean("BYPASS_EMBEDDING_AND_RETRIEVAL", openWebuiRoutersRetrievalConfigForm.BYPASS_EMBEDDING_AND_RETRIEVALOption.Value!.Value);
                else
                    writer.WriteNull("BYPASS_EMBEDDING_AND_RETRIEVAL");

            if (openWebuiRoutersRetrievalConfigForm.RAG_FULL_CONTEXTOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.RAG_FULL_CONTEXTOption.Value != null)
                    writer.WriteBoolean("RAG_FULL_CONTEXT", openWebuiRoutersRetrievalConfigForm.RAG_FULL_CONTEXTOption.Value!.Value);
                else
                    writer.WriteNull("RAG_FULL_CONTEXT");

            if (openWebuiRoutersRetrievalConfigForm.ENABLE_RAG_HYBRID_SEARCHOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.ENABLE_RAG_HYBRID_SEARCHOption.Value != null)
                    writer.WriteBoolean("ENABLE_RAG_HYBRID_SEARCH", openWebuiRoutersRetrievalConfigForm.ENABLE_RAG_HYBRID_SEARCHOption.Value!.Value);
                else
                    writer.WriteNull("ENABLE_RAG_HYBRID_SEARCH");

            if (openWebuiRoutersRetrievalConfigForm.TOP_K_RERANKEROption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.TOP_K_RERANKEROption.Value != null)
                    writer.WriteNumber("TOP_K_RERANKER", openWebuiRoutersRetrievalConfigForm.TOP_K_RERANKEROption.Value!.Value);
                else
                    writer.WriteNull("TOP_K_RERANKER");

            if (openWebuiRoutersRetrievalConfigForm.RELEVANCE_THRESHOLDOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.RELEVANCE_THRESHOLDOption.Value != null)
                    writer.WriteNumber("RELEVANCE_THRESHOLD", openWebuiRoutersRetrievalConfigForm.RELEVANCE_THRESHOLDOption.Value!.Value);
                else
                    writer.WriteNull("RELEVANCE_THRESHOLD");

            if (openWebuiRoutersRetrievalConfigForm.HYBRIDBM25WEIGHTOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.HYBRIDBM25WEIGHTOption.Value != null)
                    writer.WriteNumber("HYBRID_BM25_WEIGHT", openWebuiRoutersRetrievalConfigForm.HYBRIDBM25WEIGHTOption.Value!.Value);
                else
                    writer.WriteNull("HYBRID_BM25_WEIGHT");

            if (openWebuiRoutersRetrievalConfigForm.CONTENT_EXTRACTION_ENGINEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.CONTENT_EXTRACTION_ENGINEOption.Value != null)
                    writer.WriteString("CONTENT_EXTRACTION_ENGINE", openWebuiRoutersRetrievalConfigForm.CONTENT_EXTRACTION_ENGINE);
                else
                    writer.WriteNull("CONTENT_EXTRACTION_ENGINE");

            if (openWebuiRoutersRetrievalConfigForm.PDF_EXTRACT_IMAGESOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.PDF_EXTRACT_IMAGESOption.Value != null)
                    writer.WriteBoolean("PDF_EXTRACT_IMAGES", openWebuiRoutersRetrievalConfigForm.PDF_EXTRACT_IMAGESOption.Value!.Value);
                else
                    writer.WriteNull("PDF_EXTRACT_IMAGES");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_API_KEYOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_API_KEYOption.Value != null)
                    writer.WriteString("DATALAB_MARKER_API_KEY", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_API_KEY);
                else
                    writer.WriteNull("DATALAB_MARKER_API_KEY");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_LANGSOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_LANGSOption.Value != null)
                    writer.WriteString("DATALAB_MARKER_LANGS", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_LANGS);
                else
                    writer.WriteNull("DATALAB_MARKER_LANGS");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_SKIP_CACHEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_SKIP_CACHEOption.Value != null)
                    writer.WriteBoolean("DATALAB_MARKER_SKIP_CACHE", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_SKIP_CACHEOption.Value!.Value);
                else
                    writer.WriteNull("DATALAB_MARKER_SKIP_CACHE");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_FORCE_OCROption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_FORCE_OCROption.Value != null)
                    writer.WriteBoolean("DATALAB_MARKER_FORCE_OCR", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_FORCE_OCROption.Value!.Value);
                else
                    writer.WriteNull("DATALAB_MARKER_FORCE_OCR");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_PAGINATEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_PAGINATEOption.Value != null)
                    writer.WriteBoolean("DATALAB_MARKER_PAGINATE", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_PAGINATEOption.Value!.Value);
                else
                    writer.WriteNull("DATALAB_MARKER_PAGINATE");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_STRIP_EXISTING_OCROption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_STRIP_EXISTING_OCROption.Value != null)
                    writer.WriteBoolean("DATALAB_MARKER_STRIP_EXISTING_OCR", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_STRIP_EXISTING_OCROption.Value!.Value);
                else
                    writer.WriteNull("DATALAB_MARKER_STRIP_EXISTING_OCR");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTIONOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTIONOption.Value != null)
                    writer.WriteBoolean("DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_DISABLE_IMAGE_EXTRACTIONOption.Value!.Value);
                else
                    writer.WriteNull("DATALAB_MARKER_DISABLE_IMAGE_EXTRACTION");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_USE_LLMOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_USE_LLMOption.Value != null)
                    writer.WriteBoolean("DATALAB_MARKER_USE_LLM", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_USE_LLMOption.Value!.Value);
                else
                    writer.WriteNull("DATALAB_MARKER_USE_LLM");

            if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_OUTPUT_FORMATOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_OUTPUT_FORMATOption.Value != null)
                    writer.WriteString("DATALAB_MARKER_OUTPUT_FORMAT", openWebuiRoutersRetrievalConfigForm.DATALAB_MARKER_OUTPUT_FORMAT);
                else
                    writer.WriteNull("DATALAB_MARKER_OUTPUT_FORMAT");

            if (openWebuiRoutersRetrievalConfigForm.EXTERNAL_DOCUMENT_LOADER_URLOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.EXTERNAL_DOCUMENT_LOADER_URLOption.Value != null)
                    writer.WriteString("EXTERNAL_DOCUMENT_LOADER_URL", openWebuiRoutersRetrievalConfigForm.EXTERNAL_DOCUMENT_LOADER_URL);
                else
                    writer.WriteNull("EXTERNAL_DOCUMENT_LOADER_URL");

            if (openWebuiRoutersRetrievalConfigForm.EXTERNAL_DOCUMENT_LOADER_API_KEYOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.EXTERNAL_DOCUMENT_LOADER_API_KEYOption.Value != null)
                    writer.WriteString("EXTERNAL_DOCUMENT_LOADER_API_KEY", openWebuiRoutersRetrievalConfigForm.EXTERNAL_DOCUMENT_LOADER_API_KEY);
                else
                    writer.WriteNull("EXTERNAL_DOCUMENT_LOADER_API_KEY");

            if (openWebuiRoutersRetrievalConfigForm.TIKA_SERVER_URLOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.TIKA_SERVER_URLOption.Value != null)
                    writer.WriteString("TIKA_SERVER_URL", openWebuiRoutersRetrievalConfigForm.TIKA_SERVER_URL);
                else
                    writer.WriteNull("TIKA_SERVER_URL");

            if (openWebuiRoutersRetrievalConfigForm.DOCLING_SERVER_URLOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCLING_SERVER_URLOption.Value != null)
                    writer.WriteString("DOCLING_SERVER_URL", openWebuiRoutersRetrievalConfigForm.DOCLING_SERVER_URL);
                else
                    writer.WriteNull("DOCLING_SERVER_URL");

            if (openWebuiRoutersRetrievalConfigForm.DOCLING_OCR_ENGINEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCLING_OCR_ENGINEOption.Value != null)
                    writer.WriteString("DOCLING_OCR_ENGINE", openWebuiRoutersRetrievalConfigForm.DOCLING_OCR_ENGINE);
                else
                    writer.WriteNull("DOCLING_OCR_ENGINE");

            if (openWebuiRoutersRetrievalConfigForm.DOCLING_OCR_LANGOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCLING_OCR_LANGOption.Value != null)
                    writer.WriteString("DOCLING_OCR_LANG", openWebuiRoutersRetrievalConfigForm.DOCLING_OCR_LANG);
                else
                    writer.WriteNull("DOCLING_OCR_LANG");

            if (openWebuiRoutersRetrievalConfigForm.DOCLING_DO_PICTURE_DESCRIPTIONOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCLING_DO_PICTURE_DESCRIPTIONOption.Value != null)
                    writer.WriteBoolean("DOCLING_DO_PICTURE_DESCRIPTION", openWebuiRoutersRetrievalConfigForm.DOCLING_DO_PICTURE_DESCRIPTIONOption.Value!.Value);
                else
                    writer.WriteNull("DOCLING_DO_PICTURE_DESCRIPTION");

            if (openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_MODEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_MODEOption.Value != null)
                    writer.WriteString("DOCLING_PICTURE_DESCRIPTION_MODE", openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_MODE);
                else
                    writer.WriteNull("DOCLING_PICTURE_DESCRIPTION_MODE");

            if (openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_LOCALOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_LOCALOption.Value != null)
                {
                    writer.WritePropertyName("DOCLING_PICTURE_DESCRIPTION_LOCAL");
                    JsonSerializer.Serialize(writer, openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_LOCAL, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("DOCLING_PICTURE_DESCRIPTION_LOCAL");
            if (openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_APIOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_APIOption.Value != null)
                {
                    writer.WritePropertyName("DOCLING_PICTURE_DESCRIPTION_API");
                    JsonSerializer.Serialize(writer, openWebuiRoutersRetrievalConfigForm.DOCLING_PICTURE_DESCRIPTION_API, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("DOCLING_PICTURE_DESCRIPTION_API");
            if (openWebuiRoutersRetrievalConfigForm.DOCUMENT_INTELLIGENCE_ENDPOINTOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCUMENT_INTELLIGENCE_ENDPOINTOption.Value != null)
                    writer.WriteString("DOCUMENT_INTELLIGENCE_ENDPOINT", openWebuiRoutersRetrievalConfigForm.DOCUMENT_INTELLIGENCE_ENDPOINT);
                else
                    writer.WriteNull("DOCUMENT_INTELLIGENCE_ENDPOINT");

            if (openWebuiRoutersRetrievalConfigForm.DOCUMENT_INTELLIGENCE_KEYOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.DOCUMENT_INTELLIGENCE_KEYOption.Value != null)
                    writer.WriteString("DOCUMENT_INTELLIGENCE_KEY", openWebuiRoutersRetrievalConfigForm.DOCUMENT_INTELLIGENCE_KEY);
                else
                    writer.WriteNull("DOCUMENT_INTELLIGENCE_KEY");

            if (openWebuiRoutersRetrievalConfigForm.MISTRAL_OCR_API_KEYOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.MISTRAL_OCR_API_KEYOption.Value != null)
                    writer.WriteString("MISTRAL_OCR_API_KEY", openWebuiRoutersRetrievalConfigForm.MISTRAL_OCR_API_KEY);
                else
                    writer.WriteNull("MISTRAL_OCR_API_KEY");

            if (openWebuiRoutersRetrievalConfigForm.RAG_RERANKING_MODELOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.RAG_RERANKING_MODELOption.Value != null)
                    writer.WriteString("RAG_RERANKING_MODEL", openWebuiRoutersRetrievalConfigForm.RAG_RERANKING_MODEL);
                else
                    writer.WriteNull("RAG_RERANKING_MODEL");

            if (openWebuiRoutersRetrievalConfigForm.RAG_RERANKING_ENGINEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.RAG_RERANKING_ENGINEOption.Value != null)
                    writer.WriteString("RAG_RERANKING_ENGINE", openWebuiRoutersRetrievalConfigForm.RAG_RERANKING_ENGINE);
                else
                    writer.WriteNull("RAG_RERANKING_ENGINE");

            if (openWebuiRoutersRetrievalConfigForm.RAG_EXTERNAL_RERANKER_URLOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.RAG_EXTERNAL_RERANKER_URLOption.Value != null)
                    writer.WriteString("RAG_EXTERNAL_RERANKER_URL", openWebuiRoutersRetrievalConfigForm.RAG_EXTERNAL_RERANKER_URL);
                else
                    writer.WriteNull("RAG_EXTERNAL_RERANKER_URL");

            if (openWebuiRoutersRetrievalConfigForm.RAG_EXTERNAL_RERANKER_API_KEYOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.RAG_EXTERNAL_RERANKER_API_KEYOption.Value != null)
                    writer.WriteString("RAG_EXTERNAL_RERANKER_API_KEY", openWebuiRoutersRetrievalConfigForm.RAG_EXTERNAL_RERANKER_API_KEY);
                else
                    writer.WriteNull("RAG_EXTERNAL_RERANKER_API_KEY");

            if (openWebuiRoutersRetrievalConfigForm.TEXT_SPLITTEROption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.TEXT_SPLITTEROption.Value != null)
                    writer.WriteString("TEXT_SPLITTER", openWebuiRoutersRetrievalConfigForm.TEXT_SPLITTER);
                else
                    writer.WriteNull("TEXT_SPLITTER");

            if (openWebuiRoutersRetrievalConfigForm.CHUNK_SIZEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.CHUNK_SIZEOption.Value != null)
                    writer.WriteNumber("CHUNK_SIZE", openWebuiRoutersRetrievalConfigForm.CHUNK_SIZEOption.Value!.Value);
                else
                    writer.WriteNull("CHUNK_SIZE");

            if (openWebuiRoutersRetrievalConfigForm.CHUNK_OVERLAPOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.CHUNK_OVERLAPOption.Value != null)
                    writer.WriteNumber("CHUNK_OVERLAP", openWebuiRoutersRetrievalConfigForm.CHUNK_OVERLAPOption.Value!.Value);
                else
                    writer.WriteNull("CHUNK_OVERLAP");

            if (openWebuiRoutersRetrievalConfigForm.FILE_MAX_SIZEOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.FILE_MAX_SIZEOption.Value != null)
                    writer.WriteNumber("FILE_MAX_SIZE", openWebuiRoutersRetrievalConfigForm.FILE_MAX_SIZEOption.Value!.Value);
                else
                    writer.WriteNull("FILE_MAX_SIZE");

            if (openWebuiRoutersRetrievalConfigForm.FILE_MAX_COUNTOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.FILE_MAX_COUNTOption.Value != null)
                    writer.WriteNumber("FILE_MAX_COUNT", openWebuiRoutersRetrievalConfigForm.FILE_MAX_COUNTOption.Value!.Value);
                else
                    writer.WriteNull("FILE_MAX_COUNT");

            if (openWebuiRoutersRetrievalConfigForm.FILE_IMAGE_COMPRESSION_WIDTHOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.FILE_IMAGE_COMPRESSION_WIDTHOption.Value != null)
                    writer.WriteNumber("FILE_IMAGE_COMPRESSION_WIDTH", openWebuiRoutersRetrievalConfigForm.FILE_IMAGE_COMPRESSION_WIDTHOption.Value!.Value);
                else
                    writer.WriteNull("FILE_IMAGE_COMPRESSION_WIDTH");

            if (openWebuiRoutersRetrievalConfigForm.FILE_IMAGE_COMPRESSION_HEIGHTOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.FILE_IMAGE_COMPRESSION_HEIGHTOption.Value != null)
                    writer.WriteNumber("FILE_IMAGE_COMPRESSION_HEIGHT", openWebuiRoutersRetrievalConfigForm.FILE_IMAGE_COMPRESSION_HEIGHTOption.Value!.Value);
                else
                    writer.WriteNull("FILE_IMAGE_COMPRESSION_HEIGHT");

            if (openWebuiRoutersRetrievalConfigForm.ALLOWED_FILE_EXTENSIONSOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.ALLOWED_FILE_EXTENSIONSOption.Value != null)
                {
                    writer.WritePropertyName("ALLOWED_FILE_EXTENSIONS");
                    JsonSerializer.Serialize(writer, openWebuiRoutersRetrievalConfigForm.ALLOWED_FILE_EXTENSIONS, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ALLOWED_FILE_EXTENSIONS");
            if (openWebuiRoutersRetrievalConfigForm.ENABLE_GOOGLE_DRIVE_INTEGRATIONOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.ENABLE_GOOGLE_DRIVE_INTEGRATIONOption.Value != null)
                    writer.WriteBoolean("ENABLE_GOOGLE_DRIVE_INTEGRATION", openWebuiRoutersRetrievalConfigForm.ENABLE_GOOGLE_DRIVE_INTEGRATIONOption.Value!.Value);
                else
                    writer.WriteNull("ENABLE_GOOGLE_DRIVE_INTEGRATION");

            if (openWebuiRoutersRetrievalConfigForm.ENABLE_ONEDRIVE_INTEGRATIONOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.ENABLE_ONEDRIVE_INTEGRATIONOption.Value != null)
                    writer.WriteBoolean("ENABLE_ONEDRIVE_INTEGRATION", openWebuiRoutersRetrievalConfigForm.ENABLE_ONEDRIVE_INTEGRATIONOption.Value!.Value);
                else
                    writer.WriteNull("ENABLE_ONEDRIVE_INTEGRATION");

            if (openWebuiRoutersRetrievalConfigForm.WebOption.IsSet)
                if (openWebuiRoutersRetrievalConfigForm.WebOption.Value != null)
                {
                    writer.WritePropertyName("web");
                    JsonSerializer.Serialize(writer, openWebuiRoutersRetrievalConfigForm.Web, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("web");
        }
    }
}
