// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BannerModel
    /// </summary>
    public partial class BannerModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BannerModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="type">type</param>
        /// <param name="content">content</param>
        /// <param name="dismissible">dismissible</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="title">title</param>
        [JsonConstructor]
        public BannerModel(string id, string type, string content, bool dismissible, int timestamp, Option<string?> title = default)
        {
            Id = id;
            Type = type;
            Content = content;
            Dismissible = dismissible;
            Timestamp = timestamp;
            TitleOption = title;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets Dismissible
        /// </summary>
        [JsonPropertyName("dismissible")]
        public bool Dismissible { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public int Timestamp { get; set; }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BannerModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Dismissible: ").Append(Dismissible).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BannerModel" />
    /// </summary>
    public class BannerModelJsonConverter : JsonConverter<BannerModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="BannerModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BannerModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> type = default;
            Option<string?> content = default;
            Option<bool?> dismissible = default;
            Option<int?> timestamp = default;
            Option<string?> title = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dismissible":
                            dismissible = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "timestamp":
                            timestamp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class BannerModel.", nameof(id));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class BannerModel.", nameof(type));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class BannerModel.", nameof(content));

            if (!dismissible.IsSet)
                throw new ArgumentException("Property is required for class BannerModel.", nameof(dismissible));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class BannerModel.", nameof(timestamp));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BannerModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class BannerModel.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class BannerModel.");

            if (dismissible.IsSet && dismissible.Value == null)
                throw new ArgumentNullException(nameof(dismissible), "Property is not nullable for class BannerModel.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class BannerModel.");

            return new BannerModel(id.Value!, type.Value!, content.Value!, dismissible.Value!.Value!, timestamp.Value!.Value!, title);
        }

        /// <summary>
        /// Serializes a <see cref="BannerModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bannerModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BannerModel bannerModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bannerModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BannerModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bannerModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BannerModel bannerModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bannerModel.Id == null)
                throw new ArgumentNullException(nameof(bannerModel.Id), "Property is required for class BannerModel.");

            if (bannerModel.Type == null)
                throw new ArgumentNullException(nameof(bannerModel.Type), "Property is required for class BannerModel.");

            if (bannerModel.Content == null)
                throw new ArgumentNullException(nameof(bannerModel.Content), "Property is required for class BannerModel.");

            writer.WriteString("id", bannerModel.Id);

            writer.WriteString("type", bannerModel.Type);

            writer.WriteString("content", bannerModel.Content);

            writer.WriteBoolean("dismissible", bannerModel.Dismissible);

            writer.WriteNumber("timestamp", bannerModel.Timestamp);

            if (bannerModel.TitleOption.IsSet)
                if (bannerModel.TitleOption.Value != null)
                    writer.WriteString("title", bannerModel.Title);
                else
                    writer.WriteNull("title");
        }
    }
}
