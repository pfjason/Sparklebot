// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserPermissions
    /// </summary>
    public partial class UserPermissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPermissions" /> class.
        /// </summary>
        /// <param name="workspace">workspace</param>
        /// <param name="sharing">sharing</param>
        /// <param name="chat">chat</param>
        /// <param name="features">features</param>
        [JsonConstructor]
        public UserPermissions(WorkspacePermissions workspace, SharingPermissions sharing, ChatPermissions chat, FeaturesPermissions features)
        {
            Workspace = workspace;
            Sharing = sharing;
            Chat = chat;
            Features = features;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [JsonPropertyName("workspace")]
        public WorkspacePermissions Workspace { get; set; }

        /// <summary>
        /// Gets or Sets Sharing
        /// </summary>
        [JsonPropertyName("sharing")]
        public SharingPermissions Sharing { get; set; }

        /// <summary>
        /// Gets or Sets Chat
        /// </summary>
        [JsonPropertyName("chat")]
        public ChatPermissions Chat { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [JsonPropertyName("features")]
        public FeaturesPermissions Features { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPermissions {\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  Sharing: ").Append(Sharing).Append("\n");
            sb.Append("  Chat: ").Append(Chat).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserPermissions" />
    /// </summary>
    public class UserPermissionsJsonConverter : JsonConverter<UserPermissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserPermissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserPermissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<WorkspacePermissions?> workspace = default;
            Option<SharingPermissions?> sharing = default;
            Option<ChatPermissions?> chat = default;
            Option<FeaturesPermissions?> features = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "workspace":
                            workspace = new Option<WorkspacePermissions?>(JsonSerializer.Deserialize<WorkspacePermissions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "sharing":
                            sharing = new Option<SharingPermissions?>(JsonSerializer.Deserialize<SharingPermissions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "chat":
                            chat = new Option<ChatPermissions?>(JsonSerializer.Deserialize<ChatPermissions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "features":
                            features = new Option<FeaturesPermissions?>(JsonSerializer.Deserialize<FeaturesPermissions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!workspace.IsSet)
                throw new ArgumentException("Property is required for class UserPermissions.", nameof(workspace));

            if (!sharing.IsSet)
                throw new ArgumentException("Property is required for class UserPermissions.", nameof(sharing));

            if (!chat.IsSet)
                throw new ArgumentException("Property is required for class UserPermissions.", nameof(chat));

            if (!features.IsSet)
                throw new ArgumentException("Property is required for class UserPermissions.", nameof(features));

            if (workspace.IsSet && workspace.Value == null)
                throw new ArgumentNullException(nameof(workspace), "Property is not nullable for class UserPermissions.");

            if (sharing.IsSet && sharing.Value == null)
                throw new ArgumentNullException(nameof(sharing), "Property is not nullable for class UserPermissions.");

            if (chat.IsSet && chat.Value == null)
                throw new ArgumentNullException(nameof(chat), "Property is not nullable for class UserPermissions.");

            if (features.IsSet && features.Value == null)
                throw new ArgumentNullException(nameof(features), "Property is not nullable for class UserPermissions.");

            return new UserPermissions(workspace.Value!, sharing.Value!, chat.Value!, features.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserPermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserPermissions userPermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userPermissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserPermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserPermissions userPermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userPermissions.Workspace == null)
                throw new ArgumentNullException(nameof(userPermissions.Workspace), "Property is required for class UserPermissions.");

            if (userPermissions.Sharing == null)
                throw new ArgumentNullException(nameof(userPermissions.Sharing), "Property is required for class UserPermissions.");

            if (userPermissions.Chat == null)
                throw new ArgumentNullException(nameof(userPermissions.Chat), "Property is required for class UserPermissions.");

            if (userPermissions.Features == null)
                throw new ArgumentNullException(nameof(userPermissions.Features), "Property is required for class UserPermissions.");

            writer.WritePropertyName("workspace");
            JsonSerializer.Serialize(writer, userPermissions.Workspace, jsonSerializerOptions);
            writer.WritePropertyName("sharing");
            JsonSerializer.Serialize(writer, userPermissions.Sharing, jsonSerializerOptions);
            writer.WritePropertyName("chat");
            JsonSerializer.Serialize(writer, userPermissions.Chat, jsonSerializerOptions);
            writer.WritePropertyName("features");
            JsonSerializer.Serialize(writer, userPermissions.Features, jsonSerializerOptions);
        }
    }
}
