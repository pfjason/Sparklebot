// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FileModel
    /// </summary>
    public partial class FileModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="filename">filename</param>
        /// <param name="hash">hash</param>
        /// <param name="path">path</param>
        /// <param name="data">data</param>
        /// <param name="meta">meta</param>
        /// <param name="accessControl">accessControl</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public FileModel(string id, string userId, string filename, Option<string?> hash = default, Option<string?> path = default, Option<Object?> data = default, Option<Object?> meta = default, Option<Object?> accessControl = default, int? createdAt = default, int? updatedAt = default)
        {
            Id = id;
            UserId = userId;
            Filename = filename;
            HashOption = hash;
            PathOption = path;
            DataOption = data;
            MetaOption = meta;
            AccessControlOption = accessControl;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [JsonPropertyName("filename")]
        public string Filename { get; set; }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public string? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Meta
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> MetaOption { get; private set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public Object? Meta { get { return this.MetaOption; } set { this.MetaOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccessControl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> AccessControlOption { get; private set; }

        /// <summary>
        /// Gets or Sets AccessControl
        /// </summary>
        [JsonPropertyName("access_control")]
        public Object? AccessControl { get { return this.AccessControlOption; } set { this.AccessControlOption = new(value); } }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public int? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  AccessControl: ").Append(AccessControl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileModel" />
    /// </summary>
    public class FileModelJsonConverter : JsonConverter<FileModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> userId = default;
            Option<string?> filename = default;
            Option<string?> hash = default;
            Option<string?> path = default;
            Option<Object?> data = default;
            Option<Object?> meta = default;
            Option<Object?> accessControl = default;
            Option<int?> createdAt = default;
            Option<int?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "filename":
                            filename = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "meta":
                            meta = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "access_control":
                            accessControl = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "created_at":
                            createdAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updated_at":
                            updatedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class FileModel.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class FileModel.", nameof(userId));

            if (!filename.IsSet)
                throw new ArgumentException("Property is required for class FileModel.", nameof(filename));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class FileModel.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class FileModel.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FileModel.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class FileModel.");

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename), "Property is not nullable for class FileModel.");

            return new FileModel(id.Value!, userId.Value!, filename.Value!, hash, path, data, meta, accessControl, createdAt.Value!, updatedAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FileModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileModel fileModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileModel fileModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileModel.Id == null)
                throw new ArgumentNullException(nameof(fileModel.Id), "Property is required for class FileModel.");

            if (fileModel.UserId == null)
                throw new ArgumentNullException(nameof(fileModel.UserId), "Property is required for class FileModel.");

            if (fileModel.Filename == null)
                throw new ArgumentNullException(nameof(fileModel.Filename), "Property is required for class FileModel.");

            writer.WriteString("id", fileModel.Id);

            writer.WriteString("user_id", fileModel.UserId);

            writer.WriteString("filename", fileModel.Filename);

            if (fileModel.HashOption.IsSet)
                if (fileModel.HashOption.Value != null)
                    writer.WriteString("hash", fileModel.Hash);
                else
                    writer.WriteNull("hash");

            if (fileModel.PathOption.IsSet)
                if (fileModel.PathOption.Value != null)
                    writer.WriteString("path", fileModel.Path);
                else
                    writer.WriteNull("path");

            if (fileModel.DataOption.IsSet)
                if (fileModel.DataOption.Value != null)
                {
                    writer.WritePropertyName("data");
                    JsonSerializer.Serialize(writer, fileModel.Data, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("data");
            if (fileModel.MetaOption.IsSet)
                if (fileModel.MetaOption.Value != null)
                {
                    writer.WritePropertyName("meta");
                    JsonSerializer.Serialize(writer, fileModel.Meta, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("meta");
            if (fileModel.AccessControlOption.IsSet)
                if (fileModel.AccessControlOption.Value != null)
                {
                    writer.WritePropertyName("access_control");
                    JsonSerializer.Serialize(writer, fileModel.AccessControl, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("access_control");
            if (fileModel.CreatedAt != null)
                writer.WriteNumber("created_at", fileModel.CreatedAt.Value);
            else
                writer.WriteNull("created_at");

            if (fileModel.UpdatedAt != null)
                writer.WriteNumber("updated_at", fileModel.UpdatedAt.Value);
            else
                writer.WriteNull("updated_at");
        }
    }
}
