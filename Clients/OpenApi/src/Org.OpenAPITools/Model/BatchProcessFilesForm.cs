// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchProcessFilesForm
    /// </summary>
    public partial class BatchProcessFilesForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessFilesForm" /> class.
        /// </summary>
        /// <param name="files">files</param>
        /// <param name="collectionName">collectionName</param>
        [JsonConstructor]
        public BatchProcessFilesForm(List<FileModel> files, string collectionName)
        {
            Files = files;
            CollectionName = collectionName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [JsonPropertyName("files")]
        public List<FileModel> Files { get; set; }

        /// <summary>
        /// Gets or Sets CollectionName
        /// </summary>
        [JsonPropertyName("collection_name")]
        public string CollectionName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchProcessFilesForm {\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  CollectionName: ").Append(CollectionName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BatchProcessFilesForm" />
    /// </summary>
    public class BatchProcessFilesFormJsonConverter : JsonConverter<BatchProcessFilesForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="BatchProcessFilesForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BatchProcessFilesForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<FileModel>?> files = default;
            Option<string?> collectionName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "files":
                            files = new Option<List<FileModel>?>(JsonSerializer.Deserialize<List<FileModel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "collection_name":
                            collectionName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!files.IsSet)
                throw new ArgumentException("Property is required for class BatchProcessFilesForm.", nameof(files));

            if (!collectionName.IsSet)
                throw new ArgumentException("Property is required for class BatchProcessFilesForm.", nameof(collectionName));

            if (files.IsSet && files.Value == null)
                throw new ArgumentNullException(nameof(files), "Property is not nullable for class BatchProcessFilesForm.");

            if (collectionName.IsSet && collectionName.Value == null)
                throw new ArgumentNullException(nameof(collectionName), "Property is not nullable for class BatchProcessFilesForm.");

            return new BatchProcessFilesForm(files.Value!, collectionName.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="BatchProcessFilesForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="batchProcessFilesForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BatchProcessFilesForm batchProcessFilesForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, batchProcessFilesForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BatchProcessFilesForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="batchProcessFilesForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BatchProcessFilesForm batchProcessFilesForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (batchProcessFilesForm.Files == null)
                throw new ArgumentNullException(nameof(batchProcessFilesForm.Files), "Property is required for class BatchProcessFilesForm.");

            if (batchProcessFilesForm.CollectionName == null)
                throw new ArgumentNullException(nameof(batchProcessFilesForm.CollectionName), "Property is required for class BatchProcessFilesForm.");

            writer.WritePropertyName("files");
            JsonSerializer.Serialize(writer, batchProcessFilesForm.Files, jsonSerializerOptions);
            writer.WriteString("collection_name", batchProcessFilesForm.CollectionName);
        }
    }
}
