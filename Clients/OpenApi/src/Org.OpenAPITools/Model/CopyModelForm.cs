// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CopyModelForm
    /// </summary>
    public partial class CopyModelForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CopyModelForm" /> class.
        /// </summary>
        /// <param name="source">source</param>
        /// <param name="destination">destination</param>
        [JsonConstructor]
        public CopyModelForm(string source, string destination)
        {
            Source = source;
            Destination = destination;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [JsonPropertyName("source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [JsonPropertyName("destination")]
        public string Destination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CopyModelForm {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CopyModelForm" />
    /// </summary>
    public class CopyModelFormJsonConverter : JsonConverter<CopyModelForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="CopyModelForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CopyModelForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> source = default;
            Option<string?> destination = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "source":
                            source = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "destination":
                            destination = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!source.IsSet)
                throw new ArgumentException("Property is required for class CopyModelForm.", nameof(source));

            if (!destination.IsSet)
                throw new ArgumentException("Property is required for class CopyModelForm.", nameof(destination));

            if (source.IsSet && source.Value == null)
                throw new ArgumentNullException(nameof(source), "Property is not nullable for class CopyModelForm.");

            if (destination.IsSet && destination.Value == null)
                throw new ArgumentNullException(nameof(destination), "Property is not nullable for class CopyModelForm.");

            return new CopyModelForm(source.Value!, destination.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CopyModelForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CopyModelForm copyModelForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, copyModelForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CopyModelForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="copyModelForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CopyModelForm copyModelForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (copyModelForm.Source == null)
                throw new ArgumentNullException(nameof(copyModelForm.Source), "Property is required for class CopyModelForm.");

            if (copyModelForm.Destination == null)
                throw new ArgumentNullException(nameof(copyModelForm.Destination), "Property is required for class CopyModelForm.");

            writer.WriteString("source", copyModelForm.Source);

            writer.WriteString("destination", copyModelForm.Destination);
        }
    }
}
