// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FileModelResponse
    /// </summary>
    public partial class FileModelResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileModelResponse" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="userId">userId</param>
        /// <param name="filename">filename</param>
        /// <param name="meta">meta</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="hash">hash</param>
        /// <param name="data">data</param>
        [JsonConstructor]
        public FileModelResponse(string id, string userId, string filename, FileMeta meta, int createdAt, int updatedAt, Option<Hash?> hash = default, Option<Data?> data = default)
        {
            Id = id;
            UserId = userId;
            Filename = filename;
            Meta = meta;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            HashOption = hash;
            DataOption = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("user_id")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [JsonPropertyName("filename")]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [JsonPropertyName("meta")]
        public FileMeta Meta { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("created_at")]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updated_at")]
        public int UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Hash?> HashOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public Hash? Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Data?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Data? Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileModelResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileModelResponse" />
    /// </summary>
    public class FileModelResponseJsonConverter : JsonConverter<FileModelResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileModelResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileModelResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> userId = default;
            Option<string?> filename = default;
            Option<FileMeta?> meta = default;
            Option<int?> createdAt = default;
            Option<int?> updatedAt = default;
            Option<Hash?> hash = default;
            Option<Data?> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_id":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "filename":
                            filename = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "meta":
                            meta = new Option<FileMeta?>(JsonSerializer.Deserialize<FileMeta>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            createdAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updated_at":
                            updatedAt = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "hash":
                            hash = new Option<Hash?>(JsonSerializer.Deserialize<Hash>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "data":
                            data = new Option<Data?>(JsonSerializer.Deserialize<Data>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class FileModelResponse.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class FileModelResponse.", nameof(userId));

            if (!filename.IsSet)
                throw new ArgumentException("Property is required for class FileModelResponse.", nameof(filename));

            if (!meta.IsSet)
                throw new ArgumentException("Property is required for class FileModelResponse.", nameof(meta));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class FileModelResponse.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class FileModelResponse.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FileModelResponse.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class FileModelResponse.");

            if (filename.IsSet && filename.Value == null)
                throw new ArgumentNullException(nameof(filename), "Property is not nullable for class FileModelResponse.");

            if (meta.IsSet && meta.Value == null)
                throw new ArgumentNullException(nameof(meta), "Property is not nullable for class FileModelResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class FileModelResponse.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class FileModelResponse.");

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class FileModelResponse.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class FileModelResponse.");

            return new FileModelResponse(id.Value!, userId.Value!, filename.Value!, meta.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, hash, data);
        }

        /// <summary>
        /// Serializes a <see cref="FileModelResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileModelResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileModelResponse fileModelResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileModelResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileModelResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileModelResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileModelResponse fileModelResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileModelResponse.Id == null)
                throw new ArgumentNullException(nameof(fileModelResponse.Id), "Property is required for class FileModelResponse.");

            if (fileModelResponse.UserId == null)
                throw new ArgumentNullException(nameof(fileModelResponse.UserId), "Property is required for class FileModelResponse.");

            if (fileModelResponse.Filename == null)
                throw new ArgumentNullException(nameof(fileModelResponse.Filename), "Property is required for class FileModelResponse.");

            if (fileModelResponse.Meta == null)
                throw new ArgumentNullException(nameof(fileModelResponse.Meta), "Property is required for class FileModelResponse.");

            if (fileModelResponse.HashOption.IsSet && fileModelResponse.Hash == null)
                throw new ArgumentNullException(nameof(fileModelResponse.Hash), "Property is required for class FileModelResponse.");

            if (fileModelResponse.DataOption.IsSet && fileModelResponse.Data == null)
                throw new ArgumentNullException(nameof(fileModelResponse.Data), "Property is required for class FileModelResponse.");

            writer.WriteString("id", fileModelResponse.Id);

            writer.WriteString("user_id", fileModelResponse.UserId);

            writer.WriteString("filename", fileModelResponse.Filename);

            writer.WritePropertyName("meta");
            JsonSerializer.Serialize(writer, fileModelResponse.Meta, jsonSerializerOptions);
            writer.WriteNumber("created_at", fileModelResponse.CreatedAt);

            writer.WriteNumber("updated_at", fileModelResponse.UpdatedAt);

            if (fileModelResponse.HashOption.IsSet)
            {
                writer.WritePropertyName("hash");
                JsonSerializer.Serialize(writer, fileModelResponse.Hash, jsonSerializerOptions);
            }
            if (fileModelResponse.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, fileModelResponse.Data, jsonSerializerOptions);
            }
        }
    }
}
