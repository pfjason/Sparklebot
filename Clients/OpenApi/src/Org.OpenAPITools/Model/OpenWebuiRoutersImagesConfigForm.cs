// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OpenWebuiRoutersImagesConfigForm
    /// </summary>
    public partial class OpenWebuiRoutersImagesConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenWebuiRoutersImagesConfigForm" /> class.
        /// </summary>
        /// <param name="enabled">enabled</param>
        /// <param name="engine">engine</param>
        /// <param name="promptGeneration">promptGeneration</param>
        /// <param name="openai">openai</param>
        /// <param name="automatic1111">automatic1111</param>
        /// <param name="comfyui">comfyui</param>
        /// <param name="gemini">gemini</param>
        [JsonConstructor]
        public OpenWebuiRoutersImagesConfigForm(bool enabled, string engine, bool promptGeneration, OpenWebuiRoutersImagesOpenAIConfigForm openai, Automatic1111ConfigForm automatic1111, ComfyUIConfigForm comfyui, GeminiConfigForm gemini)
        {
            Enabled = enabled;
            Engine = engine;
            PromptGeneration = promptGeneration;
            Openai = openai;
            Automatic1111 = automatic1111;
            Comfyui = comfyui;
            Gemini = gemini;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [JsonPropertyName("enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Engine
        /// </summary>
        [JsonPropertyName("engine")]
        public string Engine { get; set; }

        /// <summary>
        /// Gets or Sets PromptGeneration
        /// </summary>
        [JsonPropertyName("prompt_generation")]
        public bool PromptGeneration { get; set; }

        /// <summary>
        /// Gets or Sets Openai
        /// </summary>
        [JsonPropertyName("openai")]
        public OpenWebuiRoutersImagesOpenAIConfigForm Openai { get; set; }

        /// <summary>
        /// Gets or Sets Automatic1111
        /// </summary>
        [JsonPropertyName("automatic1111")]
        public Automatic1111ConfigForm Automatic1111 { get; set; }

        /// <summary>
        /// Gets or Sets Comfyui
        /// </summary>
        [JsonPropertyName("comfyui")]
        public ComfyUIConfigForm Comfyui { get; set; }

        /// <summary>
        /// Gets or Sets Gemini
        /// </summary>
        [JsonPropertyName("gemini")]
        public GeminiConfigForm Gemini { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenWebuiRoutersImagesConfigForm {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Engine: ").Append(Engine).Append("\n");
            sb.Append("  PromptGeneration: ").Append(PromptGeneration).Append("\n");
            sb.Append("  Openai: ").Append(Openai).Append("\n");
            sb.Append("  Automatic1111: ").Append(Automatic1111).Append("\n");
            sb.Append("  Comfyui: ").Append(Comfyui).Append("\n");
            sb.Append("  Gemini: ").Append(Gemini).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OpenWebuiRoutersImagesConfigForm" />
    /// </summary>
    public class OpenWebuiRoutersImagesConfigFormJsonConverter : JsonConverter<OpenWebuiRoutersImagesConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="OpenWebuiRoutersImagesConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OpenWebuiRoutersImagesConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> enabled = default;
            Option<string?> engine = default;
            Option<bool?> promptGeneration = default;
            Option<OpenWebuiRoutersImagesOpenAIConfigForm?> openai = default;
            Option<Automatic1111ConfigForm?> automatic1111 = default;
            Option<ComfyUIConfigForm?> comfyui = default;
            Option<GeminiConfigForm?> gemini = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "engine":
                            engine = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prompt_generation":
                            promptGeneration = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "openai":
                            openai = new Option<OpenWebuiRoutersImagesOpenAIConfigForm?>(JsonSerializer.Deserialize<OpenWebuiRoutersImagesOpenAIConfigForm>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "automatic1111":
                            automatic1111 = new Option<Automatic1111ConfigForm?>(JsonSerializer.Deserialize<Automatic1111ConfigForm>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "comfyui":
                            comfyui = new Option<ComfyUIConfigForm?>(JsonSerializer.Deserialize<ComfyUIConfigForm>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "gemini":
                            gemini = new Option<GeminiConfigForm?>(JsonSerializer.Deserialize<GeminiConfigForm>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!enabled.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesConfigForm.", nameof(enabled));

            if (!engine.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesConfigForm.", nameof(engine));

            if (!promptGeneration.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesConfigForm.", nameof(promptGeneration));

            if (!openai.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesConfigForm.", nameof(openai));

            if (!automatic1111.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesConfigForm.", nameof(automatic1111));

            if (!comfyui.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesConfigForm.", nameof(comfyui));

            if (!gemini.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersImagesConfigForm.", nameof(gemini));

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class OpenWebuiRoutersImagesConfigForm.");

            if (engine.IsSet && engine.Value == null)
                throw new ArgumentNullException(nameof(engine), "Property is not nullable for class OpenWebuiRoutersImagesConfigForm.");

            if (promptGeneration.IsSet && promptGeneration.Value == null)
                throw new ArgumentNullException(nameof(promptGeneration), "Property is not nullable for class OpenWebuiRoutersImagesConfigForm.");

            if (openai.IsSet && openai.Value == null)
                throw new ArgumentNullException(nameof(openai), "Property is not nullable for class OpenWebuiRoutersImagesConfigForm.");

            if (automatic1111.IsSet && automatic1111.Value == null)
                throw new ArgumentNullException(nameof(automatic1111), "Property is not nullable for class OpenWebuiRoutersImagesConfigForm.");

            if (comfyui.IsSet && comfyui.Value == null)
                throw new ArgumentNullException(nameof(comfyui), "Property is not nullable for class OpenWebuiRoutersImagesConfigForm.");

            if (gemini.IsSet && gemini.Value == null)
                throw new ArgumentNullException(nameof(gemini), "Property is not nullable for class OpenWebuiRoutersImagesConfigForm.");

            return new OpenWebuiRoutersImagesConfigForm(enabled.Value!.Value!, engine.Value!, promptGeneration.Value!.Value!, openai.Value!, automatic1111.Value!, comfyui.Value!, gemini.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="OpenWebuiRoutersImagesConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, openWebuiRoutersImagesConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OpenWebuiRoutersImagesConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersImagesConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OpenWebuiRoutersImagesConfigForm openWebuiRoutersImagesConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (openWebuiRoutersImagesConfigForm.Engine == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersImagesConfigForm.Engine), "Property is required for class OpenWebuiRoutersImagesConfigForm.");

            if (openWebuiRoutersImagesConfigForm.Openai == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersImagesConfigForm.Openai), "Property is required for class OpenWebuiRoutersImagesConfigForm.");

            if (openWebuiRoutersImagesConfigForm.Automatic1111 == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersImagesConfigForm.Automatic1111), "Property is required for class OpenWebuiRoutersImagesConfigForm.");

            if (openWebuiRoutersImagesConfigForm.Comfyui == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersImagesConfigForm.Comfyui), "Property is required for class OpenWebuiRoutersImagesConfigForm.");

            if (openWebuiRoutersImagesConfigForm.Gemini == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersImagesConfigForm.Gemini), "Property is required for class OpenWebuiRoutersImagesConfigForm.");

            writer.WriteBoolean("enabled", openWebuiRoutersImagesConfigForm.Enabled);

            writer.WriteString("engine", openWebuiRoutersImagesConfigForm.Engine);

            writer.WriteBoolean("prompt_generation", openWebuiRoutersImagesConfigForm.PromptGeneration);

            writer.WritePropertyName("openai");
            JsonSerializer.Serialize(writer, openWebuiRoutersImagesConfigForm.Openai, jsonSerializerOptions);
            writer.WritePropertyName("automatic1111");
            JsonSerializer.Serialize(writer, openWebuiRoutersImagesConfigForm.Automatic1111, jsonSerializerOptions);
            writer.WritePropertyName("comfyui");
            JsonSerializer.Serialize(writer, openWebuiRoutersImagesConfigForm.Comfyui, jsonSerializerOptions);
            writer.WritePropertyName("gemini");
            JsonSerializer.Serialize(writer, openWebuiRoutersImagesConfigForm.Gemini, jsonSerializerOptions);
        }
    }
}
