// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KnowledgeResponseFilesInner
    /// </summary>
    public partial class KnowledgeResponseFilesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KnowledgeResponseFilesInner" /> class.
        /// </summary>
        /// <param name="fileMetadataResponse"></param>
        /// <param name="object"></param>
        public KnowledgeResponseFilesInner(Option<FileMetadataResponse?> fileMetadataResponse, Option<Object?> @object)
        {
            FileMetadataResponseOption = fileMetadataResponse;
            ObjectOption = @object;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of FileMetadataResponse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FileMetadataResponse?> FileMetadataResponseOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileMetadataResponse
        /// </summary>
        public FileMetadataResponse? FileMetadataResponse { get { return this.FileMetadataResponseOption; } set { this.FileMetadataResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of Object
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ObjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        public Object? Object { get { return this.ObjectOption; } set { this.ObjectOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KnowledgeResponseFilesInner {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KnowledgeResponseFilesInner" />
    /// </summary>
    public class KnowledgeResponseFilesInnerJsonConverter : JsonConverter<KnowledgeResponseFilesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="KnowledgeResponseFilesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KnowledgeResponseFilesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            FileMetadataResponse? fileMetadataResponse = default;
            Object? varObject = default;

            Utf8JsonReader utf8JsonReaderAnyOf = utf8JsonReader;
            while (utf8JsonReaderAnyOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderAnyOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderAnyOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderAnyOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderAnyOf.CurrentDepth)
                    break;

                if (utf8JsonReaderAnyOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderAnyOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderFileMetadataResponse = utf8JsonReader;
                    ClientUtils.TryDeserialize<FileMetadataResponse?>(ref utf8JsonReaderFileMetadataResponse, jsonSerializerOptions, out fileMetadataResponse);

                    Utf8JsonReader utf8JsonReaderObject = utf8JsonReader;
                    ClientUtils.TryDeserialize<Object?>(ref utf8JsonReaderObject, jsonSerializerOptions, out varObject);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            Option<FileMetadataResponse?> fileMetadataResponseParsedValue = fileMetadataResponse == null
                ? default
                : new Option<FileMetadataResponse?>(fileMetadataResponse);
            Option<Object?> varObjectParsedValue = varObject == null
                ? default
                : new Option<Object?>(varObject);

            return new KnowledgeResponseFilesInner(fileMetadataResponseParsedValue, varObjectParsedValue);
        }

        /// <summary>
        /// Serializes a <see cref="KnowledgeResponseFilesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="knowledgeResponseFilesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KnowledgeResponseFilesInner knowledgeResponseFilesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (knowledgeResponseFilesInner.FileMetadataResponseOption.IsSet && knowledgeResponseFilesInner.FileMetadataResponseOption.Value != null)
            {
                FileMetadataResponseJsonConverter FileMetadataResponseJsonConverter = (FileMetadataResponseJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(knowledgeResponseFilesInner.FileMetadataResponseOption.Value.GetType()));
                FileMetadataResponseJsonConverter.WriteProperties(writer, knowledgeResponseFilesInner.FileMetadataResponseOption.Value, jsonSerializerOptions);
            }

            if (knowledgeResponseFilesInner.ObjectOption.IsSet && knowledgeResponseFilesInner.ObjectOption.Value != null)

            WriteProperties(writer, knowledgeResponseFilesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KnowledgeResponseFilesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="knowledgeResponseFilesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KnowledgeResponseFilesInner knowledgeResponseFilesInner, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
