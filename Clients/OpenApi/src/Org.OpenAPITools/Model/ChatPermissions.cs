// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChatPermissions
    /// </summary>
    public partial class ChatPermissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatPermissions" /> class.
        /// </summary>
        /// <param name="controls">controls (default to true)</param>
        /// <param name="systemPrompt">systemPrompt (default to true)</param>
        /// <param name="fileUpload">fileUpload (default to true)</param>
        /// <param name="delete">delete (default to true)</param>
        /// <param name="edit">edit (default to true)</param>
        /// <param name="share">share (default to true)</param>
        /// <param name="export">export (default to true)</param>
        /// <param name="stt">stt (default to true)</param>
        /// <param name="tts">tts (default to true)</param>
        /// <param name="call">call (default to true)</param>
        /// <param name="multipleModels">multipleModels (default to true)</param>
        /// <param name="temporary">temporary (default to true)</param>
        /// <param name="temporaryEnforced">temporaryEnforced (default to false)</param>
        [JsonConstructor]
        public ChatPermissions(Option<bool?> controls = default, Option<bool?> systemPrompt = default, Option<bool?> fileUpload = default, Option<bool?> delete = default, Option<bool?> edit = default, Option<bool?> share = default, Option<bool?> export = default, Option<bool?> stt = default, Option<bool?> tts = default, Option<bool?> call = default, Option<bool?> multipleModels = default, Option<bool?> temporary = default, Option<bool?> temporaryEnforced = default)
        {
            ControlsOption = controls;
            SystemPromptOption = systemPrompt;
            FileUploadOption = fileUpload;
            DeleteOption = delete;
            EditOption = edit;
            ShareOption = share;
            ExportOption = export;
            SttOption = stt;
            TtsOption = tts;
            CallOption = call;
            MultipleModelsOption = multipleModels;
            TemporaryOption = temporary;
            TemporaryEnforcedOption = temporaryEnforced;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Controls
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ControlsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Controls
        /// </summary>
        [JsonPropertyName("controls")]
        public bool? Controls { get { return this.ControlsOption; } set { this.ControlsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SystemPrompt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SystemPromptOption { get; private set; }

        /// <summary>
        /// Gets or Sets SystemPrompt
        /// </summary>
        [JsonPropertyName("system_prompt")]
        public bool? SystemPrompt { get { return this.SystemPromptOption; } set { this.SystemPromptOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileUpload
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FileUploadOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileUpload
        /// </summary>
        [JsonPropertyName("file_upload")]
        public bool? FileUpload { get { return this.FileUploadOption; } set { this.FileUploadOption = new(value); } }

        /// <summary>
        /// Used to track the state of Delete
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeleteOption { get; private set; }

        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [JsonPropertyName("delete")]
        public bool? Delete { get { return this.DeleteOption; } set { this.DeleteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Edit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EditOption { get; private set; }

        /// <summary>
        /// Gets or Sets Edit
        /// </summary>
        [JsonPropertyName("edit")]
        public bool? Edit { get { return this.EditOption; } set { this.EditOption = new(value); } }

        /// <summary>
        /// Used to track the state of Share
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ShareOption { get; private set; }

        /// <summary>
        /// Gets or Sets Share
        /// </summary>
        [JsonPropertyName("share")]
        public bool? Share { get { return this.ShareOption; } set { this.ShareOption = new(value); } }

        /// <summary>
        /// Used to track the state of Export
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ExportOption { get; private set; }

        /// <summary>
        /// Gets or Sets Export
        /// </summary>
        [JsonPropertyName("export")]
        public bool? Export { get { return this.ExportOption; } set { this.ExportOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SttOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stt
        /// </summary>
        [JsonPropertyName("stt")]
        public bool? Stt { get { return this.SttOption; } set { this.SttOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TtsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tts
        /// </summary>
        [JsonPropertyName("tts")]
        public bool? Tts { get { return this.TtsOption; } set { this.TtsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Call
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CallOption { get; private set; }

        /// <summary>
        /// Gets or Sets Call
        /// </summary>
        [JsonPropertyName("call")]
        public bool? Call { get { return this.CallOption; } set { this.CallOption = new(value); } }

        /// <summary>
        /// Used to track the state of MultipleModels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> MultipleModelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets MultipleModels
        /// </summary>
        [JsonPropertyName("multiple_models")]
        public bool? MultipleModels { get { return this.MultipleModelsOption; } set { this.MultipleModelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Temporary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TemporaryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Temporary
        /// </summary>
        [JsonPropertyName("temporary")]
        public bool? Temporary { get { return this.TemporaryOption; } set { this.TemporaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of TemporaryEnforced
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TemporaryEnforcedOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemporaryEnforced
        /// </summary>
        [JsonPropertyName("temporary_enforced")]
        public bool? TemporaryEnforced { get { return this.TemporaryEnforcedOption; } set { this.TemporaryEnforcedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChatPermissions {\n");
            sb.Append("  Controls: ").Append(Controls).Append("\n");
            sb.Append("  SystemPrompt: ").Append(SystemPrompt).Append("\n");
            sb.Append("  FileUpload: ").Append(FileUpload).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  Edit: ").Append(Edit).Append("\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  Export: ").Append(Export).Append("\n");
            sb.Append("  Stt: ").Append(Stt).Append("\n");
            sb.Append("  Tts: ").Append(Tts).Append("\n");
            sb.Append("  Call: ").Append(Call).Append("\n");
            sb.Append("  MultipleModels: ").Append(MultipleModels).Append("\n");
            sb.Append("  Temporary: ").Append(Temporary).Append("\n");
            sb.Append("  TemporaryEnforced: ").Append(TemporaryEnforced).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChatPermissions" />
    /// </summary>
    public class ChatPermissionsJsonConverter : JsonConverter<ChatPermissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChatPermissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChatPermissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> controls = default;
            Option<bool?> systemPrompt = default;
            Option<bool?> fileUpload = default;
            Option<bool?> delete = default;
            Option<bool?> edit = default;
            Option<bool?> share = default;
            Option<bool?> export = default;
            Option<bool?> stt = default;
            Option<bool?> tts = default;
            Option<bool?> call = default;
            Option<bool?> multipleModels = default;
            Option<bool?> temporary = default;
            Option<bool?> temporaryEnforced = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "controls":
                            controls = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "system_prompt":
                            systemPrompt = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "file_upload":
                            fileUpload = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "delete":
                            delete = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "edit":
                            edit = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "share":
                            share = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "export":
                            export = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stt":
                            stt = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "tts":
                            tts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "call":
                            call = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "multiple_models":
                            multipleModels = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "temporary":
                            temporary = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "temporary_enforced":
                            temporaryEnforced = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (controls.IsSet && controls.Value == null)
                throw new ArgumentNullException(nameof(controls), "Property is not nullable for class ChatPermissions.");

            if (systemPrompt.IsSet && systemPrompt.Value == null)
                throw new ArgumentNullException(nameof(systemPrompt), "Property is not nullable for class ChatPermissions.");

            if (fileUpload.IsSet && fileUpload.Value == null)
                throw new ArgumentNullException(nameof(fileUpload), "Property is not nullable for class ChatPermissions.");

            if (delete.IsSet && delete.Value == null)
                throw new ArgumentNullException(nameof(delete), "Property is not nullable for class ChatPermissions.");

            if (edit.IsSet && edit.Value == null)
                throw new ArgumentNullException(nameof(edit), "Property is not nullable for class ChatPermissions.");

            if (share.IsSet && share.Value == null)
                throw new ArgumentNullException(nameof(share), "Property is not nullable for class ChatPermissions.");

            if (export.IsSet && export.Value == null)
                throw new ArgumentNullException(nameof(export), "Property is not nullable for class ChatPermissions.");

            if (stt.IsSet && stt.Value == null)
                throw new ArgumentNullException(nameof(stt), "Property is not nullable for class ChatPermissions.");

            if (tts.IsSet && tts.Value == null)
                throw new ArgumentNullException(nameof(tts), "Property is not nullable for class ChatPermissions.");

            if (call.IsSet && call.Value == null)
                throw new ArgumentNullException(nameof(call), "Property is not nullable for class ChatPermissions.");

            if (multipleModels.IsSet && multipleModels.Value == null)
                throw new ArgumentNullException(nameof(multipleModels), "Property is not nullable for class ChatPermissions.");

            if (temporary.IsSet && temporary.Value == null)
                throw new ArgumentNullException(nameof(temporary), "Property is not nullable for class ChatPermissions.");

            if (temporaryEnforced.IsSet && temporaryEnforced.Value == null)
                throw new ArgumentNullException(nameof(temporaryEnforced), "Property is not nullable for class ChatPermissions.");

            return new ChatPermissions(controls, systemPrompt, fileUpload, delete, edit, share, export, stt, tts, call, multipleModels, temporary, temporaryEnforced);
        }

        /// <summary>
        /// Serializes a <see cref="ChatPermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatPermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChatPermissions chatPermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, chatPermissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChatPermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="chatPermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChatPermissions chatPermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (chatPermissions.ControlsOption.IsSet)
                writer.WriteBoolean("controls", chatPermissions.ControlsOption.Value!.Value);

            if (chatPermissions.SystemPromptOption.IsSet)
                writer.WriteBoolean("system_prompt", chatPermissions.SystemPromptOption.Value!.Value);

            if (chatPermissions.FileUploadOption.IsSet)
                writer.WriteBoolean("file_upload", chatPermissions.FileUploadOption.Value!.Value);

            if (chatPermissions.DeleteOption.IsSet)
                writer.WriteBoolean("delete", chatPermissions.DeleteOption.Value!.Value);

            if (chatPermissions.EditOption.IsSet)
                writer.WriteBoolean("edit", chatPermissions.EditOption.Value!.Value);

            if (chatPermissions.ShareOption.IsSet)
                writer.WriteBoolean("share", chatPermissions.ShareOption.Value!.Value);

            if (chatPermissions.ExportOption.IsSet)
                writer.WriteBoolean("export", chatPermissions.ExportOption.Value!.Value);

            if (chatPermissions.SttOption.IsSet)
                writer.WriteBoolean("stt", chatPermissions.SttOption.Value!.Value);

            if (chatPermissions.TtsOption.IsSet)
                writer.WriteBoolean("tts", chatPermissions.TtsOption.Value!.Value);

            if (chatPermissions.CallOption.IsSet)
                writer.WriteBoolean("call", chatPermissions.CallOption.Value!.Value);

            if (chatPermissions.MultipleModelsOption.IsSet)
                writer.WriteBoolean("multiple_models", chatPermissions.MultipleModelsOption.Value!.Value);

            if (chatPermissions.TemporaryOption.IsSet)
                writer.WriteBoolean("temporary", chatPermissions.TemporaryOption.Value!.Value);

            if (chatPermissions.TemporaryEnforcedOption.IsSet)
                writer.WriteBoolean("temporary_enforced", chatPermissions.TemporaryEnforcedOption.Value!.Value);
        }
    }
}
