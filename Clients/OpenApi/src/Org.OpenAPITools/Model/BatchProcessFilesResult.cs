// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BatchProcessFilesResult
    /// </summary>
    public partial class BatchProcessFilesResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchProcessFilesResult" /> class.
        /// </summary>
        /// <param name="fileId">fileId</param>
        /// <param name="status">status</param>
        /// <param name="error">error</param>
        [JsonConstructor]
        public BatchProcessFilesResult(string fileId, string status, Option<string?> error = default)
        {
            FileId = fileId;
            Status = status;
            ErrorOption = error;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [JsonPropertyName("file_id")]
        public string FileId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public string? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchProcessFilesResult {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BatchProcessFilesResult" />
    /// </summary>
    public class BatchProcessFilesResultJsonConverter : JsonConverter<BatchProcessFilesResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="BatchProcessFilesResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BatchProcessFilesResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> fileId = default;
            Option<string?> status = default;
            Option<string?> error = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "file_id":
                            fileId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "error":
                            error = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!fileId.IsSet)
                throw new ArgumentException("Property is required for class BatchProcessFilesResult.", nameof(fileId));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class BatchProcessFilesResult.", nameof(status));

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class BatchProcessFilesResult.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class BatchProcessFilesResult.");

            return new BatchProcessFilesResult(fileId.Value!, status.Value!, error);
        }

        /// <summary>
        /// Serializes a <see cref="BatchProcessFilesResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="batchProcessFilesResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BatchProcessFilesResult batchProcessFilesResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, batchProcessFilesResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BatchProcessFilesResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="batchProcessFilesResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BatchProcessFilesResult batchProcessFilesResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (batchProcessFilesResult.FileId == null)
                throw new ArgumentNullException(nameof(batchProcessFilesResult.FileId), "Property is required for class BatchProcessFilesResult.");

            if (batchProcessFilesResult.Status == null)
                throw new ArgumentNullException(nameof(batchProcessFilesResult.Status), "Property is required for class BatchProcessFilesResult.");

            writer.WriteString("file_id", batchProcessFilesResult.FileId);

            writer.WriteString("status", batchProcessFilesResult.Status);

            if (batchProcessFilesResult.ErrorOption.IsSet)
                if (batchProcessFilesResult.ErrorOption.Value != null)
                    writer.WriteString("error", batchProcessFilesResult.Error);
                else
                    writer.WriteNull("error");
        }
    }
}
