// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GenerateImageForm
    /// </summary>
    public partial class GenerateImageForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateImageForm" /> class.
        /// </summary>
        /// <param name="prompt">prompt</param>
        /// <param name="model">model</param>
        /// <param name="size">size</param>
        /// <param name="n">n (default to 1)</param>
        /// <param name="negativePrompt">negativePrompt</param>
        [JsonConstructor]
        public GenerateImageForm(string prompt, Option<string?> model = default, Option<string?> size = default, Option<int?> n = default, Option<string?> negativePrompt = default)
        {
            Prompt = prompt;
            ModelOption = model;
            SizeOption = size;
            NOption = n;
            NegativePromptOption = negativePrompt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Prompt
        /// </summary>
        [JsonPropertyName("prompt")]
        public string Prompt { get; set; }

        /// <summary>
        /// Used to track the state of Model
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public string? Model { get { return this.ModelOption; } set { this.ModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public string? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of N
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NOption { get; private set; }

        /// <summary>
        /// Gets or Sets N
        /// </summary>
        [JsonPropertyName("n")]
        public int? N { get { return this.NOption; } set { this.NOption = new(value); } }

        /// <summary>
        /// Used to track the state of NegativePrompt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NegativePromptOption { get; private set; }

        /// <summary>
        /// Gets or Sets NegativePrompt
        /// </summary>
        [JsonPropertyName("negative_prompt")]
        public string? NegativePrompt { get { return this.NegativePromptOption; } set { this.NegativePromptOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenerateImageForm {\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  N: ").Append(N).Append("\n");
            sb.Append("  NegativePrompt: ").Append(NegativePrompt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GenerateImageForm" />
    /// </summary>
    public class GenerateImageFormJsonConverter : JsonConverter<GenerateImageForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="GenerateImageForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GenerateImageForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> prompt = default;
            Option<string?> model = default;
            Option<string?> size = default;
            Option<int?> n = default;
            Option<string?> negativePrompt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "prompt":
                            prompt = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "model":
                            model = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "size":
                            size = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "n":
                            n = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "negative_prompt":
                            negativePrompt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!prompt.IsSet)
                throw new ArgumentException("Property is required for class GenerateImageForm.", nameof(prompt));

            if (prompt.IsSet && prompt.Value == null)
                throw new ArgumentNullException(nameof(prompt), "Property is not nullable for class GenerateImageForm.");

            if (n.IsSet && n.Value == null)
                throw new ArgumentNullException(nameof(n), "Property is not nullable for class GenerateImageForm.");

            return new GenerateImageForm(prompt.Value!, model, size, n, negativePrompt);
        }

        /// <summary>
        /// Serializes a <see cref="GenerateImageForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateImageForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GenerateImageForm generateImageForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, generateImageForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GenerateImageForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="generateImageForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GenerateImageForm generateImageForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (generateImageForm.Prompt == null)
                throw new ArgumentNullException(nameof(generateImageForm.Prompt), "Property is required for class GenerateImageForm.");

            writer.WriteString("prompt", generateImageForm.Prompt);

            if (generateImageForm.ModelOption.IsSet)
                if (generateImageForm.ModelOption.Value != null)
                    writer.WriteString("model", generateImageForm.Model);
                else
                    writer.WriteNull("model");

            if (generateImageForm.SizeOption.IsSet)
                if (generateImageForm.SizeOption.Value != null)
                    writer.WriteString("size", generateImageForm.Size);
                else
                    writer.WriteNull("size");

            if (generateImageForm.NOption.IsSet)
                writer.WriteNumber("n", generateImageForm.NOption.Value!.Value);

            if (generateImageForm.NegativePromptOption.IsSet)
                if (generateImageForm.NegativePromptOption.Value != null)
                    writer.WriteString("negative_prompt", generateImageForm.NegativePrompt);
                else
                    writer.WriteNull("negative_prompt");
        }
    }
}
