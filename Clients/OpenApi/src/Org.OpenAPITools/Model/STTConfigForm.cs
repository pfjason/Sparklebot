// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// STTConfigForm
    /// </summary>
    public partial class STTConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="STTConfigForm" /> class.
        /// </summary>
        /// <param name="oPENAIAPIBASEURL">oPENAIAPIBASEURL</param>
        /// <param name="oPENAIAPIKEY">oPENAIAPIKEY</param>
        /// <param name="eNGINE">eNGINE</param>
        /// <param name="mODEL">mODEL</param>
        /// <param name="wHISPERMODEL">wHISPERMODEL</param>
        /// <param name="dEEPGRAMAPIKEY">dEEPGRAMAPIKEY</param>
        /// <param name="aZUREAPIKEY">aZUREAPIKEY</param>
        /// <param name="aZUREREGION">aZUREREGION</param>
        /// <param name="aZURELOCALES">aZURELOCALES</param>
        /// <param name="aZUREBASEURL">aZUREBASEURL</param>
        /// <param name="aZUREMAXSPEAKERS">aZUREMAXSPEAKERS</param>
        /// <param name="sUPPORTEDCONTENTTYPES">sUPPORTEDCONTENTTYPES</param>
        [JsonConstructor]
        public STTConfigForm(string oPENAIAPIBASEURL, string oPENAIAPIKEY, string eNGINE, string mODEL, string wHISPERMODEL, string dEEPGRAMAPIKEY, string aZUREAPIKEY, string aZUREREGION, string aZURELOCALES, string aZUREBASEURL, string aZUREMAXSPEAKERS, Option<List<string>?> sUPPORTEDCONTENTTYPES = default)
        {
            OPENAI_API_BASE_URL = oPENAIAPIBASEURL;
            OPENAI_API_KEY = oPENAIAPIKEY;
            ENGINE = eNGINE;
            MODEL = mODEL;
            WHISPER_MODEL = wHISPERMODEL;
            DEEPGRAM_API_KEY = dEEPGRAMAPIKEY;
            AZURE_API_KEY = aZUREAPIKEY;
            AZURE_REGION = aZUREREGION;
            AZURE_LOCALES = aZURELOCALES;
            AZURE_BASE_URL = aZUREBASEURL;
            AZURE_MAX_SPEAKERS = aZUREMAXSPEAKERS;
            SUPPORTED_CONTENT_TYPESOption = sUPPORTEDCONTENTTYPES;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OPENAI_API_BASE_URL
        /// </summary>
        [JsonPropertyName("OPENAI_API_BASE_URL")]
        public string OPENAI_API_BASE_URL { get; set; }

        /// <summary>
        /// Gets or Sets OPENAI_API_KEY
        /// </summary>
        [JsonPropertyName("OPENAI_API_KEY")]
        public string OPENAI_API_KEY { get; set; }

        /// <summary>
        /// Gets or Sets ENGINE
        /// </summary>
        [JsonPropertyName("ENGINE")]
        public string ENGINE { get; set; }

        /// <summary>
        /// Gets or Sets MODEL
        /// </summary>
        [JsonPropertyName("MODEL")]
        public string MODEL { get; set; }

        /// <summary>
        /// Gets or Sets WHISPER_MODEL
        /// </summary>
        [JsonPropertyName("WHISPER_MODEL")]
        public string WHISPER_MODEL { get; set; }

        /// <summary>
        /// Gets or Sets DEEPGRAM_API_KEY
        /// </summary>
        [JsonPropertyName("DEEPGRAM_API_KEY")]
        public string DEEPGRAM_API_KEY { get; set; }

        /// <summary>
        /// Gets or Sets AZURE_API_KEY
        /// </summary>
        [JsonPropertyName("AZURE_API_KEY")]
        public string AZURE_API_KEY { get; set; }

        /// <summary>
        /// Gets or Sets AZURE_REGION
        /// </summary>
        [JsonPropertyName("AZURE_REGION")]
        public string AZURE_REGION { get; set; }

        /// <summary>
        /// Gets or Sets AZURE_LOCALES
        /// </summary>
        [JsonPropertyName("AZURE_LOCALES")]
        public string AZURE_LOCALES { get; set; }

        /// <summary>
        /// Gets or Sets AZURE_BASE_URL
        /// </summary>
        [JsonPropertyName("AZURE_BASE_URL")]
        public string AZURE_BASE_URL { get; set; }

        /// <summary>
        /// Gets or Sets AZURE_MAX_SPEAKERS
        /// </summary>
        [JsonPropertyName("AZURE_MAX_SPEAKERS")]
        public string AZURE_MAX_SPEAKERS { get; set; }

        /// <summary>
        /// Used to track the state of SUPPORTED_CONTENT_TYPES
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> SUPPORTED_CONTENT_TYPESOption { get; private set; }

        /// <summary>
        /// Gets or Sets SUPPORTED_CONTENT_TYPES
        /// </summary>
        [JsonPropertyName("SUPPORTED_CONTENT_TYPES")]
        public List<string>? SUPPORTED_CONTENT_TYPES { get { return this.SUPPORTED_CONTENT_TYPESOption; } set { this.SUPPORTED_CONTENT_TYPESOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class STTConfigForm {\n");
            sb.Append("  OPENAI_API_BASE_URL: ").Append(OPENAI_API_BASE_URL).Append("\n");
            sb.Append("  OPENAI_API_KEY: ").Append(OPENAI_API_KEY).Append("\n");
            sb.Append("  ENGINE: ").Append(ENGINE).Append("\n");
            sb.Append("  MODEL: ").Append(MODEL).Append("\n");
            sb.Append("  WHISPER_MODEL: ").Append(WHISPER_MODEL).Append("\n");
            sb.Append("  DEEPGRAM_API_KEY: ").Append(DEEPGRAM_API_KEY).Append("\n");
            sb.Append("  AZURE_API_KEY: ").Append(AZURE_API_KEY).Append("\n");
            sb.Append("  AZURE_REGION: ").Append(AZURE_REGION).Append("\n");
            sb.Append("  AZURE_LOCALES: ").Append(AZURE_LOCALES).Append("\n");
            sb.Append("  AZURE_BASE_URL: ").Append(AZURE_BASE_URL).Append("\n");
            sb.Append("  AZURE_MAX_SPEAKERS: ").Append(AZURE_MAX_SPEAKERS).Append("\n");
            sb.Append("  SUPPORTED_CONTENT_TYPES: ").Append(SUPPORTED_CONTENT_TYPES).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="STTConfigForm" />
    /// </summary>
    public class STTConfigFormJsonConverter : JsonConverter<STTConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="STTConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override STTConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> oPENAIAPIBASEURL = default;
            Option<string?> oPENAIAPIKEY = default;
            Option<string?> eNGINE = default;
            Option<string?> mODEL = default;
            Option<string?> wHISPERMODEL = default;
            Option<string?> dEEPGRAMAPIKEY = default;
            Option<string?> aZUREAPIKEY = default;
            Option<string?> aZUREREGION = default;
            Option<string?> aZURELOCALES = default;
            Option<string?> aZUREBASEURL = default;
            Option<string?> aZUREMAXSPEAKERS = default;
            Option<List<string>?> sUPPORTEDCONTENTTYPES = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "OPENAI_API_BASE_URL":
                            oPENAIAPIBASEURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "OPENAI_API_KEY":
                            oPENAIAPIKEY = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ENGINE":
                            eNGINE = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "MODEL":
                            mODEL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "WHISPER_MODEL":
                            wHISPERMODEL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "DEEPGRAM_API_KEY":
                            dEEPGRAMAPIKEY = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AZURE_API_KEY":
                            aZUREAPIKEY = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AZURE_REGION":
                            aZUREREGION = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AZURE_LOCALES":
                            aZURELOCALES = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AZURE_BASE_URL":
                            aZUREBASEURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "AZURE_MAX_SPEAKERS":
                            aZUREMAXSPEAKERS = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "SUPPORTED_CONTENT_TYPES":
                            sUPPORTEDCONTENTTYPES = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!oPENAIAPIBASEURL.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(oPENAIAPIBASEURL));

            if (!oPENAIAPIKEY.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(oPENAIAPIKEY));

            if (!eNGINE.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(eNGINE));

            if (!mODEL.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(mODEL));

            if (!wHISPERMODEL.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(wHISPERMODEL));

            if (!dEEPGRAMAPIKEY.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(dEEPGRAMAPIKEY));

            if (!aZUREAPIKEY.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(aZUREAPIKEY));

            if (!aZUREREGION.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(aZUREREGION));

            if (!aZURELOCALES.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(aZURELOCALES));

            if (!aZUREBASEURL.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(aZUREBASEURL));

            if (!aZUREMAXSPEAKERS.IsSet)
                throw new ArgumentException("Property is required for class STTConfigForm.", nameof(aZUREMAXSPEAKERS));

            if (oPENAIAPIBASEURL.IsSet && oPENAIAPIBASEURL.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPIBASEURL), "Property is not nullable for class STTConfigForm.");

            if (oPENAIAPIKEY.IsSet && oPENAIAPIKEY.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPIKEY), "Property is not nullable for class STTConfigForm.");

            if (eNGINE.IsSet && eNGINE.Value == null)
                throw new ArgumentNullException(nameof(eNGINE), "Property is not nullable for class STTConfigForm.");

            if (mODEL.IsSet && mODEL.Value == null)
                throw new ArgumentNullException(nameof(mODEL), "Property is not nullable for class STTConfigForm.");

            if (wHISPERMODEL.IsSet && wHISPERMODEL.Value == null)
                throw new ArgumentNullException(nameof(wHISPERMODEL), "Property is not nullable for class STTConfigForm.");

            if (dEEPGRAMAPIKEY.IsSet && dEEPGRAMAPIKEY.Value == null)
                throw new ArgumentNullException(nameof(dEEPGRAMAPIKEY), "Property is not nullable for class STTConfigForm.");

            if (aZUREAPIKEY.IsSet && aZUREAPIKEY.Value == null)
                throw new ArgumentNullException(nameof(aZUREAPIKEY), "Property is not nullable for class STTConfigForm.");

            if (aZUREREGION.IsSet && aZUREREGION.Value == null)
                throw new ArgumentNullException(nameof(aZUREREGION), "Property is not nullable for class STTConfigForm.");

            if (aZURELOCALES.IsSet && aZURELOCALES.Value == null)
                throw new ArgumentNullException(nameof(aZURELOCALES), "Property is not nullable for class STTConfigForm.");

            if (aZUREBASEURL.IsSet && aZUREBASEURL.Value == null)
                throw new ArgumentNullException(nameof(aZUREBASEURL), "Property is not nullable for class STTConfigForm.");

            if (aZUREMAXSPEAKERS.IsSet && aZUREMAXSPEAKERS.Value == null)
                throw new ArgumentNullException(nameof(aZUREMAXSPEAKERS), "Property is not nullable for class STTConfigForm.");

            if (sUPPORTEDCONTENTTYPES.IsSet && sUPPORTEDCONTENTTYPES.Value == null)
                throw new ArgumentNullException(nameof(sUPPORTEDCONTENTTYPES), "Property is not nullable for class STTConfigForm.");

            return new STTConfigForm(oPENAIAPIBASEURL.Value!, oPENAIAPIKEY.Value!, eNGINE.Value!, mODEL.Value!, wHISPERMODEL.Value!, dEEPGRAMAPIKEY.Value!, aZUREAPIKEY.Value!, aZUREREGION.Value!, aZURELOCALES.Value!, aZUREBASEURL.Value!, aZUREMAXSPEAKERS.Value!, sUPPORTEDCONTENTTYPES);
        }

        /// <summary>
        /// Serializes a <see cref="STTConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sTTConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, STTConfigForm sTTConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, sTTConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="STTConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="sTTConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, STTConfigForm sTTConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (sTTConfigForm.OPENAI_API_BASE_URL == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.OPENAI_API_BASE_URL), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.OPENAI_API_KEY == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.OPENAI_API_KEY), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.ENGINE == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.ENGINE), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.MODEL == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.MODEL), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.WHISPER_MODEL == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.WHISPER_MODEL), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.DEEPGRAM_API_KEY == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.DEEPGRAM_API_KEY), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.AZURE_API_KEY == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.AZURE_API_KEY), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.AZURE_REGION == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.AZURE_REGION), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.AZURE_LOCALES == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.AZURE_LOCALES), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.AZURE_BASE_URL == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.AZURE_BASE_URL), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.AZURE_MAX_SPEAKERS == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.AZURE_MAX_SPEAKERS), "Property is required for class STTConfigForm.");

            if (sTTConfigForm.SUPPORTED_CONTENT_TYPESOption.IsSet && sTTConfigForm.SUPPORTED_CONTENT_TYPES == null)
                throw new ArgumentNullException(nameof(sTTConfigForm.SUPPORTED_CONTENT_TYPES), "Property is required for class STTConfigForm.");

            writer.WriteString("OPENAI_API_BASE_URL", sTTConfigForm.OPENAI_API_BASE_URL);

            writer.WriteString("OPENAI_API_KEY", sTTConfigForm.OPENAI_API_KEY);

            writer.WriteString("ENGINE", sTTConfigForm.ENGINE);

            writer.WriteString("MODEL", sTTConfigForm.MODEL);

            writer.WriteString("WHISPER_MODEL", sTTConfigForm.WHISPER_MODEL);

            writer.WriteString("DEEPGRAM_API_KEY", sTTConfigForm.DEEPGRAM_API_KEY);

            writer.WriteString("AZURE_API_KEY", sTTConfigForm.AZURE_API_KEY);

            writer.WriteString("AZURE_REGION", sTTConfigForm.AZURE_REGION);

            writer.WriteString("AZURE_LOCALES", sTTConfigForm.AZURE_LOCALES);

            writer.WriteString("AZURE_BASE_URL", sTTConfigForm.AZURE_BASE_URL);

            writer.WriteString("AZURE_MAX_SPEAKERS", sTTConfigForm.AZURE_MAX_SPEAKERS);

            if (sTTConfigForm.SUPPORTED_CONTENT_TYPESOption.IsSet)
            {
                writer.WritePropertyName("SUPPORTED_CONTENT_TYPES");
                JsonSerializer.Serialize(writer, sTTConfigForm.SUPPORTED_CONTENT_TYPES, jsonSerializerOptions);
            }
        }
    }
}
