// <auto-generated>
/*
 * Open WebUI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OpenWebuiRoutersOpenaiOpenAIConfigForm
    /// </summary>
    public partial class OpenWebuiRoutersOpenaiOpenAIConfigForm : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenWebuiRoutersOpenaiOpenAIConfigForm" /> class.
        /// </summary>
        /// <param name="oPENAIAPIBASEURLS">oPENAIAPIBASEURLS</param>
        /// <param name="oPENAIAPIKEYS">oPENAIAPIKEYS</param>
        /// <param name="oPENAIAPICONFIGS">oPENAIAPICONFIGS</param>
        /// <param name="eNABLEOPENAIAPI">eNABLEOPENAIAPI</param>
        [JsonConstructor]
        public OpenWebuiRoutersOpenaiOpenAIConfigForm(List<string> oPENAIAPIBASEURLS, List<string> oPENAIAPIKEYS, Object oPENAIAPICONFIGS, Option<bool?> eNABLEOPENAIAPI = default)
        {
            OPENAI_API_BASE_URLS = oPENAIAPIBASEURLS;
            OPENAI_API_KEYS = oPENAIAPIKEYS;
            OPENAI_API_CONFIGS = oPENAIAPICONFIGS;
            ENABLE_OPENAI_APIOption = eNABLEOPENAIAPI;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OPENAI_API_BASE_URLS
        /// </summary>
        [JsonPropertyName("OPENAI_API_BASE_URLS")]
        public List<string> OPENAI_API_BASE_URLS { get; set; }

        /// <summary>
        /// Gets or Sets OPENAI_API_KEYS
        /// </summary>
        [JsonPropertyName("OPENAI_API_KEYS")]
        public List<string> OPENAI_API_KEYS { get; set; }

        /// <summary>
        /// Gets or Sets OPENAI_API_CONFIGS
        /// </summary>
        [JsonPropertyName("OPENAI_API_CONFIGS")]
        public Object OPENAI_API_CONFIGS { get; set; }

        /// <summary>
        /// Used to track the state of ENABLE_OPENAI_API
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ENABLE_OPENAI_APIOption { get; private set; }

        /// <summary>
        /// Gets or Sets ENABLE_OPENAI_API
        /// </summary>
        [JsonPropertyName("ENABLE_OPENAI_API")]
        public bool? ENABLE_OPENAI_API { get { return this.ENABLE_OPENAI_APIOption; } set { this.ENABLE_OPENAI_APIOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenWebuiRoutersOpenaiOpenAIConfigForm {\n");
            sb.Append("  OPENAI_API_BASE_URLS: ").Append(OPENAI_API_BASE_URLS).Append("\n");
            sb.Append("  OPENAI_API_KEYS: ").Append(OPENAI_API_KEYS).Append("\n");
            sb.Append("  OPENAI_API_CONFIGS: ").Append(OPENAI_API_CONFIGS).Append("\n");
            sb.Append("  ENABLE_OPENAI_API: ").Append(ENABLE_OPENAI_API).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OpenWebuiRoutersOpenaiOpenAIConfigForm" />
    /// </summary>
    public class OpenWebuiRoutersOpenaiOpenAIConfigFormJsonConverter : JsonConverter<OpenWebuiRoutersOpenaiOpenAIConfigForm>
    {
        /// <summary>
        /// Deserializes json to <see cref="OpenWebuiRoutersOpenaiOpenAIConfigForm" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OpenWebuiRoutersOpenaiOpenAIConfigForm Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> oPENAIAPIBASEURLS = default;
            Option<List<string>?> oPENAIAPIKEYS = default;
            Option<Object?> oPENAIAPICONFIGS = default;
            Option<bool?> eNABLEOPENAIAPI = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "OPENAI_API_BASE_URLS":
                            oPENAIAPIBASEURLS = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "OPENAI_API_KEYS":
                            oPENAIAPIKEYS = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "OPENAI_API_CONFIGS":
                            oPENAIAPICONFIGS = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ENABLE_OPENAI_API":
                            eNABLEOPENAIAPI = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!oPENAIAPIBASEURLS.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersOpenaiOpenAIConfigForm.", nameof(oPENAIAPIBASEURLS));

            if (!oPENAIAPIKEYS.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersOpenaiOpenAIConfigForm.", nameof(oPENAIAPIKEYS));

            if (!oPENAIAPICONFIGS.IsSet)
                throw new ArgumentException("Property is required for class OpenWebuiRoutersOpenaiOpenAIConfigForm.", nameof(oPENAIAPICONFIGS));

            if (oPENAIAPIBASEURLS.IsSet && oPENAIAPIBASEURLS.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPIBASEURLS), "Property is not nullable for class OpenWebuiRoutersOpenaiOpenAIConfigForm.");

            if (oPENAIAPIKEYS.IsSet && oPENAIAPIKEYS.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPIKEYS), "Property is not nullable for class OpenWebuiRoutersOpenaiOpenAIConfigForm.");

            if (oPENAIAPICONFIGS.IsSet && oPENAIAPICONFIGS.Value == null)
                throw new ArgumentNullException(nameof(oPENAIAPICONFIGS), "Property is not nullable for class OpenWebuiRoutersOpenaiOpenAIConfigForm.");

            return new OpenWebuiRoutersOpenaiOpenAIConfigForm(oPENAIAPIBASEURLS.Value!, oPENAIAPIKEYS.Value!, oPENAIAPICONFIGS.Value!, eNABLEOPENAIAPI);
        }

        /// <summary>
        /// Serializes a <see cref="OpenWebuiRoutersOpenaiOpenAIConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersOpenaiOpenAIConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OpenWebuiRoutersOpenaiOpenAIConfigForm openWebuiRoutersOpenaiOpenAIConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, openWebuiRoutersOpenaiOpenAIConfigForm, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OpenWebuiRoutersOpenaiOpenAIConfigForm" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="openWebuiRoutersOpenaiOpenAIConfigForm"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OpenWebuiRoutersOpenaiOpenAIConfigForm openWebuiRoutersOpenaiOpenAIConfigForm, JsonSerializerOptions jsonSerializerOptions)
        {
            if (openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_BASE_URLS == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_BASE_URLS), "Property is required for class OpenWebuiRoutersOpenaiOpenAIConfigForm.");

            if (openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_KEYS == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_KEYS), "Property is required for class OpenWebuiRoutersOpenaiOpenAIConfigForm.");

            if (openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_CONFIGS == null)
                throw new ArgumentNullException(nameof(openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_CONFIGS), "Property is required for class OpenWebuiRoutersOpenaiOpenAIConfigForm.");

            writer.WritePropertyName("OPENAI_API_BASE_URLS");
            JsonSerializer.Serialize(writer, openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_BASE_URLS, jsonSerializerOptions);
            writer.WritePropertyName("OPENAI_API_KEYS");
            JsonSerializer.Serialize(writer, openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_KEYS, jsonSerializerOptions);
            writer.WritePropertyName("OPENAI_API_CONFIGS");
            JsonSerializer.Serialize(writer, openWebuiRoutersOpenaiOpenAIConfigForm.OPENAI_API_CONFIGS, jsonSerializerOptions);
            if (openWebuiRoutersOpenaiOpenAIConfigForm.ENABLE_OPENAI_APIOption.IsSet)
                if (openWebuiRoutersOpenaiOpenAIConfigForm.ENABLE_OPENAI_APIOption.Value != null)
                    writer.WriteBoolean("ENABLE_OPENAI_API", openWebuiRoutersOpenaiOpenAIConfigForm.ENABLE_OPENAI_APIOption.Value!.Value);
                else
                    writer.WriteNull("ENABLE_OPENAI_API");
        }
    }
}
